// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: com/coralogixapis/events2metrics/v2/events2metrics_definition.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	l2m "terraform-provider-coralogix/coralogix/clientset/grpc/logs2metrics/v2"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type E2MType int32

const (
	E2MType_E2M_TYPE_UNSPECIFIED   E2MType = 0
	E2MType_E2M_TYPE_LOGS2METRICS  E2MType = 1
	E2MType_E2M_TYPE_SPANS2METRICS E2MType = 2
)

// Enum value maps for E2MType.
var (
	E2MType_name = map[int32]string{
		0: "E2M_TYPE_UNSPECIFIED",
		1: "E2M_TYPE_LOGS2METRICS",
		2: "E2M_TYPE_SPANS2METRICS",
	}
	E2MType_value = map[string]int32{
		"E2M_TYPE_UNSPECIFIED":   0,
		"E2M_TYPE_LOGS2METRICS":  1,
		"E2M_TYPE_SPANS2METRICS": 2,
	}
)

func (x E2MType) Enum() *E2MType {
	p := new(E2MType)
	*p = x
	return p
}

func (x E2MType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (E2MType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_enumTypes[0].Descriptor()
}

func (E2MType) Type() protoreflect.EnumType {
	return &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_enumTypes[0]
}

func (x E2MType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use E2MType.Descriptor instead.
func (E2MType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescGZIP(), []int{0}
}

type Aggregation_AggType int32

const (
	Aggregation_AGG_TYPE_UNSPECIFIED Aggregation_AggType = 0
	Aggregation_AGG_TYPE_MIN         Aggregation_AggType = 1
	Aggregation_AGG_TYPE_MAX         Aggregation_AggType = 2
	Aggregation_AGG_TYPE_COUNT       Aggregation_AggType = 3
	Aggregation_AGG_TYPE_AVG         Aggregation_AggType = 4
	Aggregation_AGG_TYPE_SUM         Aggregation_AggType = 5
	Aggregation_AGG_TYPE_HISTOGRAM   Aggregation_AggType = 6
	Aggregation_AGG_TYPE_SAMPLES     Aggregation_AggType = 7
)

// Enum value maps for Aggregation_AggType.
var (
	Aggregation_AggType_name = map[int32]string{
		0: "AGG_TYPE_UNSPECIFIED",
		1: "AGG_TYPE_MIN",
		2: "AGG_TYPE_MAX",
		3: "AGG_TYPE_COUNT",
		4: "AGG_TYPE_AVG",
		5: "AGG_TYPE_SUM",
		6: "AGG_TYPE_HISTOGRAM",
		7: "AGG_TYPE_SAMPLES",
	}
	Aggregation_AggType_value = map[string]int32{
		"AGG_TYPE_UNSPECIFIED": 0,
		"AGG_TYPE_MIN":         1,
		"AGG_TYPE_MAX":         2,
		"AGG_TYPE_COUNT":       3,
		"AGG_TYPE_AVG":         4,
		"AGG_TYPE_SUM":         5,
		"AGG_TYPE_HISTOGRAM":   6,
		"AGG_TYPE_SAMPLES":     7,
	}
)

func (x Aggregation_AggType) Enum() *Aggregation_AggType {
	p := new(Aggregation_AggType)
	*p = x
	return p
}

func (x Aggregation_AggType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Aggregation_AggType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_enumTypes[1].Descriptor()
}

func (Aggregation_AggType) Type() protoreflect.EnumType {
	return &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_enumTypes[1]
}

func (x Aggregation_AggType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Aggregation_AggType.Descriptor instead.
func (Aggregation_AggType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescGZIP(), []int{5, 0}
}

type E2MAggSamples_SampleType int32

const (
	E2MAggSamples_SAMPLE_TYPE_UNSPECIFIED E2MAggSamples_SampleType = 0
	E2MAggSamples_SAMPLE_TYPE_MIN         E2MAggSamples_SampleType = 1
	E2MAggSamples_SAMPLE_TYPE_MAX         E2MAggSamples_SampleType = 2
)

// Enum value maps for E2MAggSamples_SampleType.
var (
	E2MAggSamples_SampleType_name = map[int32]string{
		0: "SAMPLE_TYPE_UNSPECIFIED",
		1: "SAMPLE_TYPE_MIN",
		2: "SAMPLE_TYPE_MAX",
	}
	E2MAggSamples_SampleType_value = map[string]int32{
		"SAMPLE_TYPE_UNSPECIFIED": 0,
		"SAMPLE_TYPE_MIN":         1,
		"SAMPLE_TYPE_MAX":         2,
	}
)

func (x E2MAggSamples_SampleType) Enum() *E2MAggSamples_SampleType {
	p := new(E2MAggSamples_SampleType)
	*p = x
	return p
}

func (x E2MAggSamples_SampleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (E2MAggSamples_SampleType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_enumTypes[2].Descriptor()
}

func (E2MAggSamples_SampleType) Type() protoreflect.EnumType {
	return &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_enumTypes[2]
}

func (x E2MAggSamples_SampleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use E2MAggSamples_SampleType.Descriptor instead.
func (E2MAggSamples_SampleType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescGZIP(), []int{6, 0}
}

type E2M struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description  *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	CreateTime   *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime   *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Permutations *E2MPermutations        `protobuf:"bytes,6,opt,name=permutations,proto3" json:"permutations,omitempty"`
	MetricLabels []*MetricLabel          `protobuf:"bytes,7,rep,name=metric_labels,json=metricLabels,proto3" json:"metric_labels,omitempty"`
	MetricFields []*MetricField          `protobuf:"bytes,8,rep,name=metric_fields,json=metricFields,proto3" json:"metric_fields,omitempty"`
	Type         E2MType                 `protobuf:"varint,9,opt,name=type,proto3,enum=com.coralogixapis.events2metrics.v2.E2MType" json:"type,omitempty"`
	// Types that are assignable to Query:
	//	*E2M_SpansQuery
	//	*E2M_LogsQuery
	Query isE2M_Query `protobuf_oneof:"query"`
}

func (x *E2M) Reset() {
	*x = E2M{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2M) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2M) ProtoMessage() {}

func (x *E2M) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2M.ProtoReflect.Descriptor instead.
func (*E2M) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescGZIP(), []int{0}
}

func (x *E2M) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *E2M) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *E2M) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *E2M) GetCreateTime() *wrapperspb.StringValue {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *E2M) GetUpdateTime() *wrapperspb.StringValue {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *E2M) GetPermutations() *E2MPermutations {
	if x != nil {
		return x.Permutations
	}
	return nil
}

func (x *E2M) GetMetricLabels() []*MetricLabel {
	if x != nil {
		return x.MetricLabels
	}
	return nil
}

func (x *E2M) GetMetricFields() []*MetricField {
	if x != nil {
		return x.MetricFields
	}
	return nil
}

func (x *E2M) GetType() E2MType {
	if x != nil {
		return x.Type
	}
	return E2MType_E2M_TYPE_UNSPECIFIED
}

func (m *E2M) GetQuery() isE2M_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *E2M) GetSpansQuery() *SpansQuery {
	if x, ok := x.GetQuery().(*E2M_SpansQuery); ok {
		return x.SpansQuery
	}
	return nil
}

func (x *E2M) GetLogsQuery() *l2m.LogsQuery {
	if x, ok := x.GetQuery().(*E2M_LogsQuery); ok {
		return x.LogsQuery
	}
	return nil
}

type isE2M_Query interface {
	isE2M_Query()
}

type E2M_SpansQuery struct {
	SpansQuery *SpansQuery `protobuf:"bytes,10,opt,name=spans_query,json=spansQuery,proto3,oneof"`
}

type E2M_LogsQuery struct {
	LogsQuery *l2m.LogsQuery `protobuf:"bytes,11,opt,name=logs_query,json=logsQuery,proto3,oneof"`
}

func (*E2M_SpansQuery) isE2M_Query() {}

func (*E2M_LogsQuery) isE2M_Query() {}

type E2MCreateParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description       *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	PermutationsLimit *wrapperspb.Int32Value  `protobuf:"bytes,3,opt,name=permutations_limit,json=permutationsLimit,proto3" json:"permutations_limit,omitempty"`
	MetricLabels      []*MetricLabel          `protobuf:"bytes,4,rep,name=metric_labels,json=metricLabels,proto3" json:"metric_labels,omitempty"`
	MetricFields      []*MetricField          `protobuf:"bytes,5,rep,name=metric_fields,json=metricFields,proto3" json:"metric_fields,omitempty"`
	Type              E2MType                 `protobuf:"varint,6,opt,name=type,proto3,enum=com.coralogixapis.events2metrics.v2.E2MType" json:"type,omitempty"`
	// Types that are assignable to Query:
	//	*E2MCreateParams_SpansQuery
	//	*E2MCreateParams_LogsQuery
	Query isE2MCreateParams_Query `protobuf_oneof:"query"`
}

func (x *E2MCreateParams) Reset() {
	*x = E2MCreateParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2MCreateParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2MCreateParams) ProtoMessage() {}

func (x *E2MCreateParams) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2MCreateParams.ProtoReflect.Descriptor instead.
func (*E2MCreateParams) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescGZIP(), []int{1}
}

func (x *E2MCreateParams) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *E2MCreateParams) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *E2MCreateParams) GetPermutationsLimit() *wrapperspb.Int32Value {
	if x != nil {
		return x.PermutationsLimit
	}
	return nil
}

func (x *E2MCreateParams) GetMetricLabels() []*MetricLabel {
	if x != nil {
		return x.MetricLabels
	}
	return nil
}

func (x *E2MCreateParams) GetMetricFields() []*MetricField {
	if x != nil {
		return x.MetricFields
	}
	return nil
}

func (x *E2MCreateParams) GetType() E2MType {
	if x != nil {
		return x.Type
	}
	return E2MType_E2M_TYPE_UNSPECIFIED
}

func (m *E2MCreateParams) GetQuery() isE2MCreateParams_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *E2MCreateParams) GetSpansQuery() *SpansQuery {
	if x, ok := x.GetQuery().(*E2MCreateParams_SpansQuery); ok {
		return x.SpansQuery
	}
	return nil
}

func (x *E2MCreateParams) GetLogsQuery() *l2m.LogsQuery {
	if x, ok := x.GetQuery().(*E2MCreateParams_LogsQuery); ok {
		return x.LogsQuery
	}
	return nil
}

type isE2MCreateParams_Query interface {
	isE2MCreateParams_Query()
}

type E2MCreateParams_SpansQuery struct {
	SpansQuery *SpansQuery `protobuf:"bytes,7,opt,name=spans_query,json=spansQuery,proto3,oneof"`
}

type E2MCreateParams_LogsQuery struct {
	LogsQuery *l2m.LogsQuery `protobuf:"bytes,8,opt,name=logs_query,json=logsQuery,proto3,oneof"`
}

func (*E2MCreateParams_SpansQuery) isE2MCreateParams_Query() {}

func (*E2MCreateParams_LogsQuery) isE2MCreateParams_Query() {}

type E2MPermutations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit            int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	HasExceededLimit bool  `protobuf:"varint,2,opt,name=has_exceeded_limit,json=hasExceededLimit,proto3" json:"has_exceeded_limit,omitempty"`
}

func (x *E2MPermutations) Reset() {
	*x = E2MPermutations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2MPermutations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2MPermutations) ProtoMessage() {}

func (x *E2MPermutations) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2MPermutations.ProtoReflect.Descriptor instead.
func (*E2MPermutations) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescGZIP(), []int{2}
}

func (x *E2MPermutations) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *E2MPermutations) GetHasExceededLimit() bool {
	if x != nil {
		return x.HasExceededLimit
	}
	return false
}

type MetricLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetLabel *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=target_label,json=targetLabel,proto3" json:"target_label,omitempty"`
	SourceField *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=source_field,json=sourceField,proto3" json:"source_field,omitempty"`
}

func (x *MetricLabel) Reset() {
	*x = MetricLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricLabel) ProtoMessage() {}

func (x *MetricLabel) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricLabel.ProtoReflect.Descriptor instead.
func (*MetricLabel) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescGZIP(), []int{3}
}

func (x *MetricLabel) GetTargetLabel() *wrapperspb.StringValue {
	if x != nil {
		return x.TargetLabel
	}
	return nil
}

func (x *MetricLabel) GetSourceField() *wrapperspb.StringValue {
	if x != nil {
		return x.SourceField
	}
	return nil
}

type MetricField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetBaseMetricName *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=target_base_metric_name,json=targetBaseMetricName,proto3" json:"target_base_metric_name,omitempty"`
	SourceField          *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=source_field,json=sourceField,proto3" json:"source_field,omitempty"`
	Aggregations         []*Aggregation          `protobuf:"bytes,7,rep,name=aggregations,proto3" json:"aggregations,omitempty"`
}

func (x *MetricField) Reset() {
	*x = MetricField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricField) ProtoMessage() {}

func (x *MetricField) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricField.ProtoReflect.Descriptor instead.
func (*MetricField) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescGZIP(), []int{4}
}

func (x *MetricField) GetTargetBaseMetricName() *wrapperspb.StringValue {
	if x != nil {
		return x.TargetBaseMetricName
	}
	return nil
}

func (x *MetricField) GetSourceField() *wrapperspb.StringValue {
	if x != nil {
		return x.SourceField
	}
	return nil
}

func (x *MetricField) GetAggregations() []*Aggregation {
	if x != nil {
		return x.Aggregations
	}
	return nil
}

type Aggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled          bool                `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	AggType          Aggregation_AggType `protobuf:"varint,2,opt,name=agg_type,json=aggType,proto3,enum=com.coralogixapis.events2metrics.v2.Aggregation_AggType" json:"agg_type,omitempty"`
	TargetMetricName string              `protobuf:"bytes,3,opt,name=target_metric_name,json=targetMetricName,proto3" json:"target_metric_name,omitempty"`
	// Types that are assignable to AggMetadata:
	//	*Aggregation_Samples
	//	*Aggregation_Histogram
	AggMetadata isAggregation_AggMetadata `protobuf_oneof:"agg_metadata"`
}

func (x *Aggregation) Reset() {
	*x = Aggregation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aggregation) ProtoMessage() {}

func (x *Aggregation) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aggregation.ProtoReflect.Descriptor instead.
func (*Aggregation) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescGZIP(), []int{5}
}

func (x *Aggregation) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Aggregation) GetAggType() Aggregation_AggType {
	if x != nil {
		return x.AggType
	}
	return Aggregation_AGG_TYPE_UNSPECIFIED
}

func (x *Aggregation) GetTargetMetricName() string {
	if x != nil {
		return x.TargetMetricName
	}
	return ""
}

func (m *Aggregation) GetAggMetadata() isAggregation_AggMetadata {
	if m != nil {
		return m.AggMetadata
	}
	return nil
}

func (x *Aggregation) GetSamples() *E2MAggSamples {
	if x, ok := x.GetAggMetadata().(*Aggregation_Samples); ok {
		return x.Samples
	}
	return nil
}

func (x *Aggregation) GetHistogram() *E2MAggHistogram {
	if x, ok := x.GetAggMetadata().(*Aggregation_Histogram); ok {
		return x.Histogram
	}
	return nil
}

type isAggregation_AggMetadata interface {
	isAggregation_AggMetadata()
}

type Aggregation_Samples struct {
	Samples *E2MAggSamples `protobuf:"bytes,4,opt,name=samples,proto3,oneof"`
}

type Aggregation_Histogram struct {
	Histogram *E2MAggHistogram `protobuf:"bytes,5,opt,name=histogram,proto3,oneof"`
}

func (*Aggregation_Samples) isAggregation_AggMetadata() {}

func (*Aggregation_Histogram) isAggregation_AggMetadata() {}

type E2MAggSamples struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleType E2MAggSamples_SampleType `protobuf:"varint,2,opt,name=sample_type,json=sampleType,proto3,enum=com.coralogixapis.events2metrics.v2.E2MAggSamples_SampleType" json:"sample_type,omitempty"`
}

func (x *E2MAggSamples) Reset() {
	*x = E2MAggSamples{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2MAggSamples) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2MAggSamples) ProtoMessage() {}

func (x *E2MAggSamples) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2MAggSamples.ProtoReflect.Descriptor instead.
func (*E2MAggSamples) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescGZIP(), []int{6}
}

func (x *E2MAggSamples) GetSampleType() E2MAggSamples_SampleType {
	if x != nil {
		return x.SampleType
	}
	return E2MAggSamples_SAMPLE_TYPE_UNSPECIFIED
}

type E2MAggHistogram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buckets []float32 `protobuf:"fixed32,1,rep,packed,name=buckets,proto3" json:"buckets,omitempty"`
}

func (x *E2MAggHistogram) Reset() {
	*x = E2MAggHistogram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2MAggHistogram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2MAggHistogram) ProtoMessage() {}

func (x *E2MAggHistogram) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2MAggHistogram.ProtoReflect.Descriptor instead.
func (*E2MAggHistogram) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescGZIP(), []int{7}
}

func (x *E2MAggHistogram) GetBuckets() []float32 {
	if x != nil {
		return x.Buckets
	}
	return nil
}

var File_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto protoreflect.FileDescriptor

var file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDesc = []byte{
	0x0a, 0x43, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x1a, 0x32, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6c, 0x6f,
	0x67, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x6c, 0x6f,
	0x67, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f,
	0x76, 0x32, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x06, 0x0a, 0x03, 0x45, 0x32, 0x4d, 0x12, 0x2c, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x0c, 0x70, 0x65,
	0x72, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x32, 0x4d, 0x50, 0x65, 0x72, 0x6d, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x6d, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0c, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x55, 0x0a, 0x0d, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x32, 0x4d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x70,
	0x61, 0x6e, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x70, 0x61, 0x6e, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x70, 0x61,
	0x6e, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x73, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x4c, 0x6f, 0x67, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x67,
	0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22,
	0xea, 0x04, 0x0a, 0x0f, 0x45, 0x32, 0x4d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x6d, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11,
	0x70, 0x65, 0x72, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x55, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x55, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x45, 0x32, 0x4d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x51, 0x0a, 0x0b, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x70, 0x61, 0x6e, 0x73,
	0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x6e,
	0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x4d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x6f, 0x67,
	0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x73, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x55, 0x0a, 0x0f,
	0x45, 0x32, 0x4d, 0x50, 0x65, 0x72, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x61, 0x73, 0x5f, 0x65, 0x78, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x68, 0x61, 0x73, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xf9, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x53, 0x0a, 0x17, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x54, 0x0a, 0x0c, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x90, 0x04, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x08, 0x61,
	0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e,
	0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x32, 0x4d, 0x41, 0x67, 0x67, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x54,
	0x0a, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x32, 0x4d, 0x41, 0x67, 0x67, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x22, 0xad, 0x01, 0x0a, 0x07, 0x41, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x14, 0x41, 0x47, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x47,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x41, 0x47, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x41, 0x47, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x47, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x56, 0x47, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x47, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x55, 0x4d, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x47, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x06, 0x12, 0x14,
	0x0a, 0x10, 0x41, 0x47, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c,
	0x45, 0x53, 0x10, 0x07, 0x42, 0x0e, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xc4, 0x01, 0x0a, 0x0d, 0x45, 0x32, 0x4d, 0x41, 0x67, 0x67, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x45, 0x32, 0x4d, 0x41, 0x67, 0x67, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x53, 0x0a, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x02, 0x22, 0x2b, 0x0a, 0x0f, 0x45,
	0x32, 0x4d, 0x41, 0x67, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2a, 0x5a, 0x0a, 0x07, 0x45, 0x32, 0x4d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x32, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x45, 0x32, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x53, 0x32, 0x4d,
	0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x32, 0x4d, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x41, 0x4e, 0x53, 0x32, 0x4d, 0x45, 0x54, 0x52, 0x49,
	0x43, 0x53, 0x10, 0x02, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescOnce sync.Once
	file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescData = file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDesc
)

func file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescData)
	})
	return file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDescData
}

var file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_goTypes = []interface{}{
	(E2MType)(0),                   // 0: com.coralogixapis.events2metrics.v2.E2MType
	(Aggregation_AggType)(0),       // 1: com.coralogixapis.events2metrics.v2.Aggregation.AggType
	(E2MAggSamples_SampleType)(0),  // 2: com.coralogixapis.events2metrics.v2.E2MAggSamples.SampleType
	(*E2M)(nil),                    // 3: com.coralogixapis.events2metrics.v2.E2M
	(*E2MCreateParams)(nil),        // 4: com.coralogixapis.events2metrics.v2.E2MCreateParams
	(*E2MPermutations)(nil),        // 5: com.coralogixapis.events2metrics.v2.E2MPermutations
	(*MetricLabel)(nil),            // 6: com.coralogixapis.events2metrics.v2.MetricLabel
	(*MetricField)(nil),            // 7: com.coralogixapis.events2metrics.v2.MetricField
	(*Aggregation)(nil),            // 8: com.coralogixapis.events2metrics.v2.Aggregation
	(*E2MAggSamples)(nil),          // 9: com.coralogixapis.events2metrics.v2.E2MAggSamples
	(*E2MAggHistogram)(nil),        // 10: com.coralogixapis.events2metrics.v2.E2MAggHistogram
	(*wrapperspb.StringValue)(nil), // 11: google.protobuf.StringValue
	(*SpansQuery)(nil),             // 12: com.coralogixapis.spans2metrics.v2.SpansQuery
	(*l2m.LogsQuery)(nil),              // 13: com.coralogixapis.logs2metrics.v2.LogsQuery
	(*wrapperspb.Int32Value)(nil),  // 14: google.protobuf.Int32Value
}
var file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_depIdxs = []int32{
	11, // 0: com.coralogixapis.events2metrics.v2.E2M.id:type_name -> google.protobuf.StringValue
	11, // 1: com.coralogixapis.events2metrics.v2.E2M.name:type_name -> google.protobuf.StringValue
	11, // 2: com.coralogixapis.events2metrics.v2.E2M.description:type_name -> google.protobuf.StringValue
	11, // 3: com.coralogixapis.events2metrics.v2.E2M.create_time:type_name -> google.protobuf.StringValue
	11, // 4: com.coralogixapis.events2metrics.v2.E2M.update_time:type_name -> google.protobuf.StringValue
	5,  // 5: com.coralogixapis.events2metrics.v2.E2M.permutations:type_name -> com.coralogixapis.events2metrics.v2.E2MPermutations
	6,  // 6: com.coralogixapis.events2metrics.v2.E2M.metric_labels:type_name -> com.coralogixapis.events2metrics.v2.MetricLabel
	7,  // 7: com.coralogixapis.events2metrics.v2.E2M.metric_fields:type_name -> com.coralogixapis.events2metrics.v2.MetricField
	0,  // 8: com.coralogixapis.events2metrics.v2.E2M.type:type_name -> com.coralogixapis.events2metrics.v2.E2MType
	12, // 9: com.coralogixapis.events2metrics.v2.E2M.spans_query:type_name -> com.coralogixapis.spans2metrics.v2.SpansQuery
	13, // 10: com.coralogixapis.events2metrics.v2.E2M.logs_query:type_name -> com.coralogixapis.logs2metrics.v2.LogsQuery
	11, // 11: com.coralogixapis.events2metrics.v2.E2MCreateParams.name:type_name -> google.protobuf.StringValue
	11, // 12: com.coralogixapis.events2metrics.v2.E2MCreateParams.description:type_name -> google.protobuf.StringValue
	14, // 13: com.coralogixapis.events2metrics.v2.E2MCreateParams.permutations_limit:type_name -> google.protobuf.Int32Value
	6,  // 14: com.coralogixapis.events2metrics.v2.E2MCreateParams.metric_labels:type_name -> com.coralogixapis.events2metrics.v2.MetricLabel
	7,  // 15: com.coralogixapis.events2metrics.v2.E2MCreateParams.metric_fields:type_name -> com.coralogixapis.events2metrics.v2.MetricField
	0,  // 16: com.coralogixapis.events2metrics.v2.E2MCreateParams.type:type_name -> com.coralogixapis.events2metrics.v2.E2MType
	12, // 17: com.coralogixapis.events2metrics.v2.E2MCreateParams.spans_query:type_name -> com.coralogixapis.spans2metrics.v2.SpansQuery
	13, // 18: com.coralogixapis.events2metrics.v2.E2MCreateParams.logs_query:type_name -> com.coralogixapis.logs2metrics.v2.LogsQuery
	11, // 19: com.coralogixapis.events2metrics.v2.MetricLabel.target_label:type_name -> google.protobuf.StringValue
	11, // 20: com.coralogixapis.events2metrics.v2.MetricLabel.source_field:type_name -> google.protobuf.StringValue
	11, // 21: com.coralogixapis.events2metrics.v2.MetricField.target_base_metric_name:type_name -> google.protobuf.StringValue
	11, // 22: com.coralogixapis.events2metrics.v2.MetricField.source_field:type_name -> google.protobuf.StringValue
	8,  // 23: com.coralogixapis.events2metrics.v2.MetricField.aggregations:type_name -> com.coralogixapis.events2metrics.v2.Aggregation
	1,  // 24: com.coralogixapis.events2metrics.v2.Aggregation.agg_type:type_name -> com.coralogixapis.events2metrics.v2.Aggregation.AggType
	9,  // 25: com.coralogixapis.events2metrics.v2.Aggregation.samples:type_name -> com.coralogixapis.events2metrics.v2.E2MAggSamples
	10, // 26: com.coralogixapis.events2metrics.v2.Aggregation.histogram:type_name -> com.coralogixapis.events2metrics.v2.E2MAggHistogram
	2,  // 27: com.coralogixapis.events2metrics.v2.E2MAggSamples.sample_type:type_name -> com.coralogixapis.events2metrics.v2.E2MAggSamples.SampleType
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_init() }
func file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_init() {
	if File_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto != nil {
		return
	}
	//file_com_coralogixapis_logs2metrics_v2_logs_query_proto_init()
	file_com_coralogixapis_spans2metrics_v2_spans_query_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2M); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2MCreateParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2MPermutations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aggregation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2MAggSamples); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2MAggHistogram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*E2M_SpansQuery)(nil),
		(*E2M_LogsQuery)(nil),
	}
	file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*E2MCreateParams_SpansQuery)(nil),
		(*E2MCreateParams_LogsQuery)(nil),
	}
	file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Aggregation_Samples)(nil),
		(*Aggregation_Histogram)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_depIdxs,
		EnumInfos:         file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_enumTypes,
		MessageInfos:      file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto = out.File
	file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_rawDesc = nil
	file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_goTypes = nil
	file_com_coralogixapis_events2metrics_v2_events2metrics_definition_proto_depIdxs = nil
}
