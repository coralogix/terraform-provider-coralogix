// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.1
// source: com/coralogix/integrations/v1/integration_service.proto

package integrations

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IntegrationService_ListManagedIntegrationKeys_FullMethodName   = "/com.coralogix.integrations.v1.IntegrationService/ListManagedIntegrationKeys"
	IntegrationService_GetDeployedIntegration_FullMethodName       = "/com.coralogix.integrations.v1.IntegrationService/GetDeployedIntegration"
	IntegrationService_GetIntegrations_FullMethodName              = "/com.coralogix.integrations.v1.IntegrationService/GetIntegrations"
	IntegrationService_GetIntegrationDefinition_FullMethodName     = "/com.coralogix.integrations.v1.IntegrationService/GetIntegrationDefinition"
	IntegrationService_GetIntegrationDetails_FullMethodName        = "/com.coralogix.integrations.v1.IntegrationService/GetIntegrationDetails"
	IntegrationService_GetManagedIntegrationStatus_FullMethodName  = "/com.coralogix.integrations.v1.IntegrationService/GetManagedIntegrationStatus"
	IntegrationService_SaveIntegration_FullMethodName              = "/com.coralogix.integrations.v1.IntegrationService/SaveIntegration"
	IntegrationService_UpdateIntegration_FullMethodName            = "/com.coralogix.integrations.v1.IntegrationService/UpdateIntegration"
	IntegrationService_DeleteIntegration_FullMethodName            = "/com.coralogix.integrations.v1.IntegrationService/DeleteIntegration"
	IntegrationService_GetTemplate_FullMethodName                  = "/com.coralogix.integrations.v1.IntegrationService/GetTemplate"
	IntegrationService_GetRumApplicationVersionData_FullMethodName = "/com.coralogix.integrations.v1.IntegrationService/GetRumApplicationVersionData"
	IntegrationService_SyncRumData_FullMethodName                  = "/com.coralogix.integrations.v1.IntegrationService/SyncRumData"
	IntegrationService_TestIntegration_FullMethodName              = "/com.coralogix.integrations.v1.IntegrationService/TestIntegration"
)

// IntegrationServiceClient is the client API for IntegrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntegrationServiceClient interface {
	ListManagedIntegrationKeys(ctx context.Context, in *ListManagedIntegrationKeysRequest, opts ...grpc.CallOption) (*ListManagedIntegrationKeysResponse, error)
	GetDeployedIntegration(ctx context.Context, in *GetDeployedIntegrationRequest, opts ...grpc.CallOption) (*GetDeployedIntegrationResponse, error)
	GetIntegrations(ctx context.Context, in *GetIntegrationsRequest, opts ...grpc.CallOption) (*GetIntegrationsResponse, error)
	GetIntegrationDefinition(ctx context.Context, in *GetIntegrationDefinitionRequest, opts ...grpc.CallOption) (*GetIntegrationDefinitionResponse, error)
	GetIntegrationDetails(ctx context.Context, in *GetIntegrationDetailsRequest, opts ...grpc.CallOption) (*GetIntegrationDetailsResponse, error)
	GetManagedIntegrationStatus(ctx context.Context, in *GetManagedIntegrationStatusRequest, opts ...grpc.CallOption) (*GetManagedIntegrationStatusResponse, error)
	SaveIntegration(ctx context.Context, in *SaveIntegrationRequest, opts ...grpc.CallOption) (*SaveIntegrationResponse, error)
	UpdateIntegration(ctx context.Context, in *UpdateIntegrationRequest, opts ...grpc.CallOption) (*UpdateIntegrationResponse, error)
	DeleteIntegration(ctx context.Context, in *DeleteIntegrationRequest, opts ...grpc.CallOption) (*DeleteIntegrationResponse, error)
	GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error)
	GetRumApplicationVersionData(ctx context.Context, in *GetRumApplicationVersionDataRequest, opts ...grpc.CallOption) (*GetRumApplicationVersionDataResponse, error)
	SyncRumData(ctx context.Context, in *SyncRumDataRequest, opts ...grpc.CallOption) (*SyncRumDataResponse, error)
	TestIntegration(ctx context.Context, in *TestIntegrationRequest, opts ...grpc.CallOption) (*TestIntegrationResponse, error)
}

type integrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegrationServiceClient(cc grpc.ClientConnInterface) IntegrationServiceClient {
	return &integrationServiceClient{cc}
}

func (c *integrationServiceClient) ListManagedIntegrationKeys(ctx context.Context, in *ListManagedIntegrationKeysRequest, opts ...grpc.CallOption) (*ListManagedIntegrationKeysResponse, error) {
	out := new(ListManagedIntegrationKeysResponse)
	err := c.cc.Invoke(ctx, IntegrationService_ListManagedIntegrationKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) GetDeployedIntegration(ctx context.Context, in *GetDeployedIntegrationRequest, opts ...grpc.CallOption) (*GetDeployedIntegrationResponse, error) {
	out := new(GetDeployedIntegrationResponse)
	err := c.cc.Invoke(ctx, IntegrationService_GetDeployedIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) GetIntegrations(ctx context.Context, in *GetIntegrationsRequest, opts ...grpc.CallOption) (*GetIntegrationsResponse, error) {
	out := new(GetIntegrationsResponse)
	err := c.cc.Invoke(ctx, IntegrationService_GetIntegrations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) GetIntegrationDefinition(ctx context.Context, in *GetIntegrationDefinitionRequest, opts ...grpc.CallOption) (*GetIntegrationDefinitionResponse, error) {
	out := new(GetIntegrationDefinitionResponse)
	err := c.cc.Invoke(ctx, IntegrationService_GetIntegrationDefinition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) GetIntegrationDetails(ctx context.Context, in *GetIntegrationDetailsRequest, opts ...grpc.CallOption) (*GetIntegrationDetailsResponse, error) {
	out := new(GetIntegrationDetailsResponse)
	err := c.cc.Invoke(ctx, IntegrationService_GetIntegrationDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) GetManagedIntegrationStatus(ctx context.Context, in *GetManagedIntegrationStatusRequest, opts ...grpc.CallOption) (*GetManagedIntegrationStatusResponse, error) {
	out := new(GetManagedIntegrationStatusResponse)
	err := c.cc.Invoke(ctx, IntegrationService_GetManagedIntegrationStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) SaveIntegration(ctx context.Context, in *SaveIntegrationRequest, opts ...grpc.CallOption) (*SaveIntegrationResponse, error) {
	out := new(SaveIntegrationResponse)
	err := c.cc.Invoke(ctx, IntegrationService_SaveIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) UpdateIntegration(ctx context.Context, in *UpdateIntegrationRequest, opts ...grpc.CallOption) (*UpdateIntegrationResponse, error) {
	out := new(UpdateIntegrationResponse)
	err := c.cc.Invoke(ctx, IntegrationService_UpdateIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) DeleteIntegration(ctx context.Context, in *DeleteIntegrationRequest, opts ...grpc.CallOption) (*DeleteIntegrationResponse, error) {
	out := new(DeleteIntegrationResponse)
	err := c.cc.Invoke(ctx, IntegrationService_DeleteIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error) {
	out := new(GetTemplateResponse)
	err := c.cc.Invoke(ctx, IntegrationService_GetTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) GetRumApplicationVersionData(ctx context.Context, in *GetRumApplicationVersionDataRequest, opts ...grpc.CallOption) (*GetRumApplicationVersionDataResponse, error) {
	out := new(GetRumApplicationVersionDataResponse)
	err := c.cc.Invoke(ctx, IntegrationService_GetRumApplicationVersionData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) SyncRumData(ctx context.Context, in *SyncRumDataRequest, opts ...grpc.CallOption) (*SyncRumDataResponse, error) {
	out := new(SyncRumDataResponse)
	err := c.cc.Invoke(ctx, IntegrationService_SyncRumData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) TestIntegration(ctx context.Context, in *TestIntegrationRequest, opts ...grpc.CallOption) (*TestIntegrationResponse, error) {
	out := new(TestIntegrationResponse)
	err := c.cc.Invoke(ctx, IntegrationService_TestIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegrationServiceServer is the server API for IntegrationService service.
// All implementations must embed UnimplementedIntegrationServiceServer
// for forward compatibility
type IntegrationServiceServer interface {
	ListManagedIntegrationKeys(context.Context, *ListManagedIntegrationKeysRequest) (*ListManagedIntegrationKeysResponse, error)
	GetDeployedIntegration(context.Context, *GetDeployedIntegrationRequest) (*GetDeployedIntegrationResponse, error)
	GetIntegrations(context.Context, *GetIntegrationsRequest) (*GetIntegrationsResponse, error)
	GetIntegrationDefinition(context.Context, *GetIntegrationDefinitionRequest) (*GetIntegrationDefinitionResponse, error)
	GetIntegrationDetails(context.Context, *GetIntegrationDetailsRequest) (*GetIntegrationDetailsResponse, error)
	GetManagedIntegrationStatus(context.Context, *GetManagedIntegrationStatusRequest) (*GetManagedIntegrationStatusResponse, error)
	SaveIntegration(context.Context, *SaveIntegrationRequest) (*SaveIntegrationResponse, error)
	UpdateIntegration(context.Context, *UpdateIntegrationRequest) (*UpdateIntegrationResponse, error)
	DeleteIntegration(context.Context, *DeleteIntegrationRequest) (*DeleteIntegrationResponse, error)
	GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateResponse, error)
	GetRumApplicationVersionData(context.Context, *GetRumApplicationVersionDataRequest) (*GetRumApplicationVersionDataResponse, error)
	SyncRumData(context.Context, *SyncRumDataRequest) (*SyncRumDataResponse, error)
	TestIntegration(context.Context, *TestIntegrationRequest) (*TestIntegrationResponse, error)
	mustEmbedUnimplementedIntegrationServiceServer()
}

// UnimplementedIntegrationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIntegrationServiceServer struct {
}

func (UnimplementedIntegrationServiceServer) ListManagedIntegrationKeys(context.Context, *ListManagedIntegrationKeysRequest) (*ListManagedIntegrationKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListManagedIntegrationKeys not implemented")
}
func (UnimplementedIntegrationServiceServer) GetDeployedIntegration(context.Context, *GetDeployedIntegrationRequest) (*GetDeployedIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployedIntegration not implemented")
}
func (UnimplementedIntegrationServiceServer) GetIntegrations(context.Context, *GetIntegrationsRequest) (*GetIntegrationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrations not implemented")
}
func (UnimplementedIntegrationServiceServer) GetIntegrationDefinition(context.Context, *GetIntegrationDefinitionRequest) (*GetIntegrationDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrationDefinition not implemented")
}
func (UnimplementedIntegrationServiceServer) GetIntegrationDetails(context.Context, *GetIntegrationDetailsRequest) (*GetIntegrationDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrationDetails not implemented")
}
func (UnimplementedIntegrationServiceServer) GetManagedIntegrationStatus(context.Context, *GetManagedIntegrationStatusRequest) (*GetManagedIntegrationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManagedIntegrationStatus not implemented")
}
func (UnimplementedIntegrationServiceServer) SaveIntegration(context.Context, *SaveIntegrationRequest) (*SaveIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveIntegration not implemented")
}
func (UnimplementedIntegrationServiceServer) UpdateIntegration(context.Context, *UpdateIntegrationRequest) (*UpdateIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIntegration not implemented")
}
func (UnimplementedIntegrationServiceServer) DeleteIntegration(context.Context, *DeleteIntegrationRequest) (*DeleteIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIntegration not implemented")
}
func (UnimplementedIntegrationServiceServer) GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (UnimplementedIntegrationServiceServer) GetRumApplicationVersionData(context.Context, *GetRumApplicationVersionDataRequest) (*GetRumApplicationVersionDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRumApplicationVersionData not implemented")
}
func (UnimplementedIntegrationServiceServer) SyncRumData(context.Context, *SyncRumDataRequest) (*SyncRumDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncRumData not implemented")
}
func (UnimplementedIntegrationServiceServer) TestIntegration(context.Context, *TestIntegrationRequest) (*TestIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestIntegration not implemented")
}
func (UnimplementedIntegrationServiceServer) mustEmbedUnimplementedIntegrationServiceServer() {}

// UnsafeIntegrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntegrationServiceServer will
// result in compilation errors.
type UnsafeIntegrationServiceServer interface {
	mustEmbedUnimplementedIntegrationServiceServer()
}

func RegisterIntegrationServiceServer(s grpc.ServiceRegistrar, srv IntegrationServiceServer) {
	s.RegisterService(&IntegrationService_ServiceDesc, srv)
}

func _IntegrationService_ListManagedIntegrationKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListManagedIntegrationKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).ListManagedIntegrationKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_ListManagedIntegrationKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).ListManagedIntegrationKeys(ctx, req.(*ListManagedIntegrationKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_GetDeployedIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeployedIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).GetDeployedIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_GetDeployedIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).GetDeployedIntegration(ctx, req.(*GetDeployedIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_GetIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntegrationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).GetIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_GetIntegrations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).GetIntegrations(ctx, req.(*GetIntegrationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_GetIntegrationDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntegrationDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).GetIntegrationDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_GetIntegrationDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).GetIntegrationDefinition(ctx, req.(*GetIntegrationDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_GetIntegrationDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntegrationDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).GetIntegrationDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_GetIntegrationDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).GetIntegrationDetails(ctx, req.(*GetIntegrationDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_GetManagedIntegrationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManagedIntegrationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).GetManagedIntegrationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_GetManagedIntegrationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).GetManagedIntegrationStatus(ctx, req.(*GetManagedIntegrationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_SaveIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).SaveIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_SaveIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).SaveIntegration(ctx, req.(*SaveIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_UpdateIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).UpdateIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_UpdateIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).UpdateIntegration(ctx, req.(*UpdateIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_DeleteIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).DeleteIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_DeleteIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).DeleteIntegration(ctx, req.(*DeleteIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_GetTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).GetTemplate(ctx, req.(*GetTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_GetRumApplicationVersionData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRumApplicationVersionDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).GetRumApplicationVersionData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_GetRumApplicationVersionData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).GetRumApplicationVersionData(ctx, req.(*GetRumApplicationVersionDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_SyncRumData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRumDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).SyncRumData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_SyncRumData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).SyncRumData(ctx, req.(*SyncRumDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_TestIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).TestIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_TestIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).TestIntegration(ctx, req.(*TestIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IntegrationService_ServiceDesc is the grpc.ServiceDesc for IntegrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntegrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.integrations.v1.IntegrationService",
	HandlerType: (*IntegrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListManagedIntegrationKeys",
			Handler:    _IntegrationService_ListManagedIntegrationKeys_Handler,
		},
		{
			MethodName: "GetDeployedIntegration",
			Handler:    _IntegrationService_GetDeployedIntegration_Handler,
		},
		{
			MethodName: "GetIntegrations",
			Handler:    _IntegrationService_GetIntegrations_Handler,
		},
		{
			MethodName: "GetIntegrationDefinition",
			Handler:    _IntegrationService_GetIntegrationDefinition_Handler,
		},
		{
			MethodName: "GetIntegrationDetails",
			Handler:    _IntegrationService_GetIntegrationDetails_Handler,
		},
		{
			MethodName: "GetManagedIntegrationStatus",
			Handler:    _IntegrationService_GetManagedIntegrationStatus_Handler,
		},
		{
			MethodName: "SaveIntegration",
			Handler:    _IntegrationService_SaveIntegration_Handler,
		},
		{
			MethodName: "UpdateIntegration",
			Handler:    _IntegrationService_UpdateIntegration_Handler,
		},
		{
			MethodName: "DeleteIntegration",
			Handler:    _IntegrationService_DeleteIntegration_Handler,
		},
		{
			MethodName: "GetTemplate",
			Handler:    _IntegrationService_GetTemplate_Handler,
		},
		{
			MethodName: "GetRumApplicationVersionData",
			Handler:    _IntegrationService_GetRumApplicationVersionData_Handler,
		},
		{
			MethodName: "SyncRumData",
			Handler:    _IntegrationService_SyncRumData_Handler,
		},
		{
			MethodName: "TestIntegration",
			Handler:    _IntegrationService_TestIntegration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/integrations/v1/integration_service.proto",
}
