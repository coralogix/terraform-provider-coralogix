// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.0
// source: com/coralogix/extensions/v1/extension.proto

package integrations

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TargetDomain int32

const (
	TargetDomain_ACTION              TargetDomain = 0
	TargetDomain_ALERT               TargetDomain = 1
	TargetDomain_ENRICHMENT          TargetDomain = 2
	TargetDomain_GRAFANA_DASHBOARD   TargetDomain = 3
	TargetDomain_KIBANA_DASHBOARD    TargetDomain = 4
	TargetDomain_PARSING_RULE        TargetDomain = 6
	TargetDomain_SAVED_VIEW          TargetDomain = 7
	TargetDomain_CX_CUSTOM_DASHBOARD TargetDomain = 8
	TargetDomain_METRICS_RULE_GROUP  TargetDomain = 9
	TargetDomain_EVENTS_TO_METRICS   TargetDomain = 10
)

// Enum value maps for TargetDomain.
var (
	TargetDomain_name = map[int32]string{
		0:  "ACTION",
		1:  "ALERT",
		2:  "ENRICHMENT",
		3:  "GRAFANA_DASHBOARD",
		4:  "KIBANA_DASHBOARD",
		6:  "PARSING_RULE",
		7:  "SAVED_VIEW",
		8:  "CX_CUSTOM_DASHBOARD",
		9:  "METRICS_RULE_GROUP",
		10: "EVENTS_TO_METRICS",
	}
	TargetDomain_value = map[string]int32{
		"ACTION":              0,
		"ALERT":               1,
		"ENRICHMENT":          2,
		"GRAFANA_DASHBOARD":   3,
		"KIBANA_DASHBOARD":    4,
		"PARSING_RULE":        6,
		"SAVED_VIEW":          7,
		"CX_CUSTOM_DASHBOARD": 8,
		"METRICS_RULE_GROUP":  9,
		"EVENTS_TO_METRICS":   10,
	}
)

func (x TargetDomain) Enum() *TargetDomain {
	p := new(TargetDomain)
	*p = x
	return p
}

func (x TargetDomain) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TargetDomain) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_extensions_v1_extension_proto_enumTypes[0].Descriptor()
}

func (TargetDomain) Type() protoreflect.EnumType {
	return &file_com_coralogix_extensions_v1_extension_proto_enumTypes[0]
}

func (x TargetDomain) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TargetDomain.Descriptor instead.
func (TargetDomain) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_extensions_v1_extension_proto_rawDescGZIP(), []int{0}
}

type ExtensionItemBinary_BinaryType int32

const (
	ExtensionItemBinary_PREVIEW_IMAGE                  ExtensionItemBinary_BinaryType = 0
	ExtensionItemBinary_KIBANA_DASHBOARD_DEFINITION    ExtensionItemBinary_BinaryType = 1
	ExtensionItemBinary_GRAFANA_DASHBOARD_DEFINITION   ExtensionItemBinary_BinaryType = 2
	ExtensionItemBinary_ENRICHMENT_CSV                 ExtensionItemBinary_BinaryType = 3
	ExtensionItemBinary_CX_CUSTOM_DASHBOARD_DEFINITION ExtensionItemBinary_BinaryType = 4
)

// Enum value maps for ExtensionItemBinary_BinaryType.
var (
	ExtensionItemBinary_BinaryType_name = map[int32]string{
		0: "PREVIEW_IMAGE",
		1: "KIBANA_DASHBOARD_DEFINITION",
		2: "GRAFANA_DASHBOARD_DEFINITION",
		3: "ENRICHMENT_CSV",
		4: "CX_CUSTOM_DASHBOARD_DEFINITION",
	}
	ExtensionItemBinary_BinaryType_value = map[string]int32{
		"PREVIEW_IMAGE":                  0,
		"KIBANA_DASHBOARD_DEFINITION":    1,
		"GRAFANA_DASHBOARD_DEFINITION":   2,
		"ENRICHMENT_CSV":                 3,
		"CX_CUSTOM_DASHBOARD_DEFINITION": 4,
	}
)

func (x ExtensionItemBinary_BinaryType) Enum() *ExtensionItemBinary_BinaryType {
	p := new(ExtensionItemBinary_BinaryType)
	*p = x
	return p
}

func (x ExtensionItemBinary_BinaryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExtensionItemBinary_BinaryType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_extensions_v1_extension_proto_enumTypes[1].Descriptor()
}

func (ExtensionItemBinary_BinaryType) Type() protoreflect.EnumType {
	return &file_com_coralogix_extensions_v1_extension_proto_enumTypes[1]
}

func (x ExtensionItemBinary_BinaryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExtensionItemBinary_BinaryType.Descriptor instead.
func (ExtensionItemBinary_BinaryType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_extensions_v1_extension_proto_rawDescGZIP(), []int{0, 0}
}

type ExtensionItem_PermissionResource int32

const (
	ExtensionItem_UNKNOWN                            ExtensionItem_PermissionResource = 0
	ExtensionItem_ACTION                             ExtensionItem_PermissionResource = 1
	ExtensionItem_ALERT                              ExtensionItem_PermissionResource = 2
	ExtensionItem_CUSTOM_ENRICHMENT                  ExtensionItem_PermissionResource = 3
	ExtensionItem_GEO_ENRICHMENT                     ExtensionItem_PermissionResource = 4
	ExtensionItem_SECURITY_ENRICHMENT                ExtensionItem_PermissionResource = 5
	ExtensionItem_RESOURCE_CLOUD_METADATA_ENRICHMENT ExtensionItem_PermissionResource = 6
	ExtensionItem_GRAFANA_DASHBOARD                  ExtensionItem_PermissionResource = 7
	ExtensionItem_KIBANA_DASHBOARD                   ExtensionItem_PermissionResource = 8
	ExtensionItem_PARSING_RULE                       ExtensionItem_PermissionResource = 9
	ExtensionItem_SAVED_VIEW                         ExtensionItem_PermissionResource = 10
	ExtensionItem_CX_CUSTOM_DASHBOARD                ExtensionItem_PermissionResource = 11
	ExtensionItem_METRICS_RULE_GROUP                 ExtensionItem_PermissionResource = 12
	ExtensionItem_SPAN_EVENTS_TO_METRICS             ExtensionItem_PermissionResource = 13
	ExtensionItem_LOGS_EVENTS_TO_METRICS             ExtensionItem_PermissionResource = 14
)

// Enum value maps for ExtensionItem_PermissionResource.
var (
	ExtensionItem_PermissionResource_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "ACTION",
		2:  "ALERT",
		3:  "CUSTOM_ENRICHMENT",
		4:  "GEO_ENRICHMENT",
		5:  "SECURITY_ENRICHMENT",
		6:  "RESOURCE_CLOUD_METADATA_ENRICHMENT",
		7:  "GRAFANA_DASHBOARD",
		8:  "KIBANA_DASHBOARD",
		9:  "PARSING_RULE",
		10: "SAVED_VIEW",
		11: "CX_CUSTOM_DASHBOARD",
		12: "METRICS_RULE_GROUP",
		13: "SPAN_EVENTS_TO_METRICS",
		14: "LOGS_EVENTS_TO_METRICS",
	}
	ExtensionItem_PermissionResource_value = map[string]int32{
		"UNKNOWN":                            0,
		"ACTION":                             1,
		"ALERT":                              2,
		"CUSTOM_ENRICHMENT":                  3,
		"GEO_ENRICHMENT":                     4,
		"SECURITY_ENRICHMENT":                5,
		"RESOURCE_CLOUD_METADATA_ENRICHMENT": 6,
		"GRAFANA_DASHBOARD":                  7,
		"KIBANA_DASHBOARD":                   8,
		"PARSING_RULE":                       9,
		"SAVED_VIEW":                         10,
		"CX_CUSTOM_DASHBOARD":                11,
		"METRICS_RULE_GROUP":                 12,
		"SPAN_EVENTS_TO_METRICS":             13,
		"LOGS_EVENTS_TO_METRICS":             14,
	}
)

func (x ExtensionItem_PermissionResource) Enum() *ExtensionItem_PermissionResource {
	p := new(ExtensionItem_PermissionResource)
	*p = x
	return p
}

func (x ExtensionItem_PermissionResource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExtensionItem_PermissionResource) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_extensions_v1_extension_proto_enumTypes[2].Descriptor()
}

func (ExtensionItem_PermissionResource) Type() protoreflect.EnumType {
	return &file_com_coralogix_extensions_v1_extension_proto_enumTypes[2]
}

func (x ExtensionItem_PermissionResource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExtensionItem_PermissionResource.Descriptor instead.
func (ExtensionItem_PermissionResource) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_extensions_v1_extension_proto_rawDescGZIP(), []int{1, 0}
}

type ExtensionBinary_BinaryType int32

const (
	ExtensionBinary_KIBANA_INDEX_PATTERN ExtensionBinary_BinaryType = 0
)

// Enum value maps for ExtensionBinary_BinaryType.
var (
	ExtensionBinary_BinaryType_name = map[int32]string{
		0: "KIBANA_INDEX_PATTERN",
	}
	ExtensionBinary_BinaryType_value = map[string]int32{
		"KIBANA_INDEX_PATTERN": 0,
	}
)

func (x ExtensionBinary_BinaryType) Enum() *ExtensionBinary_BinaryType {
	p := new(ExtensionBinary_BinaryType)
	*p = x
	return p
}

func (x ExtensionBinary_BinaryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExtensionBinary_BinaryType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_extensions_v1_extension_proto_enumTypes[3].Descriptor()
}

func (ExtensionBinary_BinaryType) Type() protoreflect.EnumType {
	return &file_com_coralogix_extensions_v1_extension_proto_enumTypes[3]
}

func (x ExtensionBinary_BinaryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExtensionBinary_BinaryType.Descriptor instead.
func (ExtensionBinary_BinaryType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_extensions_v1_extension_proto_rawDescGZIP(), []int{4, 0}
}

type ExtensionItemBinary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     ExtensionItemBinary_BinaryType `protobuf:"varint,1,opt,name=type,proto3,enum=com.coralogix.extensions.v1.ExtensionItemBinary_BinaryType" json:"type,omitempty"`
	Data     *wrapperspb.StringValue        `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	FileName *wrapperspb.StringValue        `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *ExtensionItemBinary) Reset() {
	*x = ExtensionItemBinary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_extensions_v1_extension_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionItemBinary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionItemBinary) ProtoMessage() {}

func (x *ExtensionItemBinary) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_extensions_v1_extension_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionItemBinary.ProtoReflect.Descriptor instead.
func (*ExtensionItemBinary) Descriptor() ([]byte, []int) {
	return file_com_coralogix_extensions_v1_extension_proto_rawDescGZIP(), []int{0}
}

func (x *ExtensionItemBinary) GetType() ExtensionItemBinary_BinaryType {
	if x != nil {
		return x.Type
	}
	return ExtensionItemBinary_PREVIEW_IMAGE
}

func (x *ExtensionItemBinary) GetData() *wrapperspb.StringValue {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExtensionItemBinary) GetFileName() *wrapperspb.StringValue {
	if x != nil {
		return x.FileName
	}
	return nil
}

type ExtensionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 *wrapperspb.StringValue          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               *wrapperspb.StringValue          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description        *wrapperspb.StringValue          `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	TargetDomain       TargetDomain                     `protobuf:"varint,4,opt,name=target_domain,json=targetDomain,proto3,enum=com.coralogix.extensions.v1.TargetDomain" json:"target_domain,omitempty"`
	Data               *structpb.Struct                 `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	Binaries           []*ExtensionItemBinary           `protobuf:"bytes,6,rep,name=binaries,proto3" json:"binaries,omitempty"`
	IsMandatory        *wrapperspb.BoolValue            `protobuf:"bytes,7,opt,name=is_mandatory,json=isMandatory,proto3" json:"is_mandatory,omitempty"`
	PermissionResource ExtensionItem_PermissionResource `protobuf:"varint,9,opt,name=permission_resource,json=permissionResource,proto3,enum=com.coralogix.extensions.v1.ExtensionItem_PermissionResource" json:"permission_resource,omitempty"`
	ExtendedInternalId *wrapperspb.StringValue          `protobuf:"bytes,10,opt,name=extended_internal_id,json=extendedInternalId,proto3" json:"extended_internal_id,omitempty"`
	UniqueId           *wrapperspb.StringValue          `protobuf:"bytes,11,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
}

func (x *ExtensionItem) Reset() {
	*x = ExtensionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_extensions_v1_extension_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionItem) ProtoMessage() {}

func (x *ExtensionItem) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_extensions_v1_extension_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionItem.ProtoReflect.Descriptor instead.
func (*ExtensionItem) Descriptor() ([]byte, []int) {
	return file_com_coralogix_extensions_v1_extension_proto_rawDescGZIP(), []int{1}
}

func (x *ExtensionItem) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ExtensionItem) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ExtensionItem) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ExtensionItem) GetTargetDomain() TargetDomain {
	if x != nil {
		return x.TargetDomain
	}
	return TargetDomain_ACTION
}

func (x *ExtensionItem) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExtensionItem) GetBinaries() []*ExtensionItemBinary {
	if x != nil {
		return x.Binaries
	}
	return nil
}

func (x *ExtensionItem) GetIsMandatory() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsMandatory
	}
	return nil
}

func (x *ExtensionItem) GetPermissionResource() ExtensionItem_PermissionResource {
	if x != nil {
		return x.PermissionResource
	}
	return ExtensionItem_UNKNOWN
}

func (x *ExtensionItem) GetExtendedInternalId() *wrapperspb.StringValue {
	if x != nil {
		return x.ExtendedInternalId
	}
	return nil
}

func (x *ExtensionItem) GetUniqueId() *wrapperspb.StringValue {
	if x != nil {
		return x.UniqueId
	}
	return nil
}

type ItemCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions           *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=actions,proto3" json:"actions,omitempty"`
	Alerts            *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=alerts,proto3" json:"alerts,omitempty"`
	CustomDashboards  *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=custom_dashboards,json=customDashboards,proto3" json:"custom_dashboards,omitempty"`
	Enrichments       *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=enrichments,proto3" json:"enrichments,omitempty"`
	EventsToMetrics   *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=events_to_metrics,json=eventsToMetrics,proto3" json:"events_to_metrics,omitempty"`
	GrafanaDashboards *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=grafana_dashboards,json=grafanaDashboards,proto3" json:"grafana_dashboards,omitempty"`
	KibanaDashboards  *wrapperspb.UInt32Value `protobuf:"bytes,7,opt,name=kibana_dashboards,json=kibanaDashboards,proto3" json:"kibana_dashboards,omitempty"`
	MetricsRuleGroup  *wrapperspb.UInt32Value `protobuf:"bytes,8,opt,name=metrics_rule_group,json=metricsRuleGroup,proto3" json:"metrics_rule_group,omitempty"`
	ParsingRules      *wrapperspb.UInt32Value `protobuf:"bytes,9,opt,name=parsing_rules,json=parsingRules,proto3" json:"parsing_rules,omitempty"`
	SavedViews        *wrapperspb.UInt32Value `protobuf:"bytes,10,opt,name=saved_views,json=savedViews,proto3" json:"saved_views,omitempty"`
}

func (x *ItemCounts) Reset() {
	*x = ItemCounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_extensions_v1_extension_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemCounts) ProtoMessage() {}

func (x *ItemCounts) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_extensions_v1_extension_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemCounts.ProtoReflect.Descriptor instead.
func (*ItemCounts) Descriptor() ([]byte, []int) {
	return file_com_coralogix_extensions_v1_extension_proto_rawDescGZIP(), []int{2}
}

func (x *ItemCounts) GetActions() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *ItemCounts) GetAlerts() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Alerts
	}
	return nil
}

func (x *ItemCounts) GetCustomDashboards() *wrapperspb.UInt32Value {
	if x != nil {
		return x.CustomDashboards
	}
	return nil
}

func (x *ItemCounts) GetEnrichments() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *ItemCounts) GetEventsToMetrics() *wrapperspb.UInt32Value {
	if x != nil {
		return x.EventsToMetrics
	}
	return nil
}

func (x *ItemCounts) GetGrafanaDashboards() *wrapperspb.UInt32Value {
	if x != nil {
		return x.GrafanaDashboards
	}
	return nil
}

func (x *ItemCounts) GetKibanaDashboards() *wrapperspb.UInt32Value {
	if x != nil {
		return x.KibanaDashboards
	}
	return nil
}

func (x *ItemCounts) GetMetricsRuleGroup() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MetricsRuleGroup
	}
	return nil
}

func (x *ItemCounts) GetParsingRules() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ParsingRules
	}
	return nil
}

func (x *ItemCounts) GetSavedViews() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SavedViews
	}
	return nil
}

type IntegrationDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Link *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *IntegrationDetail) Reset() {
	*x = IntegrationDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_extensions_v1_extension_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrationDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrationDetail) ProtoMessage() {}

func (x *IntegrationDetail) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_extensions_v1_extension_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrationDetail.ProtoReflect.Descriptor instead.
func (*IntegrationDetail) Descriptor() ([]byte, []int) {
	return file_com_coralogix_extensions_v1_extension_proto_rawDescGZIP(), []int{3}
}

func (x *IntegrationDetail) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *IntegrationDetail) GetLink() *wrapperspb.StringValue {
	if x != nil {
		return x.Link
	}
	return nil
}

type ExtensionBinary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ExtensionBinary_BinaryType `protobuf:"varint,1,opt,name=type,proto3,enum=com.coralogix.extensions.v1.ExtensionBinary_BinaryType" json:"type,omitempty"`
	Data *wrapperspb.StringValue    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ExtensionBinary) Reset() {
	*x = ExtensionBinary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_extensions_v1_extension_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionBinary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionBinary) ProtoMessage() {}

func (x *ExtensionBinary) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_extensions_v1_extension_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionBinary.ProtoReflect.Descriptor instead.
func (*ExtensionBinary) Descriptor() ([]byte, []int) {
	return file_com_coralogix_extensions_v1_extension_proto_rawDescGZIP(), []int{4}
}

func (x *ExtensionBinary) GetType() ExtensionBinary_BinaryType {
	if x != nil {
		return x.Type
	}
	return ExtensionBinary_KIBANA_INDEX_PATTERN
}

func (x *ExtensionBinary) GetData() *wrapperspb.StringValue {
	if x != nil {
		return x.Data
	}
	return nil
}

type ChangelogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version       *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	DescriptionMd *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=description_md,json=descriptionMd,proto3" json:"description_md,omitempty"`
}

func (x *ChangelogEntry) Reset() {
	*x = ChangelogEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_extensions_v1_extension_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangelogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangelogEntry) ProtoMessage() {}

func (x *ChangelogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_extensions_v1_extension_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangelogEntry.ProtoReflect.Descriptor instead.
func (*ChangelogEntry) Descriptor() ([]byte, []int) {
	return file_com_coralogix_extensions_v1_extension_proto_rawDescGZIP(), []int{5}
}

func (x *ChangelogEntry) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ChangelogEntry) GetDescriptionMd() *wrapperspb.StringValue {
	if x != nil {
		return x.DescriptionMd
	}
	return nil
}

type Deprecation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason                *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	ReplacementExtensions []*wrapperspb.StringValue `protobuf:"bytes,2,rep,name=replacement_extensions,json=replacementExtensions,proto3" json:"replacement_extensions,omitempty"`
}

func (x *Deprecation) Reset() {
	*x = Deprecation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_extensions_v1_extension_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deprecation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deprecation) ProtoMessage() {}

func (x *Deprecation) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_extensions_v1_extension_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deprecation.ProtoReflect.Descriptor instead.
func (*Deprecation) Descriptor() ([]byte, []int) {
	return file_com_coralogix_extensions_v1_extension_proto_rawDescGZIP(), []int{6}
}

func (x *Deprecation) GetReason() *wrapperspb.StringValue {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *Deprecation) GetReplacementExtensions() []*wrapperspb.StringValue {
	if x != nil {
		return x.ReplacementExtensions
	}
	return nil
}

type ExtensionRevision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version               *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Description           *wrapperspb.StringValue   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Excerpt               *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=excerpt,proto3" json:"excerpt,omitempty"`
	Labels                []*wrapperspb.StringValue `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	IntegrationDetails    []*IntegrationDetail      `protobuf:"bytes,5,rep,name=integration_details,json=integrationDetails,proto3" json:"integration_details,omitempty"`
	Items                 []*ExtensionItem          `protobuf:"bytes,6,rep,name=items,proto3" json:"items,omitempty"`
	Binaries              []*ExtensionBinary        `protobuf:"bytes,7,rep,name=binaries,proto3" json:"binaries,omitempty"`
	PermissionDeniedItems []*ExtensionItem          `protobuf:"bytes,8,rep,name=permission_denied_items,json=permissionDeniedItems,proto3" json:"permission_denied_items,omitempty"`
	IsTesting             *wrapperspb.BoolValue     `protobuf:"bytes,9,opt,name=is_testing,json=isTesting,proto3" json:"is_testing,omitempty"`
}

func (x *ExtensionRevision) Reset() {
	*x = ExtensionRevision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_extensions_v1_extension_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionRevision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionRevision) ProtoMessage() {}

func (x *ExtensionRevision) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_extensions_v1_extension_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionRevision.ProtoReflect.Descriptor instead.
func (*ExtensionRevision) Descriptor() ([]byte, []int) {
	return file_com_coralogix_extensions_v1_extension_proto_rawDescGZIP(), []int{7}
}

func (x *ExtensionRevision) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ExtensionRevision) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ExtensionRevision) GetExcerpt() *wrapperspb.StringValue {
	if x != nil {
		return x.Excerpt
	}
	return nil
}

func (x *ExtensionRevision) GetLabels() []*wrapperspb.StringValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ExtensionRevision) GetIntegrationDetails() []*IntegrationDetail {
	if x != nil {
		return x.IntegrationDetails
	}
	return nil
}

func (x *ExtensionRevision) GetItems() []*ExtensionItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ExtensionRevision) GetBinaries() []*ExtensionBinary {
	if x != nil {
		return x.Binaries
	}
	return nil
}

func (x *ExtensionRevision) GetPermissionDeniedItems() []*ExtensionItem {
	if x != nil {
		return x.PermissionDeniedItems
	}
	return nil
}

func (x *ExtensionRevision) GetIsTesting() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsTesting
	}
	return nil
}

type Extension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                      *wrapperspb.StringValue   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Image                     *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	DarkModeImage             *wrapperspb.StringValue   `protobuf:"bytes,4,opt,name=dark_mode_image,json=darkModeImage,proto3" json:"dark_mode_image,omitempty"`
	Revisions                 []*ExtensionRevision      `protobuf:"bytes,5,rep,name=revisions,proto3" json:"revisions,omitempty"`
	IsHidden                  *wrapperspb.BoolValue     `protobuf:"bytes,6,opt,name=is_hidden,json=isHidden,proto3" json:"is_hidden,omitempty"`
	Integrations              []string                  `protobuf:"bytes,7,rep,name=integrations,proto3" json:"integrations,omitempty"`
	Keywords                  []*wrapperspb.StringValue `protobuf:"bytes,8,rep,name=keywords,proto3" json:"keywords,omitempty"`
	PermissionDeniedRevisions []*ExtensionRevision      `protobuf:"bytes,9,rep,name=permission_denied_revisions,json=permissionDeniedRevisions,proto3" json:"permission_denied_revisions,omitempty"`
	Changelog                 []*ChangelogEntry         `protobuf:"bytes,10,rep,name=changelog,proto3" json:"changelog,omitempty"`
	Deprecation               *Deprecation              `protobuf:"bytes,11,opt,name=deprecation,proto3" json:"deprecation,omitempty"`
}

func (x *Extension) Reset() {
	*x = Extension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_extensions_v1_extension_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extension) ProtoMessage() {}

func (x *Extension) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_extensions_v1_extension_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extension.ProtoReflect.Descriptor instead.
func (*Extension) Descriptor() ([]byte, []int) {
	return file_com_coralogix_extensions_v1_extension_proto_rawDescGZIP(), []int{8}
}

func (x *Extension) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Extension) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Extension) GetImage() *wrapperspb.StringValue {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Extension) GetDarkModeImage() *wrapperspb.StringValue {
	if x != nil {
		return x.DarkModeImage
	}
	return nil
}

func (x *Extension) GetRevisions() []*ExtensionRevision {
	if x != nil {
		return x.Revisions
	}
	return nil
}

func (x *Extension) GetIsHidden() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsHidden
	}
	return nil
}

func (x *Extension) GetIntegrations() []string {
	if x != nil {
		return x.Integrations
	}
	return nil
}

func (x *Extension) GetKeywords() []*wrapperspb.StringValue {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *Extension) GetPermissionDeniedRevisions() []*ExtensionRevision {
	if x != nil {
		return x.PermissionDeniedRevisions
	}
	return nil
}

func (x *Extension) GetChangelog() []*ChangelogEntry {
	if x != nil {
		return x.Changelog
	}
	return nil
}

func (x *Extension) GetDeprecation() *Deprecation {
	if x != nil {
		return x.Deprecation
	}
	return nil
}

// Extension details for ingestion
type ExtensionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               *wrapperspb.StringValue   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description        *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Excerpt            *wrapperspb.StringValue   `protobuf:"bytes,4,opt,name=excerpt,proto3" json:"excerpt,omitempty"`
	Image              *wrapperspb.StringValue   `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	DarkModeImage      *wrapperspb.StringValue   `protobuf:"bytes,6,opt,name=dark_mode_image,json=darkModeImage,proto3" json:"dark_mode_image,omitempty"`
	Labels             []*wrapperspb.StringValue `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	Version            *wrapperspb.StringValue   `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
	Items              []*ExtensionItemData      `protobuf:"bytes,9,rep,name=items,proto3" json:"items,omitempty"`
	IntegrationDetails []*IntegrationDetail      `protobuf:"bytes,10,rep,name=integration_details,json=integrationDetails,proto3" json:"integration_details,omitempty"`
	IsHidden           *wrapperspb.BoolValue     `protobuf:"bytes,11,opt,name=is_hidden,json=isHidden,proto3" json:"is_hidden,omitempty"`
	Binaries           []*ExtensionBinary        `protobuf:"bytes,12,rep,name=binaries,proto3" json:"binaries,omitempty"`
	Integrations       []string                  `protobuf:"bytes,13,rep,name=integrations,proto3" json:"integrations,omitempty"`
	Keywords           []*wrapperspb.StringValue `protobuf:"bytes,14,rep,name=keywords,proto3" json:"keywords,omitempty"`
	Changelog          []*ChangelogEntry         `protobuf:"bytes,15,rep,name=changelog,proto3" json:"changelog,omitempty"`
	Deprecation        *Deprecation              `protobuf:"bytes,16,opt,name=deprecation,proto3" json:"deprecation,omitempty"`
}

func (x *ExtensionData) Reset() {
	*x = ExtensionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_extensions_v1_extension_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionData) ProtoMessage() {}

func (x *ExtensionData) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_extensions_v1_extension_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionData.ProtoReflect.Descriptor instead.
func (*ExtensionData) Descriptor() ([]byte, []int) {
	return file_com_coralogix_extensions_v1_extension_proto_rawDescGZIP(), []int{9}
}

func (x *ExtensionData) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ExtensionData) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ExtensionData) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ExtensionData) GetExcerpt() *wrapperspb.StringValue {
	if x != nil {
		return x.Excerpt
	}
	return nil
}

func (x *ExtensionData) GetImage() *wrapperspb.StringValue {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *ExtensionData) GetDarkModeImage() *wrapperspb.StringValue {
	if x != nil {
		return x.DarkModeImage
	}
	return nil
}

func (x *ExtensionData) GetLabels() []*wrapperspb.StringValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ExtensionData) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ExtensionData) GetItems() []*ExtensionItemData {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ExtensionData) GetIntegrationDetails() []*IntegrationDetail {
	if x != nil {
		return x.IntegrationDetails
	}
	return nil
}

func (x *ExtensionData) GetIsHidden() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsHidden
	}
	return nil
}

func (x *ExtensionData) GetBinaries() []*ExtensionBinary {
	if x != nil {
		return x.Binaries
	}
	return nil
}

func (x *ExtensionData) GetIntegrations() []string {
	if x != nil {
		return x.Integrations
	}
	return nil
}

func (x *ExtensionData) GetKeywords() []*wrapperspb.StringValue {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *ExtensionData) GetChangelog() []*ChangelogEntry {
	if x != nil {
		return x.Changelog
	}
	return nil
}

func (x *ExtensionData) GetDeprecation() *Deprecation {
	if x != nil {
		return x.Deprecation
	}
	return nil
}

type ExtensionItemData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               *wrapperspb.StringValue          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description        *wrapperspb.StringValue          `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	TargetDomain       TargetDomain                     `protobuf:"varint,3,opt,name=target_domain,json=targetDomain,proto3,enum=com.coralogix.extensions.v1.TargetDomain" json:"target_domain,omitempty"`
	Data               *structpb.Struct                 `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Binaries           []*ExtensionItemBinary           `protobuf:"bytes,5,rep,name=binaries,proto3" json:"binaries,omitempty"`
	IsMandatory        *wrapperspb.BoolValue            `protobuf:"bytes,6,opt,name=is_mandatory,json=isMandatory,proto3" json:"is_mandatory,omitempty"`
	InternalId         *wrapperspb.Int32Value           `protobuf:"bytes,7,opt,name=internal_id,json=internalId,proto3" json:"internal_id,omitempty"`
	UniqueId           *wrapperspb.StringValue          `protobuf:"bytes,8,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	PermissionResource ExtensionItem_PermissionResource `protobuf:"varint,9,opt,name=permission_resource,json=permissionResource,proto3,enum=com.coralogix.extensions.v1.ExtensionItem_PermissionResource" json:"permission_resource,omitempty"`
}

func (x *ExtensionItemData) Reset() {
	*x = ExtensionItemData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_extensions_v1_extension_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionItemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionItemData) ProtoMessage() {}

func (x *ExtensionItemData) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_extensions_v1_extension_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionItemData.ProtoReflect.Descriptor instead.
func (*ExtensionItemData) Descriptor() ([]byte, []int) {
	return file_com_coralogix_extensions_v1_extension_proto_rawDescGZIP(), []int{10}
}

func (x *ExtensionItemData) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ExtensionItemData) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ExtensionItemData) GetTargetDomain() TargetDomain {
	if x != nil {
		return x.TargetDomain
	}
	return TargetDomain_ACTION
}

func (x *ExtensionItemData) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExtensionItemData) GetBinaries() []*ExtensionItemBinary {
	if x != nil {
		return x.Binaries
	}
	return nil
}

func (x *ExtensionItemData) GetIsMandatory() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsMandatory
	}
	return nil
}

func (x *ExtensionItemData) GetInternalId() *wrapperspb.Int32Value {
	if x != nil {
		return x.InternalId
	}
	return nil
}

func (x *ExtensionItemData) GetUniqueId() *wrapperspb.StringValue {
	if x != nil {
		return x.UniqueId
	}
	return nil
}

func (x *ExtensionItemData) GetPermissionResource() ExtensionItem_PermissionResource {
	if x != nil {
		return x.PermissionResource
	}
	return ExtensionItem_UNKNOWN
}

var File_com_coralogix_extensions_v1_extension_proto protoreflect.FileDescriptor

var file_com_coralogix_extensions_v1_extension_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x02, 0x0a, 0x13, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x12, 0x4f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9a,
	0x01, 0x0a, 0x0a, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x00,
	0x12, 0x1f, 0x0a, 0x1b, 0x4b, 0x49, 0x42, 0x41, 0x4e, 0x41, 0x5f, 0x44, 0x41, 0x53, 0x48, 0x42,
	0x4f, 0x41, 0x52, 0x44, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x52, 0x41, 0x46, 0x41, 0x4e, 0x41, 0x5f, 0x44, 0x41, 0x53,
	0x48, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x52, 0x49, 0x43, 0x48, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x53, 0x56, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x58, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x41, 0x53, 0x48, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x22, 0xa6, 0x08, 0x0a, 0x0d,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2c, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a,
	0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52,
	0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x2b, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x08, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x08,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6d,
	0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x69, 0x73, 0x4d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x6e, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x12, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x49, 0x64, 0x22, 0xdc, 0x02, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x45, 0x4e, 0x52, 0x49, 0x43, 0x48, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x45, 0x4f, 0x5f, 0x45, 0x4e, 0x52, 0x49,
	0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x4e, 0x52, 0x49, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x05, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45, 0x4e, 0x52,
	0x49, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x52, 0x41,
	0x46, 0x41, 0x4e, 0x41, 0x5f, 0x44, 0x41, 0x53, 0x48, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x10, 0x07,
	0x12, 0x14, 0x0a, 0x10, 0x4b, 0x49, 0x42, 0x41, 0x4e, 0x41, 0x5f, 0x44, 0x41, 0x53, 0x48, 0x42,
	0x4f, 0x41, 0x52, 0x44, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x41, 0x52, 0x53, 0x49, 0x4e,
	0x47, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x41, 0x56, 0x45,
	0x44, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x58, 0x5f, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x41, 0x53, 0x48, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x10,
	0x0b, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x5f, 0x52, 0x55, 0x4c,
	0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x50, 0x41,
	0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x4d, 0x45, 0x54, 0x52,
	0x49, 0x43, 0x53, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x4f, 0x47, 0x53, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x10,
	0x0e, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x22, 0xb5, 0x05, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x0b,
	0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x11,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x4b, 0x0a, 0x12, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e,
	0x61, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x11, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x11, 0x6b, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x5f, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x6b, 0x69,
	0x62, 0x61, 0x6e, 0x61, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x4a,
	0x0a, 0x12, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x41, 0x0a, 0x0d, 0x70, 0x61,
	0x72, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x70, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x3d, 0x0a,
	0x0b, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x73, 0x22, 0x77, 0x0a, 0x11,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0xb8, 0x01, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x4b, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x26, 0x0a, 0x0a, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4b, 0x49, 0x42, 0x41, 0x4e, 0x41,
	0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x10, 0x00,
	0x22, 0x8d, 0x01, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0e, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x64,
	0x22, 0x98, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x85, 0x05, 0x0a, 0x11,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x65, 0x78, 0x63,
	0x65, 0x72, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x78, 0x63, 0x65, 0x72, 0x70,
	0x74, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x5f, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x48, 0x0a, 0x08, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x17, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x15, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6e,
	0x69, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x69, 0x73, 0x54, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x22, 0xd1, 0x05, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x64, 0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x64, 0x61,
	0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x69, 0x73, 0x48, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x6e, 0x0a, 0x1b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x65, 0x6e, 0x69, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x49, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x12, 0x4a, 0x0a, 0x0b, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xee, 0x07, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x65, 0x78, 0x63,
	0x65, 0x72, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x78, 0x63, 0x65, 0x72, 0x70,
	0x74, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x64, 0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x64, 0x61,
	0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x5f, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x12, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x37, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x69, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x48, 0x0a, 0x08, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x49, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x12, 0x4a, 0x0a, 0x0b,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf8, 0x04, 0x0a, 0x11, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4e, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a,
	0x08, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x69,
	0x73, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x49, 0x64, 0x12, 0x6e, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x12, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2a, 0xe3, 0x01, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45,
	0x4e, 0x52, 0x49, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x47,
	0x52, 0x41, 0x46, 0x41, 0x4e, 0x41, 0x5f, 0x44, 0x41, 0x53, 0x48, 0x42, 0x4f, 0x41, 0x52, 0x44,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x49, 0x42, 0x41, 0x4e, 0x41, 0x5f, 0x44, 0x41, 0x53,
	0x48, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x41, 0x52, 0x53,
	0x49, 0x4e, 0x47, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x41,
	0x56, 0x45, 0x44, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x58,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x41, 0x53, 0x48, 0x42, 0x4f, 0x41, 0x52,
	0x44, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x5f, 0x52,
	0x55, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53,
	0x10, 0x0a, 0x22, 0x04, 0x08, 0x05, 0x10, 0x05, 0x2a, 0x0f, 0x4c, 0x4f, 0x47, 0x53, 0x5f, 0x54,
	0x4f, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_com_coralogix_extensions_v1_extension_proto_rawDescOnce sync.Once
	file_com_coralogix_extensions_v1_extension_proto_rawDescData = file_com_coralogix_extensions_v1_extension_proto_rawDesc
)

func file_com_coralogix_extensions_v1_extension_proto_rawDescGZIP() []byte {
	file_com_coralogix_extensions_v1_extension_proto_rawDescOnce.Do(func() {
		file_com_coralogix_extensions_v1_extension_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_extensions_v1_extension_proto_rawDescData)
	})
	return file_com_coralogix_extensions_v1_extension_proto_rawDescData
}

var file_com_coralogix_extensions_v1_extension_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_com_coralogix_extensions_v1_extension_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_com_coralogix_extensions_v1_extension_proto_goTypes = []any{
	(TargetDomain)(0),                     // 0: com.coralogix.extensions.v1.TargetDomain
	(ExtensionItemBinary_BinaryType)(0),   // 1: com.coralogix.extensions.v1.ExtensionItemBinary.BinaryType
	(ExtensionItem_PermissionResource)(0), // 2: com.coralogix.extensions.v1.ExtensionItem.PermissionResource
	(ExtensionBinary_BinaryType)(0),       // 3: com.coralogix.extensions.v1.ExtensionBinary.BinaryType
	(*ExtensionItemBinary)(nil),           // 4: com.coralogix.extensions.v1.ExtensionItemBinary
	(*ExtensionItem)(nil),                 // 5: com.coralogix.extensions.v1.ExtensionItem
	(*ItemCounts)(nil),                    // 6: com.coralogix.extensions.v1.ItemCounts
	(*IntegrationDetail)(nil),             // 7: com.coralogix.extensions.v1.IntegrationDetail
	(*ExtensionBinary)(nil),               // 8: com.coralogix.extensions.v1.ExtensionBinary
	(*ChangelogEntry)(nil),                // 9: com.coralogix.extensions.v1.ChangelogEntry
	(*Deprecation)(nil),                   // 10: com.coralogix.extensions.v1.Deprecation
	(*ExtensionRevision)(nil),             // 11: com.coralogix.extensions.v1.ExtensionRevision
	(*Extension)(nil),                     // 12: com.coralogix.extensions.v1.Extension
	(*ExtensionData)(nil),                 // 13: com.coralogix.extensions.v1.ExtensionData
	(*ExtensionItemData)(nil),             // 14: com.coralogix.extensions.v1.ExtensionItemData
	(*wrapperspb.StringValue)(nil),        // 15: google.protobuf.StringValue
	(*structpb.Struct)(nil),               // 16: google.protobuf.Struct
	(*wrapperspb.BoolValue)(nil),          // 17: google.protobuf.BoolValue
	(*wrapperspb.UInt32Value)(nil),        // 18: google.protobuf.UInt32Value
	(*wrapperspb.Int32Value)(nil),         // 19: google.protobuf.Int32Value
}
var file_com_coralogix_extensions_v1_extension_proto_depIdxs = []int32{
	1,  // 0: com.coralogix.extensions.v1.ExtensionItemBinary.type:type_name -> com.coralogix.extensions.v1.ExtensionItemBinary.BinaryType
	15, // 1: com.coralogix.extensions.v1.ExtensionItemBinary.data:type_name -> google.protobuf.StringValue
	15, // 2: com.coralogix.extensions.v1.ExtensionItemBinary.file_name:type_name -> google.protobuf.StringValue
	15, // 3: com.coralogix.extensions.v1.ExtensionItem.id:type_name -> google.protobuf.StringValue
	15, // 4: com.coralogix.extensions.v1.ExtensionItem.name:type_name -> google.protobuf.StringValue
	15, // 5: com.coralogix.extensions.v1.ExtensionItem.description:type_name -> google.protobuf.StringValue
	0,  // 6: com.coralogix.extensions.v1.ExtensionItem.target_domain:type_name -> com.coralogix.extensions.v1.TargetDomain
	16, // 7: com.coralogix.extensions.v1.ExtensionItem.data:type_name -> google.protobuf.Struct
	4,  // 8: com.coralogix.extensions.v1.ExtensionItem.binaries:type_name -> com.coralogix.extensions.v1.ExtensionItemBinary
	17, // 9: com.coralogix.extensions.v1.ExtensionItem.is_mandatory:type_name -> google.protobuf.BoolValue
	2,  // 10: com.coralogix.extensions.v1.ExtensionItem.permission_resource:type_name -> com.coralogix.extensions.v1.ExtensionItem.PermissionResource
	15, // 11: com.coralogix.extensions.v1.ExtensionItem.extended_internal_id:type_name -> google.protobuf.StringValue
	15, // 12: com.coralogix.extensions.v1.ExtensionItem.unique_id:type_name -> google.protobuf.StringValue
	18, // 13: com.coralogix.extensions.v1.ItemCounts.actions:type_name -> google.protobuf.UInt32Value
	18, // 14: com.coralogix.extensions.v1.ItemCounts.alerts:type_name -> google.protobuf.UInt32Value
	18, // 15: com.coralogix.extensions.v1.ItemCounts.custom_dashboards:type_name -> google.protobuf.UInt32Value
	18, // 16: com.coralogix.extensions.v1.ItemCounts.enrichments:type_name -> google.protobuf.UInt32Value
	18, // 17: com.coralogix.extensions.v1.ItemCounts.events_to_metrics:type_name -> google.protobuf.UInt32Value
	18, // 18: com.coralogix.extensions.v1.ItemCounts.grafana_dashboards:type_name -> google.protobuf.UInt32Value
	18, // 19: com.coralogix.extensions.v1.ItemCounts.kibana_dashboards:type_name -> google.protobuf.UInt32Value
	18, // 20: com.coralogix.extensions.v1.ItemCounts.metrics_rule_group:type_name -> google.protobuf.UInt32Value
	18, // 21: com.coralogix.extensions.v1.ItemCounts.parsing_rules:type_name -> google.protobuf.UInt32Value
	18, // 22: com.coralogix.extensions.v1.ItemCounts.saved_views:type_name -> google.protobuf.UInt32Value
	15, // 23: com.coralogix.extensions.v1.IntegrationDetail.name:type_name -> google.protobuf.StringValue
	15, // 24: com.coralogix.extensions.v1.IntegrationDetail.link:type_name -> google.protobuf.StringValue
	3,  // 25: com.coralogix.extensions.v1.ExtensionBinary.type:type_name -> com.coralogix.extensions.v1.ExtensionBinary.BinaryType
	15, // 26: com.coralogix.extensions.v1.ExtensionBinary.data:type_name -> google.protobuf.StringValue
	15, // 27: com.coralogix.extensions.v1.ChangelogEntry.version:type_name -> google.protobuf.StringValue
	15, // 28: com.coralogix.extensions.v1.ChangelogEntry.description_md:type_name -> google.protobuf.StringValue
	15, // 29: com.coralogix.extensions.v1.Deprecation.reason:type_name -> google.protobuf.StringValue
	15, // 30: com.coralogix.extensions.v1.Deprecation.replacement_extensions:type_name -> google.protobuf.StringValue
	15, // 31: com.coralogix.extensions.v1.ExtensionRevision.version:type_name -> google.protobuf.StringValue
	15, // 32: com.coralogix.extensions.v1.ExtensionRevision.description:type_name -> google.protobuf.StringValue
	15, // 33: com.coralogix.extensions.v1.ExtensionRevision.excerpt:type_name -> google.protobuf.StringValue
	15, // 34: com.coralogix.extensions.v1.ExtensionRevision.labels:type_name -> google.protobuf.StringValue
	7,  // 35: com.coralogix.extensions.v1.ExtensionRevision.integration_details:type_name -> com.coralogix.extensions.v1.IntegrationDetail
	5,  // 36: com.coralogix.extensions.v1.ExtensionRevision.items:type_name -> com.coralogix.extensions.v1.ExtensionItem
	8,  // 37: com.coralogix.extensions.v1.ExtensionRevision.binaries:type_name -> com.coralogix.extensions.v1.ExtensionBinary
	5,  // 38: com.coralogix.extensions.v1.ExtensionRevision.permission_denied_items:type_name -> com.coralogix.extensions.v1.ExtensionItem
	17, // 39: com.coralogix.extensions.v1.ExtensionRevision.is_testing:type_name -> google.protobuf.BoolValue
	15, // 40: com.coralogix.extensions.v1.Extension.id:type_name -> google.protobuf.StringValue
	15, // 41: com.coralogix.extensions.v1.Extension.name:type_name -> google.protobuf.StringValue
	15, // 42: com.coralogix.extensions.v1.Extension.image:type_name -> google.protobuf.StringValue
	15, // 43: com.coralogix.extensions.v1.Extension.dark_mode_image:type_name -> google.protobuf.StringValue
	11, // 44: com.coralogix.extensions.v1.Extension.revisions:type_name -> com.coralogix.extensions.v1.ExtensionRevision
	17, // 45: com.coralogix.extensions.v1.Extension.is_hidden:type_name -> google.protobuf.BoolValue
	15, // 46: com.coralogix.extensions.v1.Extension.keywords:type_name -> google.protobuf.StringValue
	11, // 47: com.coralogix.extensions.v1.Extension.permission_denied_revisions:type_name -> com.coralogix.extensions.v1.ExtensionRevision
	9,  // 48: com.coralogix.extensions.v1.Extension.changelog:type_name -> com.coralogix.extensions.v1.ChangelogEntry
	10, // 49: com.coralogix.extensions.v1.Extension.deprecation:type_name -> com.coralogix.extensions.v1.Deprecation
	15, // 50: com.coralogix.extensions.v1.ExtensionData.id:type_name -> google.protobuf.StringValue
	15, // 51: com.coralogix.extensions.v1.ExtensionData.name:type_name -> google.protobuf.StringValue
	15, // 52: com.coralogix.extensions.v1.ExtensionData.description:type_name -> google.protobuf.StringValue
	15, // 53: com.coralogix.extensions.v1.ExtensionData.excerpt:type_name -> google.protobuf.StringValue
	15, // 54: com.coralogix.extensions.v1.ExtensionData.image:type_name -> google.protobuf.StringValue
	15, // 55: com.coralogix.extensions.v1.ExtensionData.dark_mode_image:type_name -> google.protobuf.StringValue
	15, // 56: com.coralogix.extensions.v1.ExtensionData.labels:type_name -> google.protobuf.StringValue
	15, // 57: com.coralogix.extensions.v1.ExtensionData.version:type_name -> google.protobuf.StringValue
	14, // 58: com.coralogix.extensions.v1.ExtensionData.items:type_name -> com.coralogix.extensions.v1.ExtensionItemData
	7,  // 59: com.coralogix.extensions.v1.ExtensionData.integration_details:type_name -> com.coralogix.extensions.v1.IntegrationDetail
	17, // 60: com.coralogix.extensions.v1.ExtensionData.is_hidden:type_name -> google.protobuf.BoolValue
	8,  // 61: com.coralogix.extensions.v1.ExtensionData.binaries:type_name -> com.coralogix.extensions.v1.ExtensionBinary
	15, // 62: com.coralogix.extensions.v1.ExtensionData.keywords:type_name -> google.protobuf.StringValue
	9,  // 63: com.coralogix.extensions.v1.ExtensionData.changelog:type_name -> com.coralogix.extensions.v1.ChangelogEntry
	10, // 64: com.coralogix.extensions.v1.ExtensionData.deprecation:type_name -> com.coralogix.extensions.v1.Deprecation
	15, // 65: com.coralogix.extensions.v1.ExtensionItemData.name:type_name -> google.protobuf.StringValue
	15, // 66: com.coralogix.extensions.v1.ExtensionItemData.description:type_name -> google.protobuf.StringValue
	0,  // 67: com.coralogix.extensions.v1.ExtensionItemData.target_domain:type_name -> com.coralogix.extensions.v1.TargetDomain
	16, // 68: com.coralogix.extensions.v1.ExtensionItemData.data:type_name -> google.protobuf.Struct
	4,  // 69: com.coralogix.extensions.v1.ExtensionItemData.binaries:type_name -> com.coralogix.extensions.v1.ExtensionItemBinary
	17, // 70: com.coralogix.extensions.v1.ExtensionItemData.is_mandatory:type_name -> google.protobuf.BoolValue
	19, // 71: com.coralogix.extensions.v1.ExtensionItemData.internal_id:type_name -> google.protobuf.Int32Value
	15, // 72: com.coralogix.extensions.v1.ExtensionItemData.unique_id:type_name -> google.protobuf.StringValue
	2,  // 73: com.coralogix.extensions.v1.ExtensionItemData.permission_resource:type_name -> com.coralogix.extensions.v1.ExtensionItem.PermissionResource
	74, // [74:74] is the sub-list for method output_type
	74, // [74:74] is the sub-list for method input_type
	74, // [74:74] is the sub-list for extension type_name
	74, // [74:74] is the sub-list for extension extendee
	0,  // [0:74] is the sub-list for field type_name
}

func init() { file_com_coralogix_extensions_v1_extension_proto_init() }
func file_com_coralogix_extensions_v1_extension_proto_init() {
	if File_com_coralogix_extensions_v1_extension_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_com_coralogix_extensions_v1_extension_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ExtensionItemBinary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_extensions_v1_extension_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ExtensionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_extensions_v1_extension_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ItemCounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_extensions_v1_extension_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*IntegrationDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_extensions_v1_extension_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ExtensionBinary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_extensions_v1_extension_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ChangelogEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_extensions_v1_extension_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Deprecation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_extensions_v1_extension_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ExtensionRevision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_extensions_v1_extension_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Extension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_extensions_v1_extension_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ExtensionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_extensions_v1_extension_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ExtensionItemData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_extensions_v1_extension_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogix_extensions_v1_extension_proto_goTypes,
		DependencyIndexes: file_com_coralogix_extensions_v1_extension_proto_depIdxs,
		EnumInfos:         file_com_coralogix_extensions_v1_extension_proto_enumTypes,
		MessageInfos:      file_com_coralogix_extensions_v1_extension_proto_msgTypes,
	}.Build()
	File_com_coralogix_extensions_v1_extension_proto = out.File
	file_com_coralogix_extensions_v1_extension_proto_rawDesc = nil
	file_com_coralogix_extensions_v1_extension_proto_goTypes = nil
	file_com_coralogix_extensions_v1_extension_proto_depIdxs = nil
}
