// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: proto/com/coralogix/metrics/metrics-configurator.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetricsConfiguratorPublicServiceClient is the client API for MetricsConfiguratorPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsConfiguratorPublicServiceClient interface {
	ConfigureTenant(ctx context.Context, in *ConfigureTenantRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ValidateBucket(ctx context.Context, in *ValidateBucketRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTenantConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTenantConfigResponseV2, error)
}

type metricsConfiguratorPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsConfiguratorPublicServiceClient(cc grpc.ClientConnInterface) MetricsConfiguratorPublicServiceClient {
	return &metricsConfiguratorPublicServiceClient{cc}
}

func (c *metricsConfiguratorPublicServiceClient) ConfigureTenant(ctx context.Context, in *ConfigureTenantRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.coralogix.metrics.metrics_configurator.MetricsConfiguratorPublicService/ConfigureTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsConfiguratorPublicServiceClient) ValidateBucket(ctx context.Context, in *ValidateBucketRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.coralogix.metrics.metrics_configurator.MetricsConfiguratorPublicService/ValidateBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsConfiguratorPublicServiceClient) GetTenantConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTenantConfigResponseV2, error) {
	out := new(GetTenantConfigResponseV2)
	err := c.cc.Invoke(ctx, "/com.coralogix.metrics.metrics_configurator.MetricsConfiguratorPublicService/GetTenantConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsConfiguratorPublicServiceServer is the server API for MetricsConfiguratorPublicService service.
// All implementations must embed UnimplementedMetricsConfiguratorPublicServiceServer
// for forward compatibility
type MetricsConfiguratorPublicServiceServer interface {
	ConfigureTenant(context.Context, *ConfigureTenantRequest) (*emptypb.Empty, error)
	ValidateBucket(context.Context, *ValidateBucketRequest) (*emptypb.Empty, error)
	GetTenantConfig(context.Context, *emptypb.Empty) (*GetTenantConfigResponseV2, error)
	mustEmbedUnimplementedMetricsConfiguratorPublicServiceServer()
}

// UnimplementedMetricsConfiguratorPublicServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsConfiguratorPublicServiceServer struct {
}

func (UnimplementedMetricsConfiguratorPublicServiceServer) ConfigureTenant(context.Context, *ConfigureTenantRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureTenant not implemented")
}
func (UnimplementedMetricsConfiguratorPublicServiceServer) ValidateBucket(context.Context, *ValidateBucketRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateBucket not implemented")
}
func (UnimplementedMetricsConfiguratorPublicServiceServer) GetTenantConfig(context.Context, *emptypb.Empty) (*GetTenantConfigResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantConfig not implemented")
}
func (UnimplementedMetricsConfiguratorPublicServiceServer) mustEmbedUnimplementedMetricsConfiguratorPublicServiceServer() {
}

// UnsafeMetricsConfiguratorPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsConfiguratorPublicServiceServer will
// result in compilation errors.
type UnsafeMetricsConfiguratorPublicServiceServer interface {
	mustEmbedUnimplementedMetricsConfiguratorPublicServiceServer()
}

func RegisterMetricsConfiguratorPublicServiceServer(s grpc.ServiceRegistrar, srv MetricsConfiguratorPublicServiceServer) {
	s.RegisterService(&MetricsConfiguratorPublicService_ServiceDesc, srv)
}

func _MetricsConfiguratorPublicService_ConfigureTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsConfiguratorPublicServiceServer).ConfigureTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.metrics.metrics_configurator.MetricsConfiguratorPublicService/ConfigureTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsConfiguratorPublicServiceServer).ConfigureTenant(ctx, req.(*ConfigureTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsConfiguratorPublicService_ValidateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsConfiguratorPublicServiceServer).ValidateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.metrics.metrics_configurator.MetricsConfiguratorPublicService/ValidateBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsConfiguratorPublicServiceServer).ValidateBucket(ctx, req.(*ValidateBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsConfiguratorPublicService_GetTenantConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsConfiguratorPublicServiceServer).GetTenantConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.metrics.metrics_configurator.MetricsConfiguratorPublicService/GetTenantConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsConfiguratorPublicServiceServer).GetTenantConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsConfiguratorPublicService_ServiceDesc is the grpc.ServiceDesc for MetricsConfiguratorPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsConfiguratorPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.metrics.metrics_configurator.MetricsConfiguratorPublicService",
	HandlerType: (*MetricsConfiguratorPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigureTenant",
			Handler:    _MetricsConfiguratorPublicService_ConfigureTenant_Handler,
		},
		{
			MethodName: "ValidateBucket",
			Handler:    _MetricsConfiguratorPublicService_ValidateBucket_Handler,
		},
		{
			MethodName: "GetTenantConfig",
			Handler:    _MetricsConfiguratorPublicService_GetTenantConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/com/coralogix/metrics/metrics-configurator.proto",
}

// MetricsConfiguratorServiceClient is the client API for MetricsConfiguratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsConfiguratorServiceClient interface {
	GetTenantConfig(ctx context.Context, in *GetTenantConfigRequest, opts ...grpc.CallOption) (*GetTenantConfigResponse, error)
	ListTenantConfigs(ctx context.Context, in *ListTenantConfigsRequest, opts ...grpc.CallOption) (*ListTenantConfigsResponse, error)
	ListHostStoreConfigs(ctx context.Context, in *ListHotStoreConfigsRequest, opts ...grpc.CallOption) (*ListHotStoreConfigsResponse, error)
}

type metricsConfiguratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsConfiguratorServiceClient(cc grpc.ClientConnInterface) MetricsConfiguratorServiceClient {
	return &metricsConfiguratorServiceClient{cc}
}

func (c *metricsConfiguratorServiceClient) GetTenantConfig(ctx context.Context, in *GetTenantConfigRequest, opts ...grpc.CallOption) (*GetTenantConfigResponse, error) {
	out := new(GetTenantConfigResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.metrics.metrics_configurator.MetricsConfiguratorService/GetTenantConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsConfiguratorServiceClient) ListTenantConfigs(ctx context.Context, in *ListTenantConfigsRequest, opts ...grpc.CallOption) (*ListTenantConfigsResponse, error) {
	out := new(ListTenantConfigsResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.metrics.metrics_configurator.MetricsConfiguratorService/ListTenantConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsConfiguratorServiceClient) ListHostStoreConfigs(ctx context.Context, in *ListHotStoreConfigsRequest, opts ...grpc.CallOption) (*ListHotStoreConfigsResponse, error) {
	out := new(ListHotStoreConfigsResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.metrics.metrics_configurator.MetricsConfiguratorService/ListHostStoreConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsConfiguratorServiceServer is the server API for MetricsConfiguratorService service.
// All implementations must embed UnimplementedMetricsConfiguratorServiceServer
// for forward compatibility
type MetricsConfiguratorServiceServer interface {
	GetTenantConfig(context.Context, *GetTenantConfigRequest) (*GetTenantConfigResponse, error)
	ListTenantConfigs(context.Context, *ListTenantConfigsRequest) (*ListTenantConfigsResponse, error)
	ListHostStoreConfigs(context.Context, *ListHotStoreConfigsRequest) (*ListHotStoreConfigsResponse, error)
	mustEmbedUnimplementedMetricsConfiguratorServiceServer()
}

// UnimplementedMetricsConfiguratorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsConfiguratorServiceServer struct {
}

func (UnimplementedMetricsConfiguratorServiceServer) GetTenantConfig(context.Context, *GetTenantConfigRequest) (*GetTenantConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantConfig not implemented")
}
func (UnimplementedMetricsConfiguratorServiceServer) ListTenantConfigs(context.Context, *ListTenantConfigsRequest) (*ListTenantConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTenantConfigs not implemented")
}
func (UnimplementedMetricsConfiguratorServiceServer) ListHostStoreConfigs(context.Context, *ListHotStoreConfigsRequest) (*ListHotStoreConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHostStoreConfigs not implemented")
}
func (UnimplementedMetricsConfiguratorServiceServer) mustEmbedUnimplementedMetricsConfiguratorServiceServer() {
}

// UnsafeMetricsConfiguratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsConfiguratorServiceServer will
// result in compilation errors.
type UnsafeMetricsConfiguratorServiceServer interface {
	mustEmbedUnimplementedMetricsConfiguratorServiceServer()
}

func RegisterMetricsConfiguratorServiceServer(s grpc.ServiceRegistrar, srv MetricsConfiguratorServiceServer) {
	s.RegisterService(&MetricsConfiguratorService_ServiceDesc, srv)
}

func _MetricsConfiguratorService_GetTenantConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsConfiguratorServiceServer).GetTenantConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.metrics.metrics_configurator.MetricsConfiguratorService/GetTenantConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsConfiguratorServiceServer).GetTenantConfig(ctx, req.(*GetTenantConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsConfiguratorService_ListTenantConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTenantConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsConfiguratorServiceServer).ListTenantConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.metrics.metrics_configurator.MetricsConfiguratorService/ListTenantConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsConfiguratorServiceServer).ListTenantConfigs(ctx, req.(*ListTenantConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsConfiguratorService_ListHostStoreConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHotStoreConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsConfiguratorServiceServer).ListHostStoreConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.metrics.metrics_configurator.MetricsConfiguratorService/ListHostStoreConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsConfiguratorServiceServer).ListHostStoreConfigs(ctx, req.(*ListHotStoreConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsConfiguratorService_ServiceDesc is the grpc.ServiceDesc for MetricsConfiguratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsConfiguratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.metrics.metrics_configurator.MetricsConfiguratorService",
	HandlerType: (*MetricsConfiguratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTenantConfig",
			Handler:    _MetricsConfiguratorService_GetTenantConfig_Handler,
		},
		{
			MethodName: "ListTenantConfigs",
			Handler:    _MetricsConfiguratorService_ListTenantConfigs_Handler,
		},
		{
			MethodName: "ListHostStoreConfigs",
			Handler:    _MetricsConfiguratorService_ListHostStoreConfigs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/com/coralogix/metrics/metrics-configurator.proto",
}
