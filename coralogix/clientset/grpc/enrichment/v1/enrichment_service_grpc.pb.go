// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: com/coralogix/enrichment/v1/enrichment_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EnrichmentService_GetEnrichments_FullMethodName               = "/com.coralogix.enrichment.v1.EnrichmentService/GetEnrichments"
	EnrichmentService_AddEnrichments_FullMethodName               = "/com.coralogix.enrichment.v1.EnrichmentService/AddEnrichments"
	EnrichmentService_RemoveEnrichments_FullMethodName            = "/com.coralogix.enrichment.v1.EnrichmentService/RemoveEnrichments"
	EnrichmentService_GetEnrichmentLimit_FullMethodName           = "/com.coralogix.enrichment.v1.EnrichmentService/GetEnrichmentLimit"
	EnrichmentService_AtomicOverwriteEnrichments_FullMethodName   = "/com.coralogix.enrichment.v1.EnrichmentService/AtomicOverwriteEnrichments"
	EnrichmentService_GetCompanyEnrichmentSettings_FullMethodName = "/com.coralogix.enrichment.v1.EnrichmentService/GetCompanyEnrichmentSettings"
)

// EnrichmentServiceClient is the client API for EnrichmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnrichmentServiceClient interface {
	GetEnrichments(ctx context.Context, in *GetEnrichmentsRequest, opts ...grpc.CallOption) (*GetEnrichmentsResponse, error)
	AddEnrichments(ctx context.Context, in *AddEnrichmentsRequest, opts ...grpc.CallOption) (*AddEnrichmentsResponse, error)
	RemoveEnrichments(ctx context.Context, in *RemoveEnrichmentsRequest, opts ...grpc.CallOption) (*RemoveEnrichmentsResponse, error)
	GetEnrichmentLimit(ctx context.Context, in *GetEnrichmentLimitRequest, opts ...grpc.CallOption) (*GetEnrichmentLimitResponse, error)
	AtomicOverwriteEnrichments(ctx context.Context, in *AtomicOverwriteEnrichmentsRequest, opts ...grpc.CallOption) (*AtomicOverwriteEnrichmentsResponse, error)
	GetCompanyEnrichmentSettings(ctx context.Context, in *GetCompanyEnrichmentSettingsRequest, opts ...grpc.CallOption) (*GetCompanyEnrichmentSettingsResponse, error)
}

type enrichmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnrichmentServiceClient(cc grpc.ClientConnInterface) EnrichmentServiceClient {
	return &enrichmentServiceClient{cc}
}

func (c *enrichmentServiceClient) GetEnrichments(ctx context.Context, in *GetEnrichmentsRequest, opts ...grpc.CallOption) (*GetEnrichmentsResponse, error) {
	out := new(GetEnrichmentsResponse)
	err := c.cc.Invoke(ctx, EnrichmentService_GetEnrichments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrichmentServiceClient) AddEnrichments(ctx context.Context, in *AddEnrichmentsRequest, opts ...grpc.CallOption) (*AddEnrichmentsResponse, error) {
	out := new(AddEnrichmentsResponse)
	err := c.cc.Invoke(ctx, EnrichmentService_AddEnrichments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrichmentServiceClient) RemoveEnrichments(ctx context.Context, in *RemoveEnrichmentsRequest, opts ...grpc.CallOption) (*RemoveEnrichmentsResponse, error) {
	out := new(RemoveEnrichmentsResponse)
	err := c.cc.Invoke(ctx, EnrichmentService_RemoveEnrichments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrichmentServiceClient) GetEnrichmentLimit(ctx context.Context, in *GetEnrichmentLimitRequest, opts ...grpc.CallOption) (*GetEnrichmentLimitResponse, error) {
	out := new(GetEnrichmentLimitResponse)
	err := c.cc.Invoke(ctx, EnrichmentService_GetEnrichmentLimit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrichmentServiceClient) AtomicOverwriteEnrichments(ctx context.Context, in *AtomicOverwriteEnrichmentsRequest, opts ...grpc.CallOption) (*AtomicOverwriteEnrichmentsResponse, error) {
	out := new(AtomicOverwriteEnrichmentsResponse)
	err := c.cc.Invoke(ctx, EnrichmentService_AtomicOverwriteEnrichments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrichmentServiceClient) GetCompanyEnrichmentSettings(ctx context.Context, in *GetCompanyEnrichmentSettingsRequest, opts ...grpc.CallOption) (*GetCompanyEnrichmentSettingsResponse, error) {
	out := new(GetCompanyEnrichmentSettingsResponse)
	err := c.cc.Invoke(ctx, EnrichmentService_GetCompanyEnrichmentSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnrichmentServiceServer is the server API for EnrichmentService service.
// All implementations must embed UnimplementedEnrichmentServiceServer
// for forward compatibility
type EnrichmentServiceServer interface {
	GetEnrichments(context.Context, *GetEnrichmentsRequest) (*GetEnrichmentsResponse, error)
	AddEnrichments(context.Context, *AddEnrichmentsRequest) (*AddEnrichmentsResponse, error)
	RemoveEnrichments(context.Context, *RemoveEnrichmentsRequest) (*RemoveEnrichmentsResponse, error)
	GetEnrichmentLimit(context.Context, *GetEnrichmentLimitRequest) (*GetEnrichmentLimitResponse, error)
	AtomicOverwriteEnrichments(context.Context, *AtomicOverwriteEnrichmentsRequest) (*AtomicOverwriteEnrichmentsResponse, error)
	GetCompanyEnrichmentSettings(context.Context, *GetCompanyEnrichmentSettingsRequest) (*GetCompanyEnrichmentSettingsResponse, error)
	mustEmbedUnimplementedEnrichmentServiceServer()
}

// UnimplementedEnrichmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEnrichmentServiceServer struct {
}

func (UnimplementedEnrichmentServiceServer) GetEnrichments(context.Context, *GetEnrichmentsRequest) (*GetEnrichmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnrichments not implemented")
}
func (UnimplementedEnrichmentServiceServer) AddEnrichments(context.Context, *AddEnrichmentsRequest) (*AddEnrichmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEnrichments not implemented")
}
func (UnimplementedEnrichmentServiceServer) RemoveEnrichments(context.Context, *RemoveEnrichmentsRequest) (*RemoveEnrichmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEnrichments not implemented")
}
func (UnimplementedEnrichmentServiceServer) GetEnrichmentLimit(context.Context, *GetEnrichmentLimitRequest) (*GetEnrichmentLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnrichmentLimit not implemented")
}
func (UnimplementedEnrichmentServiceServer) AtomicOverwriteEnrichments(context.Context, *AtomicOverwriteEnrichmentsRequest) (*AtomicOverwriteEnrichmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AtomicOverwriteEnrichments not implemented")
}
func (UnimplementedEnrichmentServiceServer) GetCompanyEnrichmentSettings(context.Context, *GetCompanyEnrichmentSettingsRequest) (*GetCompanyEnrichmentSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyEnrichmentSettings not implemented")
}
func (UnimplementedEnrichmentServiceServer) mustEmbedUnimplementedEnrichmentServiceServer() {}

// UnsafeEnrichmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnrichmentServiceServer will
// result in compilation errors.
type UnsafeEnrichmentServiceServer interface {
	mustEmbedUnimplementedEnrichmentServiceServer()
}

func RegisterEnrichmentServiceServer(s grpc.ServiceRegistrar, srv EnrichmentServiceServer) {
	s.RegisterService(&EnrichmentService_ServiceDesc, srv)
}

func _EnrichmentService_GetEnrichments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnrichmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrichmentServiceServer).GetEnrichments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrichmentService_GetEnrichments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrichmentServiceServer).GetEnrichments(ctx, req.(*GetEnrichmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrichmentService_AddEnrichments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEnrichmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrichmentServiceServer).AddEnrichments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrichmentService_AddEnrichments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrichmentServiceServer).AddEnrichments(ctx, req.(*AddEnrichmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrichmentService_RemoveEnrichments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveEnrichmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrichmentServiceServer).RemoveEnrichments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrichmentService_RemoveEnrichments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrichmentServiceServer).RemoveEnrichments(ctx, req.(*RemoveEnrichmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrichmentService_GetEnrichmentLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnrichmentLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrichmentServiceServer).GetEnrichmentLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrichmentService_GetEnrichmentLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrichmentServiceServer).GetEnrichmentLimit(ctx, req.(*GetEnrichmentLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrichmentService_AtomicOverwriteEnrichments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AtomicOverwriteEnrichmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrichmentServiceServer).AtomicOverwriteEnrichments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrichmentService_AtomicOverwriteEnrichments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrichmentServiceServer).AtomicOverwriteEnrichments(ctx, req.(*AtomicOverwriteEnrichmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrichmentService_GetCompanyEnrichmentSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyEnrichmentSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrichmentServiceServer).GetCompanyEnrichmentSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrichmentService_GetCompanyEnrichmentSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrichmentServiceServer).GetCompanyEnrichmentSettings(ctx, req.(*GetCompanyEnrichmentSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnrichmentService_ServiceDesc is the grpc.ServiceDesc for EnrichmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnrichmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.enrichment.v1.EnrichmentService",
	HandlerType: (*EnrichmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEnrichments",
			Handler:    _EnrichmentService_GetEnrichments_Handler,
		},
		{
			MethodName: "AddEnrichments",
			Handler:    _EnrichmentService_AddEnrichments_Handler,
		},
		{
			MethodName: "RemoveEnrichments",
			Handler:    _EnrichmentService_RemoveEnrichments_Handler,
		},
		{
			MethodName: "GetEnrichmentLimit",
			Handler:    _EnrichmentService_GetEnrichmentLimit_Handler,
		},
		{
			MethodName: "AtomicOverwriteEnrichments",
			Handler:    _EnrichmentService_AtomicOverwriteEnrichments_Handler,
		},
		{
			MethodName: "GetCompanyEnrichmentSettings",
			Handler:    _EnrichmentService_GetCompanyEnrichmentSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/enrichment/v1/enrichment_service.proto",
}
