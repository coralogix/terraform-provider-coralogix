// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: com/coralogix/enrichment/v1/enrichment_internal_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EnrichmentInternalService_GetInternalEnrichments_FullMethodName    = "/com.coralogix.enrichment.v1.EnrichmentInternalService/GetInternalEnrichments"
	EnrichmentInternalService_AddInternalEnrichments_FullMethodName    = "/com.coralogix.enrichment.v1.EnrichmentInternalService/AddInternalEnrichments"
	EnrichmentInternalService_RemoveInternalEnrichments_FullMethodName = "/com.coralogix.enrichment.v1.EnrichmentInternalService/RemoveInternalEnrichments"
)

// EnrichmentInternalServiceClient is the client API for EnrichmentInternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnrichmentInternalServiceClient interface {
	GetInternalEnrichments(ctx context.Context, in *GetInternalEnrichmentsRequest, opts ...grpc.CallOption) (*GetInternalEnrichmentsResponse, error)
	AddInternalEnrichments(ctx context.Context, in *AddInternalEnrichmentsRequest, opts ...grpc.CallOption) (*AddInternalEnrichmentsResponse, error)
	RemoveInternalEnrichments(ctx context.Context, in *RemoveInternalEnrichmentsRequest, opts ...grpc.CallOption) (*RemoveInternalEnrichmentsResponse, error)
}

type enrichmentInternalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnrichmentInternalServiceClient(cc grpc.ClientConnInterface) EnrichmentInternalServiceClient {
	return &enrichmentInternalServiceClient{cc}
}

func (c *enrichmentInternalServiceClient) GetInternalEnrichments(ctx context.Context, in *GetInternalEnrichmentsRequest, opts ...grpc.CallOption) (*GetInternalEnrichmentsResponse, error) {
	out := new(GetInternalEnrichmentsResponse)
	err := c.cc.Invoke(ctx, EnrichmentInternalService_GetInternalEnrichments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrichmentInternalServiceClient) AddInternalEnrichments(ctx context.Context, in *AddInternalEnrichmentsRequest, opts ...grpc.CallOption) (*AddInternalEnrichmentsResponse, error) {
	out := new(AddInternalEnrichmentsResponse)
	err := c.cc.Invoke(ctx, EnrichmentInternalService_AddInternalEnrichments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrichmentInternalServiceClient) RemoveInternalEnrichments(ctx context.Context, in *RemoveInternalEnrichmentsRequest, opts ...grpc.CallOption) (*RemoveInternalEnrichmentsResponse, error) {
	out := new(RemoveInternalEnrichmentsResponse)
	err := c.cc.Invoke(ctx, EnrichmentInternalService_RemoveInternalEnrichments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnrichmentInternalServiceServer is the server API for EnrichmentInternalService service.
// All implementations must embed UnimplementedEnrichmentInternalServiceServer
// for forward compatibility
type EnrichmentInternalServiceServer interface {
	GetInternalEnrichments(context.Context, *GetInternalEnrichmentsRequest) (*GetInternalEnrichmentsResponse, error)
	AddInternalEnrichments(context.Context, *AddInternalEnrichmentsRequest) (*AddInternalEnrichmentsResponse, error)
	RemoveInternalEnrichments(context.Context, *RemoveInternalEnrichmentsRequest) (*RemoveInternalEnrichmentsResponse, error)
	mustEmbedUnimplementedEnrichmentInternalServiceServer()
}

// UnimplementedEnrichmentInternalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEnrichmentInternalServiceServer struct {
}

func (UnimplementedEnrichmentInternalServiceServer) GetInternalEnrichments(context.Context, *GetInternalEnrichmentsRequest) (*GetInternalEnrichmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInternalEnrichments not implemented")
}
func (UnimplementedEnrichmentInternalServiceServer) AddInternalEnrichments(context.Context, *AddInternalEnrichmentsRequest) (*AddInternalEnrichmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInternalEnrichments not implemented")
}
func (UnimplementedEnrichmentInternalServiceServer) RemoveInternalEnrichments(context.Context, *RemoveInternalEnrichmentsRequest) (*RemoveInternalEnrichmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveInternalEnrichments not implemented")
}
func (UnimplementedEnrichmentInternalServiceServer) mustEmbedUnimplementedEnrichmentInternalServiceServer() {
}

// UnsafeEnrichmentInternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnrichmentInternalServiceServer will
// result in compilation errors.
type UnsafeEnrichmentInternalServiceServer interface {
	mustEmbedUnimplementedEnrichmentInternalServiceServer()
}

func RegisterEnrichmentInternalServiceServer(s grpc.ServiceRegistrar, srv EnrichmentInternalServiceServer) {
	s.RegisterService(&EnrichmentInternalService_ServiceDesc, srv)
}

func _EnrichmentInternalService_GetInternalEnrichments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInternalEnrichmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrichmentInternalServiceServer).GetInternalEnrichments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrichmentInternalService_GetInternalEnrichments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrichmentInternalServiceServer).GetInternalEnrichments(ctx, req.(*GetInternalEnrichmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrichmentInternalService_AddInternalEnrichments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInternalEnrichmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrichmentInternalServiceServer).AddInternalEnrichments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrichmentInternalService_AddInternalEnrichments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrichmentInternalServiceServer).AddInternalEnrichments(ctx, req.(*AddInternalEnrichmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrichmentInternalService_RemoveInternalEnrichments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveInternalEnrichmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrichmentInternalServiceServer).RemoveInternalEnrichments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrichmentInternalService_RemoveInternalEnrichments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrichmentInternalServiceServer).RemoveInternalEnrichments(ctx, req.(*RemoveInternalEnrichmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnrichmentInternalService_ServiceDesc is the grpc.ServiceDesc for EnrichmentInternalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnrichmentInternalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.enrichment.v1.EnrichmentInternalService",
	HandlerType: (*EnrichmentInternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInternalEnrichments",
			Handler:    _EnrichmentInternalService_GetInternalEnrichments_Handler,
		},
		{
			MethodName: "AddInternalEnrichments",
			Handler:    _EnrichmentInternalService_AddInternalEnrichments_Handler,
		},
		{
			MethodName: "RemoveInternalEnrichments",
			Handler:    _EnrichmentInternalService_RemoveInternalEnrichments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/enrichment/v1/enrichment_internal_service.proto",
}
