// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: com/coralogix/catalog/v1/sli.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ThresholdSymbolType int32

const (
	ThresholdSymbolType_THRESHOLD_SYMBOL_TYPE_UNSPECIFIED      ThresholdSymbolType = 0
	ThresholdSymbolType_THRESHOLD_SYMBOL_TYPE_GREATER          ThresholdSymbolType = 1
	ThresholdSymbolType_THRESHOLD_SYMBOL_TYPE_GREATER_OR_EQUAL ThresholdSymbolType = 2
	ThresholdSymbolType_THRESHOLD_SYMBOL_TYPE_LESS             ThresholdSymbolType = 3
	ThresholdSymbolType_THRESHOLD_SYMBOL_TYPE_LESS_OR_EQUAL    ThresholdSymbolType = 4
	ThresholdSymbolType_THRESHOLD_SYMBOL_TYPE_EQUAL            ThresholdSymbolType = 5
	ThresholdSymbolType_THRESHOLD_SYMBOL_TYPE_NOT_EQUAL        ThresholdSymbolType = 6
)

// Enum value maps for ThresholdSymbolType.
var (
	ThresholdSymbolType_name = map[int32]string{
		0: "THRESHOLD_SYMBOL_TYPE_UNSPECIFIED",
		1: "THRESHOLD_SYMBOL_TYPE_GREATER",
		2: "THRESHOLD_SYMBOL_TYPE_GREATER_OR_EQUAL",
		3: "THRESHOLD_SYMBOL_TYPE_LESS",
		4: "THRESHOLD_SYMBOL_TYPE_LESS_OR_EQUAL",
		5: "THRESHOLD_SYMBOL_TYPE_EQUAL",
		6: "THRESHOLD_SYMBOL_TYPE_NOT_EQUAL",
	}
	ThresholdSymbolType_value = map[string]int32{
		"THRESHOLD_SYMBOL_TYPE_UNSPECIFIED":      0,
		"THRESHOLD_SYMBOL_TYPE_GREATER":          1,
		"THRESHOLD_SYMBOL_TYPE_GREATER_OR_EQUAL": 2,
		"THRESHOLD_SYMBOL_TYPE_LESS":             3,
		"THRESHOLD_SYMBOL_TYPE_LESS_OR_EQUAL":    4,
		"THRESHOLD_SYMBOL_TYPE_EQUAL":            5,
		"THRESHOLD_SYMBOL_TYPE_NOT_EQUAL":        6,
	}
)

func (x ThresholdSymbolType) Enum() *ThresholdSymbolType {
	p := new(ThresholdSymbolType)
	*p = x
	return p
}

func (x ThresholdSymbolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThresholdSymbolType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_catalog_v1_sli_proto_enumTypes[0].Descriptor()
}

func (ThresholdSymbolType) Type() protoreflect.EnumType {
	return &file_com_coralogix_catalog_v1_sli_proto_enumTypes[0]
}

func (x ThresholdSymbolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThresholdSymbolType.Descriptor instead.
func (ThresholdSymbolType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_sli_proto_rawDescGZIP(), []int{0}
}

type SloPeriodType int32

const (
	SloPeriodType_SLO_PERIOD_TYPE_UNSPECIFIED SloPeriodType = 0
	SloPeriodType_SLO_PERIOD_TYPE_7_DAYS      SloPeriodType = 1
	SloPeriodType_SLO_PERIOD_TYPE_14_DAYS     SloPeriodType = 2
	SloPeriodType_SLO_PERIOD_TYPE_30_DAYS     SloPeriodType = 3
)

// Enum value maps for SloPeriodType.
var (
	SloPeriodType_name = map[int32]string{
		0: "SLO_PERIOD_TYPE_UNSPECIFIED",
		1: "SLO_PERIOD_TYPE_7_DAYS",
		2: "SLO_PERIOD_TYPE_14_DAYS",
		3: "SLO_PERIOD_TYPE_30_DAYS",
	}
	SloPeriodType_value = map[string]int32{
		"SLO_PERIOD_TYPE_UNSPECIFIED": 0,
		"SLO_PERIOD_TYPE_7_DAYS":      1,
		"SLO_PERIOD_TYPE_14_DAYS":     2,
		"SLO_PERIOD_TYPE_30_DAYS":     3,
	}
)

func (x SloPeriodType) Enum() *SloPeriodType {
	p := new(SloPeriodType)
	*p = x
	return p
}

func (x SloPeriodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SloPeriodType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_catalog_v1_sli_proto_enumTypes[1].Descriptor()
}

func (SloPeriodType) Type() protoreflect.EnumType {
	return &file_com_coralogix_catalog_v1_sli_proto_enumTypes[1]
}

func (x SloPeriodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SloPeriodType.Descriptor instead.
func (SloPeriodType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_sli_proto_rawDescGZIP(), []int{1}
}

type MetricType int32

const (
	MetricType_METRIC_TYPE_UNSPECIFIED MetricType = 0
	MetricType_METRIC_TYPE_ERROR       MetricType = 1
	MetricType_METRIC_TYPE_LATENCY     MetricType = 2
	MetricType_METRIC_TYPE_CUSTOM      MetricType = 3
)

// Enum value maps for MetricType.
var (
	MetricType_name = map[int32]string{
		0: "METRIC_TYPE_UNSPECIFIED",
		1: "METRIC_TYPE_ERROR",
		2: "METRIC_TYPE_LATENCY",
		3: "METRIC_TYPE_CUSTOM",
	}
	MetricType_value = map[string]int32{
		"METRIC_TYPE_UNSPECIFIED": 0,
		"METRIC_TYPE_ERROR":       1,
		"METRIC_TYPE_LATENCY":     2,
		"METRIC_TYPE_CUSTOM":      3,
	}
)

func (x MetricType) Enum() *MetricType {
	p := new(MetricType)
	*p = x
	return p
}

func (x MetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_catalog_v1_sli_proto_enumTypes[2].Descriptor()
}

func (MetricType) Type() protoreflect.EnumType {
	return &file_com_coralogix_catalog_v1_sli_proto_enumTypes[2]
}

func (x MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricType.Descriptor instead.
func (MetricType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_sli_proto_rawDescGZIP(), []int{2}
}

type CompareType int32

const (
	CompareType_COMPARE_TYPE_UNSPECIFIED CompareType = 0
	CompareType_COMPARE_TYPE_IS          CompareType = 1
	CompareType_COMPARE_TYPE_START_WITH  CompareType = 2
	CompareType_COMPARE_TYPE_ENDS_WITH   CompareType = 3
	CompareType_COMPARE_TYPE_INCLUDES    CompareType = 4
)

// Enum value maps for CompareType.
var (
	CompareType_name = map[int32]string{
		0: "COMPARE_TYPE_UNSPECIFIED",
		1: "COMPARE_TYPE_IS",
		2: "COMPARE_TYPE_START_WITH",
		3: "COMPARE_TYPE_ENDS_WITH",
		4: "COMPARE_TYPE_INCLUDES",
	}
	CompareType_value = map[string]int32{
		"COMPARE_TYPE_UNSPECIFIED": 0,
		"COMPARE_TYPE_IS":          1,
		"COMPARE_TYPE_START_WITH":  2,
		"COMPARE_TYPE_ENDS_WITH":   3,
		"COMPARE_TYPE_INCLUDES":    4,
	}
)

func (x CompareType) Enum() *CompareType {
	p := new(CompareType)
	*p = x
	return p
}

func (x CompareType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompareType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_catalog_v1_sli_proto_enumTypes[3].Descriptor()
}

func (CompareType) Type() protoreflect.EnumType {
	return &file_com_coralogix_catalog_v1_sli_proto_enumTypes[3]
}

func (x CompareType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompareType.Descriptor instead.
func (CompareType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_sli_proto_rawDescGZIP(), []int{3}
}

type MetadataFilterFieldType int32

const (
	MetadataFilterFieldType_METADATA_FILTER_FIELD_TYPE_UNSPECIFIED MetadataFilterFieldType = 0
	MetadataFilterFieldType_METADATA_FILTER_FIELD_TYPE_OPERATION   MetadataFilterFieldType = 1
	MetadataFilterFieldType_METADATA_FILTER_FIELD_TYPE_APPLICATION MetadataFilterFieldType = 2
	MetadataFilterFieldType_METADATA_FILTER_FIELD_TYPE_SUBSYSTEM   MetadataFilterFieldType = 3
)

// Enum value maps for MetadataFilterFieldType.
var (
	MetadataFilterFieldType_name = map[int32]string{
		0: "METADATA_FILTER_FIELD_TYPE_UNSPECIFIED",
		1: "METADATA_FILTER_FIELD_TYPE_OPERATION",
		2: "METADATA_FILTER_FIELD_TYPE_APPLICATION",
		3: "METADATA_FILTER_FIELD_TYPE_SUBSYSTEM",
	}
	MetadataFilterFieldType_value = map[string]int32{
		"METADATA_FILTER_FIELD_TYPE_UNSPECIFIED": 0,
		"METADATA_FILTER_FIELD_TYPE_OPERATION":   1,
		"METADATA_FILTER_FIELD_TYPE_APPLICATION": 2,
		"METADATA_FILTER_FIELD_TYPE_SUBSYSTEM":   3,
	}
)

func (x MetadataFilterFieldType) Enum() *MetadataFilterFieldType {
	p := new(MetadataFilterFieldType)
	*p = x
	return p
}

func (x MetadataFilterFieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetadataFilterFieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_catalog_v1_sli_proto_enumTypes[4].Descriptor()
}

func (MetadataFilterFieldType) Type() protoreflect.EnumType {
	return &file_com_coralogix_catalog_v1_sli_proto_enumTypes[4]
}

func (x MetadataFilterFieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetadataFilterFieldType.Descriptor instead.
func (MetadataFilterFieldType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_sli_proto_rawDescGZIP(), []int{4}
}

type SloStatusType int32

const (
	SloStatusType_SLO_STATUS_TYPE_UNSPECIFIED SloStatusType = 0
	SloStatusType_SLO_STATUS_TYPE_OK          SloStatusType = 1
	SloStatusType_SLO_STATUS_TYPE_BREACHED    SloStatusType = 2
)

// Enum value maps for SloStatusType.
var (
	SloStatusType_name = map[int32]string{
		0: "SLO_STATUS_TYPE_UNSPECIFIED",
		1: "SLO_STATUS_TYPE_OK",
		2: "SLO_STATUS_TYPE_BREACHED",
	}
	SloStatusType_value = map[string]int32{
		"SLO_STATUS_TYPE_UNSPECIFIED": 0,
		"SLO_STATUS_TYPE_OK":          1,
		"SLO_STATUS_TYPE_BREACHED":    2,
	}
)

func (x SloStatusType) Enum() *SloStatusType {
	p := new(SloStatusType)
	*p = x
	return p
}

func (x SloStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SloStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_catalog_v1_sli_proto_enumTypes[5].Descriptor()
}

func (SloStatusType) Type() protoreflect.EnumType {
	return &file_com_coralogix_catalog_v1_sli_proto_enumTypes[5]
}

func (x SloStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SloStatusType.Descriptor instead.
func (SloStatusType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_sli_proto_rawDescGZIP(), []int{5}
}

type TimeUnitType int32

const (
	TimeUnitType_TIME_UNIT_TYPE_UNSPECIFIED TimeUnitType = 0
	TimeUnitType_TIME_UNIT_TYPE_MICROSECOND TimeUnitType = 1
	TimeUnitType_TIME_UNIT_TYPE_MILLISECOND TimeUnitType = 2
	TimeUnitType_TIME_UNIT_TYPE_SECOND      TimeUnitType = 3
	TimeUnitType_TIME_UNIT_TYPE_MINUTE      TimeUnitType = 4
)

// Enum value maps for TimeUnitType.
var (
	TimeUnitType_name = map[int32]string{
		0: "TIME_UNIT_TYPE_UNSPECIFIED",
		1: "TIME_UNIT_TYPE_MICROSECOND",
		2: "TIME_UNIT_TYPE_MILLISECOND",
		3: "TIME_UNIT_TYPE_SECOND",
		4: "TIME_UNIT_TYPE_MINUTE",
	}
	TimeUnitType_value = map[string]int32{
		"TIME_UNIT_TYPE_UNSPECIFIED": 0,
		"TIME_UNIT_TYPE_MICROSECOND": 1,
		"TIME_UNIT_TYPE_MILLISECOND": 2,
		"TIME_UNIT_TYPE_SECOND":      3,
		"TIME_UNIT_TYPE_MINUTE":      4,
	}
)

func (x TimeUnitType) Enum() *TimeUnitType {
	p := new(TimeUnitType)
	*p = x
	return p
}

func (x TimeUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_catalog_v1_sli_proto_enumTypes[6].Descriptor()
}

func (TimeUnitType) Type() protoreflect.EnumType {
	return &file_com_coralogix_catalog_v1_sli_proto_enumTypes[6]
}

func (x TimeUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeUnitType.Descriptor instead.
func (TimeUnitType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_sli_proto_rawDescGZIP(), []int{6}
}

type Sli struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SliId               *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=sli_id,json=sliId,proto3" json:"sli_id,omitempty"`
	SliName             *wrapperspb.StringValue   `protobuf:"bytes,2,opt,name=sli_name,json=sliName,proto3" json:"sli_name,omitempty"`
	ServiceName         *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	MetricName          *wrapperspb.StringValue   `protobuf:"bytes,4,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	SliDescription      *wrapperspb.StringValue   `protobuf:"bytes,5,opt,name=sli_description,json=sliDescription,proto3" json:"sli_description,omitempty"`
	MetricType          MetricType                `protobuf:"varint,6,opt,name=metric_type,json=metricType,proto3,enum=com.coralogix.catalog.v1.MetricType" json:"metric_type,omitempty"`
	SloPercentage       *wrapperspb.Int64Value    `protobuf:"bytes,7,opt,name=slo_percentage,json=sloPercentage,proto3" json:"slo_percentage,omitempty"`
	SloPeriodType       SloPeriodType             `protobuf:"varint,8,opt,name=slo_period_type,json=sloPeriodType,proto3,enum=com.coralogix.catalog.v1.SloPeriodType" json:"slo_period_type,omitempty"`
	ThresholdSymbolType ThresholdSymbolType       `protobuf:"varint,9,opt,name=threshold_symbol_type,json=thresholdSymbolType,proto3,enum=com.coralogix.catalog.v1.ThresholdSymbolType" json:"threshold_symbol_type,omitempty"`
	ThresholdValue      *wrapperspb.Int64Value    `protobuf:"bytes,10,opt,name=threshold_value,json=thresholdValue,proto3" json:"threshold_value,omitempty"`
	Filters             []*SliFilter              `protobuf:"bytes,11,rep,name=filters,proto3" json:"filters,omitempty"`
	SloStatusType       SloStatusType             `protobuf:"varint,12,opt,name=slo_status_type,json=sloStatusType,proto3,enum=com.coralogix.catalog.v1.SloStatusType" json:"slo_status_type,omitempty"`
	ErrorBudget         *wrapperspb.Int64Value    `protobuf:"bytes,13,opt,name=error_budget,json=errorBudget,proto3" json:"error_budget,omitempty"`
	CreatedAt           *wrapperspb.Int64Value    `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	LabelE2MId          *wrapperspb.StringValue   `protobuf:"bytes,15,opt,name=label_e2m_id,json=labelE2mId,proto3" json:"label_e2m_id,omitempty"`
	TotalE2MId          *wrapperspb.StringValue   `protobuf:"bytes,16,opt,name=total_e2m_id,json=totalE2mId,proto3" json:"total_e2m_id,omitempty"`
	UpdatedAt           *wrapperspb.Int64Value    `protobuf:"bytes,17,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	TimeUnitType        TimeUnitType              `protobuf:"varint,18,opt,name=time_unit_type,json=timeUnitType,proto3,enum=com.coralogix.catalog.v1.TimeUnitType" json:"time_unit_type,omitempty"`
	ServiceNamesGroup   []*wrapperspb.StringValue `protobuf:"bytes,19,rep,name=service_names_group,json=serviceNamesGroup,proto3" json:"service_names_group,omitempty"`
}

func (x *Sli) Reset() {
	*x = Sli{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_catalog_v1_sli_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sli) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sli) ProtoMessage() {}

func (x *Sli) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_catalog_v1_sli_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sli.ProtoReflect.Descriptor instead.
func (*Sli) Descriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_sli_proto_rawDescGZIP(), []int{0}
}

func (x *Sli) GetSliId() *wrapperspb.StringValue {
	if x != nil {
		return x.SliId
	}
	return nil
}

func (x *Sli) GetSliName() *wrapperspb.StringValue {
	if x != nil {
		return x.SliName
	}
	return nil
}

func (x *Sli) GetServiceName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *Sli) GetMetricName() *wrapperspb.StringValue {
	if x != nil {
		return x.MetricName
	}
	return nil
}

func (x *Sli) GetSliDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.SliDescription
	}
	return nil
}

func (x *Sli) GetMetricType() MetricType {
	if x != nil {
		return x.MetricType
	}
	return MetricType_METRIC_TYPE_UNSPECIFIED
}

func (x *Sli) GetSloPercentage() *wrapperspb.Int64Value {
	if x != nil {
		return x.SloPercentage
	}
	return nil
}

func (x *Sli) GetSloPeriodType() SloPeriodType {
	if x != nil {
		return x.SloPeriodType
	}
	return SloPeriodType_SLO_PERIOD_TYPE_UNSPECIFIED
}

func (x *Sli) GetThresholdSymbolType() ThresholdSymbolType {
	if x != nil {
		return x.ThresholdSymbolType
	}
	return ThresholdSymbolType_THRESHOLD_SYMBOL_TYPE_UNSPECIFIED
}

func (x *Sli) GetThresholdValue() *wrapperspb.Int64Value {
	if x != nil {
		return x.ThresholdValue
	}
	return nil
}

func (x *Sli) GetFilters() []*SliFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *Sli) GetSloStatusType() SloStatusType {
	if x != nil {
		return x.SloStatusType
	}
	return SloStatusType_SLO_STATUS_TYPE_UNSPECIFIED
}

func (x *Sli) GetErrorBudget() *wrapperspb.Int64Value {
	if x != nil {
		return x.ErrorBudget
	}
	return nil
}

func (x *Sli) GetCreatedAt() *wrapperspb.Int64Value {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Sli) GetLabelE2MId() *wrapperspb.StringValue {
	if x != nil {
		return x.LabelE2MId
	}
	return nil
}

func (x *Sli) GetTotalE2MId() *wrapperspb.StringValue {
	if x != nil {
		return x.TotalE2MId
	}
	return nil
}

func (x *Sli) GetUpdatedAt() *wrapperspb.Int64Value {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Sli) GetTimeUnitType() TimeUnitType {
	if x != nil {
		return x.TimeUnitType
	}
	return TimeUnitType_TIME_UNIT_TYPE_UNSPECIFIED
}

func (x *Sli) GetServiceNamesGroup() []*wrapperspb.StringValue {
	if x != nil {
		return x.ServiceNamesGroup
	}
	return nil
}

type SliFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field       *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	CompareType CompareType               `protobuf:"varint,2,opt,name=compare_type,json=compareType,proto3,enum=com.coralogix.catalog.v1.CompareType" json:"compare_type,omitempty"`
	FieldValues []*wrapperspb.StringValue `protobuf:"bytes,3,rep,name=field_values,json=fieldValues,proto3" json:"field_values,omitempty"`
}

func (x *SliFilter) Reset() {
	*x = SliFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_catalog_v1_sli_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SliFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliFilter) ProtoMessage() {}

func (x *SliFilter) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_catalog_v1_sli_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliFilter.ProtoReflect.Descriptor instead.
func (*SliFilter) Descriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_sli_proto_rawDescGZIP(), []int{1}
}

func (x *SliFilter) GetField() *wrapperspb.StringValue {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *SliFilter) GetCompareType() CompareType {
	if x != nil {
		return x.CompareType
	}
	return CompareType_COMPARE_TYPE_UNSPECIFIED
}

func (x *SliFilter) GetFieldValues() []*wrapperspb.StringValue {
	if x != nil {
		return x.FieldValues
	}
	return nil
}

type SliStatusHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SloStatusType SloStatusType           `protobuf:"varint,1,opt,name=slo_status_type,json=sloStatusType,proto3,enum=com.coralogix.catalog.v1.SloStatusType" json:"slo_status_type,omitempty"`
	Timestamp     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ErrorBudget   *wrapperspb.Int64Value  `protobuf:"bytes,3,opt,name=error_budget,json=errorBudget,proto3" json:"error_budget,omitempty"`
}

func (x *SliStatusHistory) Reset() {
	*x = SliStatusHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_catalog_v1_sli_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SliStatusHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliStatusHistory) ProtoMessage() {}

func (x *SliStatusHistory) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_catalog_v1_sli_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliStatusHistory.ProtoReflect.Descriptor instead.
func (*SliStatusHistory) Descriptor() ([]byte, []int) {
	return file_com_coralogix_catalog_v1_sli_proto_rawDescGZIP(), []int{2}
}

func (x *SliStatusHistory) GetSloStatusType() SloStatusType {
	if x != nil {
		return x.SloStatusType
	}
	return SloStatusType_SLO_STATUS_TYPE_UNSPECIFIED
}

func (x *SliStatusHistory) GetTimestamp() *wrapperspb.StringValue {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SliStatusHistory) GetErrorBudget() *wrapperspb.Int64Value {
	if x != nil {
		return x.ErrorBudget
	}
	return nil
}

var File_com_coralogix_catalog_v1_sli_proto protoreflect.FileDescriptor

var file_com_coralogix_catalog_v1_sli_proto_rawDesc = []byte{
	0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6c, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3,
	0x0a, 0x0a, 0x03, 0x53, 0x6c, 0x69, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x6c, 0x69, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x6c, 0x69, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x73,
	0x6c, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x6c, 0x69,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x73, 0x6c, 0x69, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x6c, 0x69,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0b, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x6c, 0x6f, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x6c, 0x6f, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x4f, 0x0a, 0x0f, 0x73, 0x6c, 0x6f, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x6f, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x73, 0x6c, 0x6f, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x61, 0x0a, 0x15, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x3d, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x69,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x4f, 0x0a, 0x0f, 0x73, 0x6c, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0d, 0x73, 0x6c, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3e, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74,
	0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0c,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x65, 0x32, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x32, 0x6d, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x32, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x32, 0x6d, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4c, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0xca, 0x01, 0x0a, 0x09, 0x53, 0x6c, 0x69, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x48, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3f, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0xdf, 0x01, 0x0a, 0x10, 0x53, 0x6c, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x4f, 0x0a, 0x0f, 0x73, 0x6c, 0x6f, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x6f, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x73, 0x6c, 0x6f, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x3e, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x62, 0x75, 0x64,
	0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x75, 0x64,
	0x67, 0x65, 0x74, 0x2a, 0x9a, 0x02, 0x0a, 0x13, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x54,
	0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f,
	0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f,
	0x4c, 0x44, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10,
	0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x53,
	0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x10,
	0x03, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x53,
	0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f,
	0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x48,
	0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x54,
	0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x06,
	0x2a, 0x86, 0x01, 0x0a, 0x0d, 0x53, 0x6c, 0x6f, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x4c, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4c, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x37, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x53, 0x4c, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x31, 0x34, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17,
	0x53, 0x4c, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x33, 0x30, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x03, 0x2a, 0x71, 0x0a, 0x0a, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x45, 0x54, 0x52, 0x49,
	0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4d,
	0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x4e,
	0x43, 0x59, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x03, 0x2a, 0x94, 0x01, 0x0a,
	0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18,
	0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f,
	0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16,
	0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x44,
	0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x50,
	0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45,
	0x53, 0x10, 0x04, 0x2a, 0xc5, 0x01, 0x0a, 0x17, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2a, 0x0a, 0x26, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x49, 0x4c, 0x54,
	0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x4d,
	0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x02, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x55, 0x42, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x03, 0x2a, 0x66, 0x0a, 0x0d, 0x53,
	0x6c, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b,
	0x53, 0x4c, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x4c, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4c, 0x4f, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45,
	0x44, 0x10, 0x02, 0x2a, 0xa4, 0x01, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x45, 0x43, 0x4f,
	0x4e, 0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x53, 0x45, 0x43, 0x4f,
	0x4e, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x03, 0x12,
	0x19, 0x0a, 0x15, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10, 0x04, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogix_catalog_v1_sli_proto_rawDescOnce sync.Once
	file_com_coralogix_catalog_v1_sli_proto_rawDescData = file_com_coralogix_catalog_v1_sli_proto_rawDesc
)

func file_com_coralogix_catalog_v1_sli_proto_rawDescGZIP() []byte {
	file_com_coralogix_catalog_v1_sli_proto_rawDescOnce.Do(func() {
		file_com_coralogix_catalog_v1_sli_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_catalog_v1_sli_proto_rawDescData)
	})
	return file_com_coralogix_catalog_v1_sli_proto_rawDescData
}

var file_com_coralogix_catalog_v1_sli_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_com_coralogix_catalog_v1_sli_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_com_coralogix_catalog_v1_sli_proto_goTypes = []interface{}{
	(ThresholdSymbolType)(0),       // 0: com.coralogix.catalog.v1.ThresholdSymbolType
	(SloPeriodType)(0),             // 1: com.coralogix.catalog.v1.SloPeriodType
	(MetricType)(0),                // 2: com.coralogix.catalog.v1.MetricType
	(CompareType)(0),               // 3: com.coralogix.catalog.v1.CompareType
	(MetadataFilterFieldType)(0),   // 4: com.coralogix.catalog.v1.MetadataFilterFieldType
	(SloStatusType)(0),             // 5: com.coralogix.catalog.v1.SloStatusType
	(TimeUnitType)(0),              // 6: com.coralogix.catalog.v1.TimeUnitType
	(*Sli)(nil),                    // 7: com.coralogix.catalog.v1.Sli
	(*SliFilter)(nil),              // 8: com.coralogix.catalog.v1.SliFilter
	(*SliStatusHistory)(nil),       // 9: com.coralogix.catalog.v1.SliStatusHistory
	(*wrapperspb.StringValue)(nil), // 10: google.protobuf.StringValue
	(*wrapperspb.Int64Value)(nil),  // 11: google.protobuf.Int64Value
}
var file_com_coralogix_catalog_v1_sli_proto_depIdxs = []int32{
	10, // 0: com.coralogix.catalog.v1.Sli.sli_id:type_name -> google.protobuf.StringValue
	10, // 1: com.coralogix.catalog.v1.Sli.sli_name:type_name -> google.protobuf.StringValue
	10, // 2: com.coralogix.catalog.v1.Sli.service_name:type_name -> google.protobuf.StringValue
	10, // 3: com.coralogix.catalog.v1.Sli.metric_name:type_name -> google.protobuf.StringValue
	10, // 4: com.coralogix.catalog.v1.Sli.sli_description:type_name -> google.protobuf.StringValue
	2,  // 5: com.coralogix.catalog.v1.Sli.metric_type:type_name -> com.coralogix.catalog.v1.MetricType
	11, // 6: com.coralogix.catalog.v1.Sli.slo_percentage:type_name -> google.protobuf.Int64Value
	1,  // 7: com.coralogix.catalog.v1.Sli.slo_period_type:type_name -> com.coralogix.catalog.v1.SloPeriodType
	0,  // 8: com.coralogix.catalog.v1.Sli.threshold_symbol_type:type_name -> com.coralogix.catalog.v1.ThresholdSymbolType
	11, // 9: com.coralogix.catalog.v1.Sli.threshold_value:type_name -> google.protobuf.Int64Value
	8,  // 10: com.coralogix.catalog.v1.Sli.filters:type_name -> com.coralogix.catalog.v1.SliFilter
	5,  // 11: com.coralogix.catalog.v1.Sli.slo_status_type:type_name -> com.coralogix.catalog.v1.SloStatusType
	11, // 12: com.coralogix.catalog.v1.Sli.error_budget:type_name -> google.protobuf.Int64Value
	11, // 13: com.coralogix.catalog.v1.Sli.created_at:type_name -> google.protobuf.Int64Value
	10, // 14: com.coralogix.catalog.v1.Sli.label_e2m_id:type_name -> google.protobuf.StringValue
	10, // 15: com.coralogix.catalog.v1.Sli.total_e2m_id:type_name -> google.protobuf.StringValue
	11, // 16: com.coralogix.catalog.v1.Sli.updated_at:type_name -> google.protobuf.Int64Value
	6,  // 17: com.coralogix.catalog.v1.Sli.time_unit_type:type_name -> com.coralogix.catalog.v1.TimeUnitType
	10, // 18: com.coralogix.catalog.v1.Sli.service_names_group:type_name -> google.protobuf.StringValue
	10, // 19: com.coralogix.catalog.v1.SliFilter.field:type_name -> google.protobuf.StringValue
	3,  // 20: com.coralogix.catalog.v1.SliFilter.compare_type:type_name -> com.coralogix.catalog.v1.CompareType
	10, // 21: com.coralogix.catalog.v1.SliFilter.field_values:type_name -> google.protobuf.StringValue
	5,  // 22: com.coralogix.catalog.v1.SliStatusHistory.slo_status_type:type_name -> com.coralogix.catalog.v1.SloStatusType
	10, // 23: com.coralogix.catalog.v1.SliStatusHistory.timestamp:type_name -> google.protobuf.StringValue
	11, // 24: com.coralogix.catalog.v1.SliStatusHistory.error_budget:type_name -> google.protobuf.Int64Value
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_com_coralogix_catalog_v1_sli_proto_init() }
func file_com_coralogix_catalog_v1_sli_proto_init() {
	if File_com_coralogix_catalog_v1_sli_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_com_coralogix_catalog_v1_sli_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sli); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_catalog_v1_sli_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SliFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_catalog_v1_sli_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SliStatusHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_catalog_v1_sli_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogix_catalog_v1_sli_proto_goTypes,
		DependencyIndexes: file_com_coralogix_catalog_v1_sli_proto_depIdxs,
		EnumInfos:         file_com_coralogix_catalog_v1_sli_proto_enumTypes,
		MessageInfos:      file_com_coralogix_catalog_v1_sli_proto_msgTypes,
	}.Build()
	File_com_coralogix_catalog_v1_sli_proto = out.File
	file_com_coralogix_catalog_v1_sli_proto_rawDesc = nil
	file_com_coralogix_catalog_v1_sli_proto_goTypes = nil
	file_com_coralogix_catalog_v1_sli_proto_depIdxs = nil
}
