// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: com/coralogix/quota/v1/internal_policies_service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InternalPoliciesServiceClient is the client API for InternalPoliciesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalPoliciesServiceClient interface {
	GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error)
	CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*CreatePolicyResponse, error)
	UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*UpdatePolicyResponse, error)
	GetCompanyPolicies(ctx context.Context, in *GetCompanyPoliciesRequest, opts ...grpc.CallOption) (*GetCompanyPoliciesResponse, error)
	DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*DeletePolicyResponse, error)
	ReorderPolicies(ctx context.Context, in *ReorderPoliciesRequest, opts ...grpc.CallOption) (*ReorderPoliciesResponse, error)
	BulkTestLogPolicies(ctx context.Context, in *BulkTestLogPoliciesRequest, opts ...grpc.CallOption) (*BulkTestLogPoliciesResponse, error)
	TogglePolicy(ctx context.Context, in *TogglePolicyRequest, opts ...grpc.CallOption) (*TogglePolicyResponse, error)
}

type internalPoliciesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalPoliciesServiceClient(cc grpc.ClientConnInterface) InternalPoliciesServiceClient {
	return &internalPoliciesServiceClient{cc}
}

func (c *internalPoliciesServiceClient) GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error) {
	out := new(GetPolicyResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.quota.v1.InternalPoliciesService/GetPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalPoliciesServiceClient) CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*CreatePolicyResponse, error) {
	out := new(CreatePolicyResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.quota.v1.InternalPoliciesService/CreatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalPoliciesServiceClient) UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*UpdatePolicyResponse, error) {
	out := new(UpdatePolicyResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.quota.v1.InternalPoliciesService/UpdatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalPoliciesServiceClient) GetCompanyPolicies(ctx context.Context, in *GetCompanyPoliciesRequest, opts ...grpc.CallOption) (*GetCompanyPoliciesResponse, error) {
	out := new(GetCompanyPoliciesResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.quota.v1.InternalPoliciesService/GetCompanyPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalPoliciesServiceClient) DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*DeletePolicyResponse, error) {
	out := new(DeletePolicyResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.quota.v1.InternalPoliciesService/DeletePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalPoliciesServiceClient) ReorderPolicies(ctx context.Context, in *ReorderPoliciesRequest, opts ...grpc.CallOption) (*ReorderPoliciesResponse, error) {
	out := new(ReorderPoliciesResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.quota.v1.InternalPoliciesService/ReorderPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalPoliciesServiceClient) BulkTestLogPolicies(ctx context.Context, in *BulkTestLogPoliciesRequest, opts ...grpc.CallOption) (*BulkTestLogPoliciesResponse, error) {
	out := new(BulkTestLogPoliciesResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.quota.v1.InternalPoliciesService/BulkTestLogPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalPoliciesServiceClient) TogglePolicy(ctx context.Context, in *TogglePolicyRequest, opts ...grpc.CallOption) (*TogglePolicyResponse, error) {
	out := new(TogglePolicyResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.quota.v1.InternalPoliciesService/TogglePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalPoliciesServiceServer is the server API for InternalPoliciesService service.
// All implementations must embed UnimplementedInternalPoliciesServiceServer
// for forward compatibility
type InternalPoliciesServiceServer interface {
	GetPolicy(context.Context, *GetPolicyRequest) (*GetPolicyResponse, error)
	CreatePolicy(context.Context, *CreatePolicyRequest) (*CreatePolicyResponse, error)
	UpdatePolicy(context.Context, *UpdatePolicyRequest) (*UpdatePolicyResponse, error)
	GetCompanyPolicies(context.Context, *GetCompanyPoliciesRequest) (*GetCompanyPoliciesResponse, error)
	DeletePolicy(context.Context, *DeletePolicyRequest) (*DeletePolicyResponse, error)
	ReorderPolicies(context.Context, *ReorderPoliciesRequest) (*ReorderPoliciesResponse, error)
	BulkTestLogPolicies(context.Context, *BulkTestLogPoliciesRequest) (*BulkTestLogPoliciesResponse, error)
	TogglePolicy(context.Context, *TogglePolicyRequest) (*TogglePolicyResponse, error)
	mustEmbedUnimplementedInternalPoliciesServiceServer()
}

// UnimplementedInternalPoliciesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInternalPoliciesServiceServer struct {
}

func (UnimplementedInternalPoliciesServiceServer) GetPolicy(context.Context, *GetPolicyRequest) (*GetPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (UnimplementedInternalPoliciesServiceServer) CreatePolicy(context.Context, *CreatePolicyRequest) (*CreatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (UnimplementedInternalPoliciesServiceServer) UpdatePolicy(context.Context, *UpdatePolicyRequest) (*UpdatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicy not implemented")
}
func (UnimplementedInternalPoliciesServiceServer) GetCompanyPolicies(context.Context, *GetCompanyPoliciesRequest) (*GetCompanyPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyPolicies not implemented")
}
func (UnimplementedInternalPoliciesServiceServer) DeletePolicy(context.Context, *DeletePolicyRequest) (*DeletePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (UnimplementedInternalPoliciesServiceServer) ReorderPolicies(context.Context, *ReorderPoliciesRequest) (*ReorderPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReorderPolicies not implemented")
}
func (UnimplementedInternalPoliciesServiceServer) BulkTestLogPolicies(context.Context, *BulkTestLogPoliciesRequest) (*BulkTestLogPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkTestLogPolicies not implemented")
}
func (UnimplementedInternalPoliciesServiceServer) TogglePolicy(context.Context, *TogglePolicyRequest) (*TogglePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TogglePolicy not implemented")
}
func (UnimplementedInternalPoliciesServiceServer) mustEmbedUnimplementedInternalPoliciesServiceServer() {
}

// UnsafeInternalPoliciesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalPoliciesServiceServer will
// result in compilation errors.
type UnsafeInternalPoliciesServiceServer interface {
	mustEmbedUnimplementedInternalPoliciesServiceServer()
}

func RegisterInternalPoliciesServiceServer(s grpc.ServiceRegistrar, srv InternalPoliciesServiceServer) {
	s.RegisterService(&InternalPoliciesService_ServiceDesc, srv)
}

func _InternalPoliciesService_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalPoliciesServiceServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.quota.v1.InternalPoliciesService/GetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalPoliciesServiceServer).GetPolicy(ctx, req.(*GetPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalPoliciesService_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalPoliciesServiceServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.quota.v1.InternalPoliciesService/CreatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalPoliciesServiceServer).CreatePolicy(ctx, req.(*CreatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalPoliciesService_UpdatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalPoliciesServiceServer).UpdatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.quota.v1.InternalPoliciesService/UpdatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalPoliciesServiceServer).UpdatePolicy(ctx, req.(*UpdatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalPoliciesService_GetCompanyPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalPoliciesServiceServer).GetCompanyPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.quota.v1.InternalPoliciesService/GetCompanyPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalPoliciesServiceServer).GetCompanyPolicies(ctx, req.(*GetCompanyPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalPoliciesService_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalPoliciesServiceServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.quota.v1.InternalPoliciesService/DeletePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalPoliciesServiceServer).DeletePolicy(ctx, req.(*DeletePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalPoliciesService_ReorderPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReorderPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalPoliciesServiceServer).ReorderPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.quota.v1.InternalPoliciesService/ReorderPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalPoliciesServiceServer).ReorderPolicies(ctx, req.(*ReorderPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalPoliciesService_BulkTestLogPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkTestLogPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalPoliciesServiceServer).BulkTestLogPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.quota.v1.InternalPoliciesService/BulkTestLogPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalPoliciesServiceServer).BulkTestLogPolicies(ctx, req.(*BulkTestLogPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalPoliciesService_TogglePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TogglePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalPoliciesServiceServer).TogglePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.quota.v1.InternalPoliciesService/TogglePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalPoliciesServiceServer).TogglePolicy(ctx, req.(*TogglePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InternalPoliciesService_ServiceDesc is the grpc.ServiceDesc for InternalPoliciesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalPoliciesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.quota.v1.InternalPoliciesService",
	HandlerType: (*InternalPoliciesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPolicy",
			Handler:    _InternalPoliciesService_GetPolicy_Handler,
		},
		{
			MethodName: "CreatePolicy",
			Handler:    _InternalPoliciesService_CreatePolicy_Handler,
		},
		{
			MethodName: "UpdatePolicy",
			Handler:    _InternalPoliciesService_UpdatePolicy_Handler,
		},
		{
			MethodName: "GetCompanyPolicies",
			Handler:    _InternalPoliciesService_GetCompanyPolicies_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _InternalPoliciesService_DeletePolicy_Handler,
		},
		{
			MethodName: "ReorderPolicies",
			Handler:    _InternalPoliciesService_ReorderPolicies_Handler,
		},
		{
			MethodName: "BulkTestLogPolicies",
			Handler:    _InternalPoliciesService_BulkTestLogPolicies_Handler,
		},
		{
			MethodName: "TogglePolicy",
			Handler:    _InternalPoliciesService_TogglePolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/quota/v1/internal_policies_service.proto",
}
