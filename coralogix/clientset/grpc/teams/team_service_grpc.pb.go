// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: com/coralogixapis/aaa/organisations/v2/team_service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TeamServiceClient is the client API for TeamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeamServiceClient interface {
	CreateTeamInOrg(ctx context.Context, in *CreateTeamInOrgRequest, opts ...grpc.CallOption) (*CreateTeamInOrgResponse, error)
	MoveQuota(ctx context.Context, in *MoveQuotaRequest, opts ...grpc.CallOption) (*MoveQuotaResponse, error)
	GetTeamQuota(ctx context.Context, in *GetTeamQuotaRequest, opts ...grpc.CallOption) (*GetTeamQuotaResponse, error)
	InviteUsersToTeam(ctx context.Context, in *InviteUsersToTeamRequest, opts ...grpc.CallOption) (*InviteUsersToTeamResponse, error)
}

type teamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamServiceClient(cc grpc.ClientConnInterface) TeamServiceClient {
	return &teamServiceClient{cc}
}

func (c *teamServiceClient) CreateTeamInOrg(ctx context.Context, in *CreateTeamInOrgRequest, opts ...grpc.CallOption) (*CreateTeamInOrgResponse, error) {
	out := new(CreateTeamInOrgResponse)
	err := c.cc.Invoke(ctx, "/com.coralogixapis.aaa.organisations.v2.TeamService/CreateTeamInOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) MoveQuota(ctx context.Context, in *MoveQuotaRequest, opts ...grpc.CallOption) (*MoveQuotaResponse, error) {
	out := new(MoveQuotaResponse)
	err := c.cc.Invoke(ctx, "/com.coralogixapis.aaa.organisations.v2.TeamService/MoveQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) GetTeamQuota(ctx context.Context, in *GetTeamQuotaRequest, opts ...grpc.CallOption) (*GetTeamQuotaResponse, error) {
	out := new(GetTeamQuotaResponse)
	err := c.cc.Invoke(ctx, "/com.coralogixapis.aaa.organisations.v2.TeamService/GetTeamQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) InviteUsersToTeam(ctx context.Context, in *InviteUsersToTeamRequest, opts ...grpc.CallOption) (*InviteUsersToTeamResponse, error) {
	out := new(InviteUsersToTeamResponse)
	err := c.cc.Invoke(ctx, "/com.coralogixapis.aaa.organisations.v2.TeamService/InviteUsersToTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamServiceServer is the server API for TeamService service.
// All implementations must embed UnimplementedTeamServiceServer
// for forward compatibility
type TeamServiceServer interface {
	CreateTeamInOrg(context.Context, *CreateTeamInOrgRequest) (*CreateTeamInOrgResponse, error)
	MoveQuota(context.Context, *MoveQuotaRequest) (*MoveQuotaResponse, error)
	GetTeamQuota(context.Context, *GetTeamQuotaRequest) (*GetTeamQuotaResponse, error)
	InviteUsersToTeam(context.Context, *InviteUsersToTeamRequest) (*InviteUsersToTeamResponse, error)
	mustEmbedUnimplementedTeamServiceServer()
}

// UnimplementedTeamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTeamServiceServer struct {
}

func (UnimplementedTeamServiceServer) CreateTeamInOrg(context.Context, *CreateTeamInOrgRequest) (*CreateTeamInOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeamInOrg not implemented")
}
func (UnimplementedTeamServiceServer) MoveQuota(context.Context, *MoveQuotaRequest) (*MoveQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveQuota not implemented")
}
func (UnimplementedTeamServiceServer) GetTeamQuota(context.Context, *GetTeamQuotaRequest) (*GetTeamQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamQuota not implemented")
}
func (UnimplementedTeamServiceServer) InviteUsersToTeam(context.Context, *InviteUsersToTeamRequest) (*InviteUsersToTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteUsersToTeam not implemented")
}
func (UnimplementedTeamServiceServer) mustEmbedUnimplementedTeamServiceServer() {}

// UnsafeTeamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeamServiceServer will
// result in compilation errors.
type UnsafeTeamServiceServer interface {
	mustEmbedUnimplementedTeamServiceServer()
}

func RegisterTeamServiceServer(s grpc.ServiceRegistrar, srv TeamServiceServer) {
	s.RegisterService(&TeamService_ServiceDesc, srv)
}

func _TeamService_CreateTeamInOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamInOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).CreateTeamInOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogixapis.aaa.organisations.v2.TeamService/CreateTeamInOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).CreateTeamInOrg(ctx, req.(*CreateTeamInOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_MoveQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).MoveQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogixapis.aaa.organisations.v2.TeamService/MoveQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).MoveQuota(ctx, req.(*MoveQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_GetTeamQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetTeamQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogixapis.aaa.organisations.v2.TeamService/GetTeamQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetTeamQuota(ctx, req.(*GetTeamQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_InviteUsersToTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUsersToTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).InviteUsersToTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogixapis.aaa.organisations.v2.TeamService/InviteUsersToTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).InviteUsersToTeam(ctx, req.(*InviteUsersToTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeamService_ServiceDesc is the grpc.ServiceDesc for TeamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogixapis.aaa.organisations.v2.TeamService",
	HandlerType: (*TeamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTeamInOrg",
			Handler:    _TeamService_CreateTeamInOrg_Handler,
		},
		{
			MethodName: "MoveQuota",
			Handler:    _TeamService_MoveQuota_Handler,
		},
		{
			MethodName: "GetTeamQuota",
			Handler:    _TeamService_GetTeamQuota_Handler,
		},
		{
			MethodName: "InviteUsersToTeam",
			Handler:    _TeamService_InviteUsersToTeam_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogixapis/aaa/organisations/v2/team_service.proto",
}
