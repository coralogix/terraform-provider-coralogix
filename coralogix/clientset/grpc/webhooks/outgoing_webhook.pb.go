// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.0
// source: com/coralogix/outgoing_webhooks/v1/outgoing_webhook.proto

package webhooks

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WebhookType int32

const (
	WebhookType_UNKNOWN                 WebhookType = 0
	WebhookType_GENERIC                 WebhookType = 1
	WebhookType_SLACK                   WebhookType = 2
	WebhookType_PAGERDUTY               WebhookType = 3
	WebhookType_SEND_LOG                WebhookType = 4
	WebhookType_EMAIL_GROUP             WebhookType = 5
	WebhookType_MICROSOFT_TEAMS         WebhookType = 6
	WebhookType_JIRA                    WebhookType = 7
	WebhookType_OPSGENIE                WebhookType = 8
	WebhookType_DEMISTO                 WebhookType = 9
	WebhookType_AWS_EVENT_BRIDGE        WebhookType = 10
	WebhookType_IBM_EVENT_NOTIFICATIONS WebhookType = 11
	WebhookType_MS_TEAMS_WORKFLOW       WebhookType = 12
)

// Enum value maps for WebhookType.
var (
	WebhookType_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "GENERIC",
		2:  "SLACK",
		3:  "PAGERDUTY",
		4:  "SEND_LOG",
		5:  "EMAIL_GROUP",
		6:  "MICROSOFT_TEAMS",
		7:  "JIRA",
		8:  "OPSGENIE",
		9:  "DEMISTO",
		10: "AWS_EVENT_BRIDGE",
		11: "IBM_EVENT_NOTIFICATIONS",
		12: "MS_TEAMS_WORKFLOW",
	}
	WebhookType_value = map[string]int32{
		"UNKNOWN":                 0,
		"GENERIC":                 1,
		"SLACK":                   2,
		"PAGERDUTY":               3,
		"SEND_LOG":                4,
		"EMAIL_GROUP":             5,
		"MICROSOFT_TEAMS":         6,
		"JIRA":                    7,
		"OPSGENIE":                8,
		"DEMISTO":                 9,
		"AWS_EVENT_BRIDGE":        10,
		"IBM_EVENT_NOTIFICATIONS": 11,
		"MS_TEAMS_WORKFLOW":       12,
	}
)

func (x WebhookType) Enum() *WebhookType {
	p := new(WebhookType)
	*p = x
	return p
}

func (x WebhookType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WebhookType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_enumTypes[0].Descriptor()
}

func (WebhookType) Type() protoreflect.EnumType {
	return &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_enumTypes[0]
}

func (x WebhookType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WebhookType.Descriptor instead.
func (WebhookType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescGZIP(), []int{0}
}

type GenericWebhookConfig_MethodType int32

const (
	GenericWebhookConfig_UNKNOWN GenericWebhookConfig_MethodType = 0
	GenericWebhookConfig_GET     GenericWebhookConfig_MethodType = 1
	GenericWebhookConfig_POST    GenericWebhookConfig_MethodType = 2
	GenericWebhookConfig_PUT     GenericWebhookConfig_MethodType = 3
)

// Enum value maps for GenericWebhookConfig_MethodType.
var (
	GenericWebhookConfig_MethodType_name = map[int32]string{
		0: "UNKNOWN",
		1: "GET",
		2: "POST",
		3: "PUT",
	}
	GenericWebhookConfig_MethodType_value = map[string]int32{
		"UNKNOWN": 0,
		"GET":     1,
		"POST":    2,
		"PUT":     3,
	}
)

func (x GenericWebhookConfig_MethodType) Enum() *GenericWebhookConfig_MethodType {
	p := new(GenericWebhookConfig_MethodType)
	*p = x
	return p
}

func (x GenericWebhookConfig_MethodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenericWebhookConfig_MethodType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_enumTypes[1].Descriptor()
}

func (GenericWebhookConfig_MethodType) Type() protoreflect.EnumType {
	return &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_enumTypes[1]
}

func (x GenericWebhookConfig_MethodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenericWebhookConfig_MethodType.Descriptor instead.
func (GenericWebhookConfig_MethodType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescGZIP(), []int{0, 0}
}

type SlackConfig_DigestType int32

const (
	SlackConfig_UNKNOWN                 SlackConfig_DigestType = 0
	SlackConfig_ERROR_AND_CRITICAL_LOGS SlackConfig_DigestType = 1
	SlackConfig_FLOW_ANOMALIES          SlackConfig_DigestType = 2
	SlackConfig_SPIKE_ANOMALIES         SlackConfig_DigestType = 3
	SlackConfig_DATA_USAGE              SlackConfig_DigestType = 4
)

// Enum value maps for SlackConfig_DigestType.
var (
	SlackConfig_DigestType_name = map[int32]string{
		0: "UNKNOWN",
		1: "ERROR_AND_CRITICAL_LOGS",
		2: "FLOW_ANOMALIES",
		3: "SPIKE_ANOMALIES",
		4: "DATA_USAGE",
	}
	SlackConfig_DigestType_value = map[string]int32{
		"UNKNOWN":                 0,
		"ERROR_AND_CRITICAL_LOGS": 1,
		"FLOW_ANOMALIES":          2,
		"SPIKE_ANOMALIES":         3,
		"DATA_USAGE":              4,
	}
)

func (x SlackConfig_DigestType) Enum() *SlackConfig_DigestType {
	p := new(SlackConfig_DigestType)
	*p = x
	return p
}

func (x SlackConfig_DigestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SlackConfig_DigestType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_enumTypes[2].Descriptor()
}

func (SlackConfig_DigestType) Type() protoreflect.EnumType {
	return &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_enumTypes[2]
}

func (x SlackConfig_DigestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SlackConfig_DigestType.Descriptor instead.
func (SlackConfig_DigestType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescGZIP(), []int{1, 0}
}

type SlackConfig_AttachmentType int32

const (
	SlackConfig_EMPTY           SlackConfig_AttachmentType = 0
	SlackConfig_METRIC_SNAPSHOT SlackConfig_AttachmentType = 1
	SlackConfig_LOGS            SlackConfig_AttachmentType = 2
)

// Enum value maps for SlackConfig_AttachmentType.
var (
	SlackConfig_AttachmentType_name = map[int32]string{
		0: "EMPTY",
		1: "METRIC_SNAPSHOT",
		2: "LOGS",
	}
	SlackConfig_AttachmentType_value = map[string]int32{
		"EMPTY":           0,
		"METRIC_SNAPSHOT": 1,
		"LOGS":            2,
	}
)

func (x SlackConfig_AttachmentType) Enum() *SlackConfig_AttachmentType {
	p := new(SlackConfig_AttachmentType)
	*p = x
	return p
}

func (x SlackConfig_AttachmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SlackConfig_AttachmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_enumTypes[3].Descriptor()
}

func (SlackConfig_AttachmentType) Type() protoreflect.EnumType {
	return &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_enumTypes[3]
}

func (x SlackConfig_AttachmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SlackConfig_AttachmentType.Descriptor instead.
func (SlackConfig_AttachmentType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescGZIP(), []int{1, 1}
}

type GenericWebhookConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid    *wrapperspb.StringValue         `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Method  GenericWebhookConfig_MethodType `protobuf:"varint,2,opt,name=method,proto3,enum=com.coralogix.outgoing_webhooks.v1.GenericWebhookConfig_MethodType" json:"method,omitempty"`
	Headers map[string]string               `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Payload *wrapperspb.StringValue         `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GenericWebhookConfig) Reset() {
	*x = GenericWebhookConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericWebhookConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericWebhookConfig) ProtoMessage() {}

func (x *GenericWebhookConfig) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericWebhookConfig.ProtoReflect.Descriptor instead.
func (*GenericWebhookConfig) Descriptor() ([]byte, []int) {
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescGZIP(), []int{0}
}

func (x *GenericWebhookConfig) GetUuid() *wrapperspb.StringValue {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *GenericWebhookConfig) GetMethod() GenericWebhookConfig_MethodType {
	if x != nil {
		return x.Method
	}
	return GenericWebhookConfig_UNKNOWN
}

func (x *GenericWebhookConfig) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *GenericWebhookConfig) GetPayload() *wrapperspb.StringValue {
	if x != nil {
		return x.Payload
	}
	return nil
}

type SlackConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Digests     []*SlackConfig_Digest     `protobuf:"bytes,1,rep,name=digests,proto3" json:"digests,omitempty"`
	Attachments []*SlackConfig_Attachment `protobuf:"bytes,2,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *SlackConfig) Reset() {
	*x = SlackConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackConfig) ProtoMessage() {}

func (x *SlackConfig) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackConfig.ProtoReflect.Descriptor instead.
func (*SlackConfig) Descriptor() ([]byte, []int) {
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescGZIP(), []int{1}
}

func (x *SlackConfig) GetDigests() []*SlackConfig_Digest {
	if x != nil {
		return x.Digests
	}
	return nil
}

func (x *SlackConfig) GetAttachments() []*SlackConfig_Attachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

type PagerDutyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceKey *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=service_key,json=serviceKey,proto3" json:"service_key,omitempty"`
}

func (x *PagerDutyConfig) Reset() {
	*x = PagerDutyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagerDutyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagerDutyConfig) ProtoMessage() {}

func (x *PagerDutyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagerDutyConfig.ProtoReflect.Descriptor instead.
func (*PagerDutyConfig) Descriptor() ([]byte, []int) {
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescGZIP(), []int{2}
}

func (x *PagerDutyConfig) GetServiceKey() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceKey
	}
	return nil
}

type SendLogConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid    *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Payload *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *SendLogConfig) Reset() {
	*x = SendLogConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendLogConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendLogConfig) ProtoMessage() {}

func (x *SendLogConfig) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendLogConfig.ProtoReflect.Descriptor instead.
func (*SendLogConfig) Descriptor() ([]byte, []int) {
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescGZIP(), []int{3}
}

func (x *SendLogConfig) GetUuid() *wrapperspb.StringValue {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *SendLogConfig) GetPayload() *wrapperspb.StringValue {
	if x != nil {
		return x.Payload
	}
	return nil
}

type EmailGroupConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmailAddresses []*wrapperspb.StringValue `protobuf:"bytes,1,rep,name=email_addresses,json=emailAddresses,proto3" json:"email_addresses,omitempty"`
}

func (x *EmailGroupConfig) Reset() {
	*x = EmailGroupConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailGroupConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailGroupConfig) ProtoMessage() {}

func (x *EmailGroupConfig) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailGroupConfig.ProtoReflect.Descriptor instead.
func (*EmailGroupConfig) Descriptor() ([]byte, []int) {
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescGZIP(), []int{4}
}

func (x *EmailGroupConfig) GetEmailAddresses() []*wrapperspb.StringValue {
	if x != nil {
		return x.EmailAddresses
	}
	return nil
}

type MicrosoftTeamsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MicrosoftTeamsConfig) Reset() {
	*x = MicrosoftTeamsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MicrosoftTeamsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicrosoftTeamsConfig) ProtoMessage() {}

func (x *MicrosoftTeamsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MicrosoftTeamsConfig.ProtoReflect.Descriptor instead.
func (*MicrosoftTeamsConfig) Descriptor() ([]byte, []int) {
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescGZIP(), []int{5}
}

type MSTeamsWorkflowConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MSTeamsWorkflowConfig) Reset() {
	*x = MSTeamsWorkflowConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSTeamsWorkflowConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSTeamsWorkflowConfig) ProtoMessage() {}

func (x *MSTeamsWorkflowConfig) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSTeamsWorkflowConfig.ProtoReflect.Descriptor instead.
func (*MSTeamsWorkflowConfig) Descriptor() ([]byte, []int) {
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescGZIP(), []int{6}
}

type JiraConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiToken   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=api_token,json=apiToken,proto3" json:"api_token,omitempty"`
	Email      *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	ProjectKey *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=project_key,json=projectKey,proto3" json:"project_key,omitempty"`
}

func (x *JiraConfig) Reset() {
	*x = JiraConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JiraConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JiraConfig) ProtoMessage() {}

func (x *JiraConfig) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JiraConfig.ProtoReflect.Descriptor instead.
func (*JiraConfig) Descriptor() ([]byte, []int) {
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescGZIP(), []int{7}
}

func (x *JiraConfig) GetApiToken() *wrapperspb.StringValue {
	if x != nil {
		return x.ApiToken
	}
	return nil
}

func (x *JiraConfig) GetEmail() *wrapperspb.StringValue {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *JiraConfig) GetProjectKey() *wrapperspb.StringValue {
	if x != nil {
		return x.ProjectKey
	}
	return nil
}

type OpsgenieConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OpsgenieConfig) Reset() {
	*x = OpsgenieConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpsgenieConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpsgenieConfig) ProtoMessage() {}

func (x *OpsgenieConfig) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpsgenieConfig.ProtoReflect.Descriptor instead.
func (*OpsgenieConfig) Descriptor() ([]byte, []int) {
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescGZIP(), []int{8}
}

type DemistoConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid    *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Payload *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *DemistoConfig) Reset() {
	*x = DemistoConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DemistoConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemistoConfig) ProtoMessage() {}

func (x *DemistoConfig) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemistoConfig.ProtoReflect.Descriptor instead.
func (*DemistoConfig) Descriptor() ([]byte, []int) {
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescGZIP(), []int{9}
}

func (x *DemistoConfig) GetUuid() *wrapperspb.StringValue {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *DemistoConfig) GetPayload() *wrapperspb.StringValue {
	if x != nil {
		return x.Payload
	}
	return nil
}

type AwsEventBridgeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventBusArn *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=event_bus_arn,json=eventBusArn,proto3" json:"event_bus_arn,omitempty"`
	Detail      *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`
	DetailType  *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=detail_type,json=detailType,proto3" json:"detail_type,omitempty"`
	Source      *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	RoleName    *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
}

func (x *AwsEventBridgeConfig) Reset() {
	*x = AwsEventBridgeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsEventBridgeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsEventBridgeConfig) ProtoMessage() {}

func (x *AwsEventBridgeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsEventBridgeConfig.ProtoReflect.Descriptor instead.
func (*AwsEventBridgeConfig) Descriptor() ([]byte, []int) {
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescGZIP(), []int{10}
}

func (x *AwsEventBridgeConfig) GetEventBusArn() *wrapperspb.StringValue {
	if x != nil {
		return x.EventBusArn
	}
	return nil
}

func (x *AwsEventBridgeConfig) GetDetail() *wrapperspb.StringValue {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *AwsEventBridgeConfig) GetDetailType() *wrapperspb.StringValue {
	if x != nil {
		return x.DetailType
	}
	return nil
}

func (x *AwsEventBridgeConfig) GetSource() *wrapperspb.StringValue {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *AwsEventBridgeConfig) GetRoleName() *wrapperspb.StringValue {
	if x != nil {
		return x.RoleName
	}
	return nil
}

type IbmEventNotificationsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventNotificationsInstanceId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=event_notifications_instance_id,json=eventNotificationsInstanceId,proto3" json:"event_notifications_instance_id,omitempty"`
	RegionId                     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	SourceId                     *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	SourceName                   *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"`
}

func (x *IbmEventNotificationsConfig) Reset() {
	*x = IbmEventNotificationsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IbmEventNotificationsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IbmEventNotificationsConfig) ProtoMessage() {}

func (x *IbmEventNotificationsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IbmEventNotificationsConfig.ProtoReflect.Descriptor instead.
func (*IbmEventNotificationsConfig) Descriptor() ([]byte, []int) {
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescGZIP(), []int{11}
}

func (x *IbmEventNotificationsConfig) GetEventNotificationsInstanceId() *wrapperspb.StringValue {
	if x != nil {
		return x.EventNotificationsInstanceId
	}
	return nil
}

func (x *IbmEventNotificationsConfig) GetRegionId() *wrapperspb.StringValue {
	if x != nil {
		return x.RegionId
	}
	return nil
}

func (x *IbmEventNotificationsConfig) GetSourceId() *wrapperspb.StringValue {
	if x != nil {
		return x.SourceId
	}
	return nil
}

func (x *IbmEventNotificationsConfig) GetSourceName() *wrapperspb.StringValue {
	if x != nil {
		return x.SourceName
	}
	return nil
}

type OutgoingWebhook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type       WebhookType             `protobuf:"varint,2,opt,name=type,proto3,enum=com.coralogix.outgoing_webhooks.v1.WebhookType" json:"type,omitempty"`
	Name       *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Url        *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	CreatedAt  *timestamppb.Timestamp  `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  *timestamppb.Timestamp  `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ExternalId *wrapperspb.UInt32Value `protobuf:"bytes,7,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	// Types that are assignable to Config:
	//
	//	*OutgoingWebhook_GenericWebhook
	//	*OutgoingWebhook_Slack
	//	*OutgoingWebhook_PagerDuty
	//	*OutgoingWebhook_SendLog
	//	*OutgoingWebhook_EmailGroup
	//	*OutgoingWebhook_MicrosoftTeams
	//	*OutgoingWebhook_Jira
	//	*OutgoingWebhook_Opsgenie
	//	*OutgoingWebhook_Demisto
	//	*OutgoingWebhook_AwsEventBridge
	//	*OutgoingWebhook_IbmEventNotifications
	//	*OutgoingWebhook_MsTeamsWorkflow
	Config isOutgoingWebhook_Config `protobuf_oneof:"config"`
}

func (x *OutgoingWebhook) Reset() {
	*x = OutgoingWebhook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutgoingWebhook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutgoingWebhook) ProtoMessage() {}

func (x *OutgoingWebhook) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutgoingWebhook.ProtoReflect.Descriptor instead.
func (*OutgoingWebhook) Descriptor() ([]byte, []int) {
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescGZIP(), []int{12}
}

func (x *OutgoingWebhook) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OutgoingWebhook) GetType() WebhookType {
	if x != nil {
		return x.Type
	}
	return WebhookType_UNKNOWN
}

func (x *OutgoingWebhook) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *OutgoingWebhook) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *OutgoingWebhook) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OutgoingWebhook) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *OutgoingWebhook) GetExternalId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ExternalId
	}
	return nil
}

func (m *OutgoingWebhook) GetConfig() isOutgoingWebhook_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *OutgoingWebhook) GetGenericWebhook() *GenericWebhookConfig {
	if x, ok := x.GetConfig().(*OutgoingWebhook_GenericWebhook); ok {
		return x.GenericWebhook
	}
	return nil
}

func (x *OutgoingWebhook) GetSlack() *SlackConfig {
	if x, ok := x.GetConfig().(*OutgoingWebhook_Slack); ok {
		return x.Slack
	}
	return nil
}

func (x *OutgoingWebhook) GetPagerDuty() *PagerDutyConfig {
	if x, ok := x.GetConfig().(*OutgoingWebhook_PagerDuty); ok {
		return x.PagerDuty
	}
	return nil
}

func (x *OutgoingWebhook) GetSendLog() *SendLogConfig {
	if x, ok := x.GetConfig().(*OutgoingWebhook_SendLog); ok {
		return x.SendLog
	}
	return nil
}

func (x *OutgoingWebhook) GetEmailGroup() *EmailGroupConfig {
	if x, ok := x.GetConfig().(*OutgoingWebhook_EmailGroup); ok {
		return x.EmailGroup
	}
	return nil
}

func (x *OutgoingWebhook) GetMicrosoftTeams() *MicrosoftTeamsConfig {
	if x, ok := x.GetConfig().(*OutgoingWebhook_MicrosoftTeams); ok {
		return x.MicrosoftTeams
	}
	return nil
}

func (x *OutgoingWebhook) GetJira() *JiraConfig {
	if x, ok := x.GetConfig().(*OutgoingWebhook_Jira); ok {
		return x.Jira
	}
	return nil
}

func (x *OutgoingWebhook) GetOpsgenie() *OpsgenieConfig {
	if x, ok := x.GetConfig().(*OutgoingWebhook_Opsgenie); ok {
		return x.Opsgenie
	}
	return nil
}

func (x *OutgoingWebhook) GetDemisto() *DemistoConfig {
	if x, ok := x.GetConfig().(*OutgoingWebhook_Demisto); ok {
		return x.Demisto
	}
	return nil
}

func (x *OutgoingWebhook) GetAwsEventBridge() *AwsEventBridgeConfig {
	if x, ok := x.GetConfig().(*OutgoingWebhook_AwsEventBridge); ok {
		return x.AwsEventBridge
	}
	return nil
}

func (x *OutgoingWebhook) GetIbmEventNotifications() *IbmEventNotificationsConfig {
	if x, ok := x.GetConfig().(*OutgoingWebhook_IbmEventNotifications); ok {
		return x.IbmEventNotifications
	}
	return nil
}

func (x *OutgoingWebhook) GetMsTeamsWorkflow() *MSTeamsWorkflowConfig {
	if x, ok := x.GetConfig().(*OutgoingWebhook_MsTeamsWorkflow); ok {
		return x.MsTeamsWorkflow
	}
	return nil
}

type isOutgoingWebhook_Config interface {
	isOutgoingWebhook_Config()
}

type OutgoingWebhook_GenericWebhook struct {
	GenericWebhook *GenericWebhookConfig `protobuf:"bytes,100,opt,name=generic_webhook,json=genericWebhook,proto3,oneof"`
}

type OutgoingWebhook_Slack struct {
	Slack *SlackConfig `protobuf:"bytes,101,opt,name=slack,proto3,oneof"`
}

type OutgoingWebhook_PagerDuty struct {
	PagerDuty *PagerDutyConfig `protobuf:"bytes,102,opt,name=pager_duty,json=pagerDuty,proto3,oneof"`
}

type OutgoingWebhook_SendLog struct {
	SendLog *SendLogConfig `protobuf:"bytes,103,opt,name=send_log,json=sendLog,proto3,oneof"`
}

type OutgoingWebhook_EmailGroup struct {
	EmailGroup *EmailGroupConfig `protobuf:"bytes,104,opt,name=email_group,json=emailGroup,proto3,oneof"`
}

type OutgoingWebhook_MicrosoftTeams struct {
	MicrosoftTeams *MicrosoftTeamsConfig `protobuf:"bytes,105,opt,name=microsoft_teams,json=microsoftTeams,proto3,oneof"`
}

type OutgoingWebhook_Jira struct {
	Jira *JiraConfig `protobuf:"bytes,106,opt,name=jira,proto3,oneof"`
}

type OutgoingWebhook_Opsgenie struct {
	Opsgenie *OpsgenieConfig `protobuf:"bytes,107,opt,name=opsgenie,proto3,oneof"`
}

type OutgoingWebhook_Demisto struct {
	Demisto *DemistoConfig `protobuf:"bytes,108,opt,name=demisto,proto3,oneof"`
}

type OutgoingWebhook_AwsEventBridge struct {
	AwsEventBridge *AwsEventBridgeConfig `protobuf:"bytes,109,opt,name=aws_event_bridge,json=awsEventBridge,proto3,oneof"`
}

type OutgoingWebhook_IbmEventNotifications struct {
	IbmEventNotifications *IbmEventNotificationsConfig `protobuf:"bytes,110,opt,name=ibm_event_notifications,json=ibmEventNotifications,proto3,oneof"`
}

type OutgoingWebhook_MsTeamsWorkflow struct {
	MsTeamsWorkflow *MSTeamsWorkflowConfig `protobuf:"bytes,111,opt,name=ms_teams_workflow,json=msTeamsWorkflow,proto3,oneof"`
}

func (*OutgoingWebhook_GenericWebhook) isOutgoingWebhook_Config() {}

func (*OutgoingWebhook_Slack) isOutgoingWebhook_Config() {}

func (*OutgoingWebhook_PagerDuty) isOutgoingWebhook_Config() {}

func (*OutgoingWebhook_SendLog) isOutgoingWebhook_Config() {}

func (*OutgoingWebhook_EmailGroup) isOutgoingWebhook_Config() {}

func (*OutgoingWebhook_MicrosoftTeams) isOutgoingWebhook_Config() {}

func (*OutgoingWebhook_Jira) isOutgoingWebhook_Config() {}

func (*OutgoingWebhook_Opsgenie) isOutgoingWebhook_Config() {}

func (*OutgoingWebhook_Demisto) isOutgoingWebhook_Config() {}

func (*OutgoingWebhook_AwsEventBridge) isOutgoingWebhook_Config() {}

func (*OutgoingWebhook_IbmEventNotifications) isOutgoingWebhook_Config() {}

func (*OutgoingWebhook_MsTeamsWorkflow) isOutgoingWebhook_Config() {}

type OutgoingWebhookInputData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type WebhookType             `protobuf:"varint,1,opt,name=type,proto3,enum=com.coralogix.outgoing_webhooks.v1.WebhookType" json:"type,omitempty"`
	Name *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url  *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	// Types that are assignable to Config:
	//
	//	*OutgoingWebhookInputData_GenericWebhook
	//	*OutgoingWebhookInputData_Slack
	//	*OutgoingWebhookInputData_PagerDuty
	//	*OutgoingWebhookInputData_SendLog
	//	*OutgoingWebhookInputData_EmailGroup
	//	*OutgoingWebhookInputData_MicrosoftTeams
	//	*OutgoingWebhookInputData_Jira
	//	*OutgoingWebhookInputData_Opsgenie
	//	*OutgoingWebhookInputData_Demisto
	//	*OutgoingWebhookInputData_AwsEventBridge
	//	*OutgoingWebhookInputData_IbmEventNotifications
	//	*OutgoingWebhookInputData_MsTeamsWorkflow
	Config isOutgoingWebhookInputData_Config `protobuf_oneof:"config"`
}

func (x *OutgoingWebhookInputData) Reset() {
	*x = OutgoingWebhookInputData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutgoingWebhookInputData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutgoingWebhookInputData) ProtoMessage() {}

func (x *OutgoingWebhookInputData) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutgoingWebhookInputData.ProtoReflect.Descriptor instead.
func (*OutgoingWebhookInputData) Descriptor() ([]byte, []int) {
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescGZIP(), []int{13}
}

func (x *OutgoingWebhookInputData) GetType() WebhookType {
	if x != nil {
		return x.Type
	}
	return WebhookType_UNKNOWN
}

func (x *OutgoingWebhookInputData) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *OutgoingWebhookInputData) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

func (m *OutgoingWebhookInputData) GetConfig() isOutgoingWebhookInputData_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *OutgoingWebhookInputData) GetGenericWebhook() *GenericWebhookConfig {
	if x, ok := x.GetConfig().(*OutgoingWebhookInputData_GenericWebhook); ok {
		return x.GenericWebhook
	}
	return nil
}

func (x *OutgoingWebhookInputData) GetSlack() *SlackConfig {
	if x, ok := x.GetConfig().(*OutgoingWebhookInputData_Slack); ok {
		return x.Slack
	}
	return nil
}

func (x *OutgoingWebhookInputData) GetPagerDuty() *PagerDutyConfig {
	if x, ok := x.GetConfig().(*OutgoingWebhookInputData_PagerDuty); ok {
		return x.PagerDuty
	}
	return nil
}

func (x *OutgoingWebhookInputData) GetSendLog() *SendLogConfig {
	if x, ok := x.GetConfig().(*OutgoingWebhookInputData_SendLog); ok {
		return x.SendLog
	}
	return nil
}

func (x *OutgoingWebhookInputData) GetEmailGroup() *EmailGroupConfig {
	if x, ok := x.GetConfig().(*OutgoingWebhookInputData_EmailGroup); ok {
		return x.EmailGroup
	}
	return nil
}

func (x *OutgoingWebhookInputData) GetMicrosoftTeams() *MicrosoftTeamsConfig {
	if x, ok := x.GetConfig().(*OutgoingWebhookInputData_MicrosoftTeams); ok {
		return x.MicrosoftTeams
	}
	return nil
}

func (x *OutgoingWebhookInputData) GetJira() *JiraConfig {
	if x, ok := x.GetConfig().(*OutgoingWebhookInputData_Jira); ok {
		return x.Jira
	}
	return nil
}

func (x *OutgoingWebhookInputData) GetOpsgenie() *OpsgenieConfig {
	if x, ok := x.GetConfig().(*OutgoingWebhookInputData_Opsgenie); ok {
		return x.Opsgenie
	}
	return nil
}

func (x *OutgoingWebhookInputData) GetDemisto() *DemistoConfig {
	if x, ok := x.GetConfig().(*OutgoingWebhookInputData_Demisto); ok {
		return x.Demisto
	}
	return nil
}

func (x *OutgoingWebhookInputData) GetAwsEventBridge() *AwsEventBridgeConfig {
	if x, ok := x.GetConfig().(*OutgoingWebhookInputData_AwsEventBridge); ok {
		return x.AwsEventBridge
	}
	return nil
}

func (x *OutgoingWebhookInputData) GetIbmEventNotifications() *IbmEventNotificationsConfig {
	if x, ok := x.GetConfig().(*OutgoingWebhookInputData_IbmEventNotifications); ok {
		return x.IbmEventNotifications
	}
	return nil
}

func (x *OutgoingWebhookInputData) GetMsTeamsWorkflow() *MSTeamsWorkflowConfig {
	if x, ok := x.GetConfig().(*OutgoingWebhookInputData_MsTeamsWorkflow); ok {
		return x.MsTeamsWorkflow
	}
	return nil
}

type isOutgoingWebhookInputData_Config interface {
	isOutgoingWebhookInputData_Config()
}

type OutgoingWebhookInputData_GenericWebhook struct {
	GenericWebhook *GenericWebhookConfig `protobuf:"bytes,100,opt,name=generic_webhook,json=genericWebhook,proto3,oneof"`
}

type OutgoingWebhookInputData_Slack struct {
	Slack *SlackConfig `protobuf:"bytes,101,opt,name=slack,proto3,oneof"`
}

type OutgoingWebhookInputData_PagerDuty struct {
	PagerDuty *PagerDutyConfig `protobuf:"bytes,102,opt,name=pager_duty,json=pagerDuty,proto3,oneof"`
}

type OutgoingWebhookInputData_SendLog struct {
	SendLog *SendLogConfig `protobuf:"bytes,103,opt,name=send_log,json=sendLog,proto3,oneof"`
}

type OutgoingWebhookInputData_EmailGroup struct {
	EmailGroup *EmailGroupConfig `protobuf:"bytes,104,opt,name=email_group,json=emailGroup,proto3,oneof"`
}

type OutgoingWebhookInputData_MicrosoftTeams struct {
	MicrosoftTeams *MicrosoftTeamsConfig `protobuf:"bytes,105,opt,name=microsoft_teams,json=microsoftTeams,proto3,oneof"`
}

type OutgoingWebhookInputData_Jira struct {
	Jira *JiraConfig `protobuf:"bytes,106,opt,name=jira,proto3,oneof"`
}

type OutgoingWebhookInputData_Opsgenie struct {
	Opsgenie *OpsgenieConfig `protobuf:"bytes,107,opt,name=opsgenie,proto3,oneof"`
}

type OutgoingWebhookInputData_Demisto struct {
	Demisto *DemistoConfig `protobuf:"bytes,108,opt,name=demisto,proto3,oneof"`
}

type OutgoingWebhookInputData_AwsEventBridge struct {
	AwsEventBridge *AwsEventBridgeConfig `protobuf:"bytes,109,opt,name=aws_event_bridge,json=awsEventBridge,proto3,oneof"`
}

type OutgoingWebhookInputData_IbmEventNotifications struct {
	IbmEventNotifications *IbmEventNotificationsConfig `protobuf:"bytes,110,opt,name=ibm_event_notifications,json=ibmEventNotifications,proto3,oneof"`
}

type OutgoingWebhookInputData_MsTeamsWorkflow struct {
	MsTeamsWorkflow *MSTeamsWorkflowConfig `protobuf:"bytes,111,opt,name=ms_teams_workflow,json=msTeamsWorkflow,proto3,oneof"`
}

func (*OutgoingWebhookInputData_GenericWebhook) isOutgoingWebhookInputData_Config() {}

func (*OutgoingWebhookInputData_Slack) isOutgoingWebhookInputData_Config() {}

func (*OutgoingWebhookInputData_PagerDuty) isOutgoingWebhookInputData_Config() {}

func (*OutgoingWebhookInputData_SendLog) isOutgoingWebhookInputData_Config() {}

func (*OutgoingWebhookInputData_EmailGroup) isOutgoingWebhookInputData_Config() {}

func (*OutgoingWebhookInputData_MicrosoftTeams) isOutgoingWebhookInputData_Config() {}

func (*OutgoingWebhookInputData_Jira) isOutgoingWebhookInputData_Config() {}

func (*OutgoingWebhookInputData_Opsgenie) isOutgoingWebhookInputData_Config() {}

func (*OutgoingWebhookInputData_Demisto) isOutgoingWebhookInputData_Config() {}

func (*OutgoingWebhookInputData_AwsEventBridge) isOutgoingWebhookInputData_Config() {}

func (*OutgoingWebhookInputData_IbmEventNotifications) isOutgoingWebhookInputData_Config() {}

func (*OutgoingWebhookInputData_MsTeamsWorkflow) isOutgoingWebhookInputData_Config() {}

type OutgoingWebhookSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url        *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	CreatedAt  *timestamppb.Timestamp  `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  *timestamppb.Timestamp  `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ExternalId *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
}

func (x *OutgoingWebhookSummary) Reset() {
	*x = OutgoingWebhookSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutgoingWebhookSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutgoingWebhookSummary) ProtoMessage() {}

func (x *OutgoingWebhookSummary) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutgoingWebhookSummary.ProtoReflect.Descriptor instead.
func (*OutgoingWebhookSummary) Descriptor() ([]byte, []int) {
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescGZIP(), []int{14}
}

func (x *OutgoingWebhookSummary) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OutgoingWebhookSummary) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *OutgoingWebhookSummary) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *OutgoingWebhookSummary) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OutgoingWebhookSummary) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *OutgoingWebhookSummary) GetExternalId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ExternalId
	}
	return nil
}

type OutgoingWebhookExtendedSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type       WebhookType             `protobuf:"varint,2,opt,name=type,proto3,enum=com.coralogix.outgoing_webhooks.v1.WebhookType" json:"type,omitempty"`
	Name       *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Url        *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	CreatedAt  *timestamppb.Timestamp  `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  *timestamppb.Timestamp  `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ExternalId *wrapperspb.UInt32Value `protobuf:"bytes,7,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
}

func (x *OutgoingWebhookExtendedSummary) Reset() {
	*x = OutgoingWebhookExtendedSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutgoingWebhookExtendedSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutgoingWebhookExtendedSummary) ProtoMessage() {}

func (x *OutgoingWebhookExtendedSummary) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutgoingWebhookExtendedSummary.ProtoReflect.Descriptor instead.
func (*OutgoingWebhookExtendedSummary) Descriptor() ([]byte, []int) {
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescGZIP(), []int{15}
}

func (x *OutgoingWebhookExtendedSummary) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OutgoingWebhookExtendedSummary) GetType() WebhookType {
	if x != nil {
		return x.Type
	}
	return WebhookType_UNKNOWN
}

func (x *OutgoingWebhookExtendedSummary) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *OutgoingWebhookExtendedSummary) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *OutgoingWebhookExtendedSummary) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OutgoingWebhookExtendedSummary) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *OutgoingWebhookExtendedSummary) GetExternalId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ExternalId
	}
	return nil
}

type OutgoingWebhookDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  WebhookType             `protobuf:"varint,1,opt,name=type,proto3,enum=com.coralogix.outgoing_webhooks.v1.WebhookType" json:"type,omitempty"`
	Label *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *OutgoingWebhookDetails) Reset() {
	*x = OutgoingWebhookDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutgoingWebhookDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutgoingWebhookDetails) ProtoMessage() {}

func (x *OutgoingWebhookDetails) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutgoingWebhookDetails.ProtoReflect.Descriptor instead.
func (*OutgoingWebhookDetails) Descriptor() ([]byte, []int) {
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescGZIP(), []int{16}
}

func (x *OutgoingWebhookDetails) GetType() WebhookType {
	if x != nil {
		return x.Type
	}
	return WebhookType_UNKNOWN
}

func (x *OutgoingWebhookDetails) GetLabel() *wrapperspb.StringValue {
	if x != nil {
		return x.Label
	}
	return nil
}

type OutboundWebhookSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type       WebhookType             `protobuf:"varint,2,opt,name=type,proto3,enum=com.coralogix.outgoing_webhooks.v1.WebhookType" json:"type,omitempty"`
	Name       *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt  *timestamppb.Timestamp  `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  *timestamppb.Timestamp  `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ExternalId *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
}

func (x *OutboundWebhookSummary) Reset() {
	*x = OutboundWebhookSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutboundWebhookSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutboundWebhookSummary) ProtoMessage() {}

func (x *OutboundWebhookSummary) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutboundWebhookSummary.ProtoReflect.Descriptor instead.
func (*OutboundWebhookSummary) Descriptor() ([]byte, []int) {
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescGZIP(), []int{17}
}

func (x *OutboundWebhookSummary) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OutboundWebhookSummary) GetType() WebhookType {
	if x != nil {
		return x.Type
	}
	return WebhookType_UNKNOWN
}

func (x *OutboundWebhookSummary) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *OutboundWebhookSummary) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OutboundWebhookSummary) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *OutboundWebhookSummary) GetExternalId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ExternalId
	}
	return nil
}

type SlackConfig_Digest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     SlackConfig_DigestType `protobuf:"varint,1,opt,name=type,proto3,enum=com.coralogix.outgoing_webhooks.v1.SlackConfig_DigestType" json:"type,omitempty"`
	IsActive *wrapperspb.BoolValue  `protobuf:"bytes,2,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *SlackConfig_Digest) Reset() {
	*x = SlackConfig_Digest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackConfig_Digest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackConfig_Digest) ProtoMessage() {}

func (x *SlackConfig_Digest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackConfig_Digest.ProtoReflect.Descriptor instead.
func (*SlackConfig_Digest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescGZIP(), []int{1, 0}
}

func (x *SlackConfig_Digest) GetType() SlackConfig_DigestType {
	if x != nil {
		return x.Type
	}
	return SlackConfig_UNKNOWN
}

func (x *SlackConfig_Digest) GetIsActive() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsActive
	}
	return nil
}

type SlackConfig_Attachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     SlackConfig_AttachmentType `protobuf:"varint,1,opt,name=type,proto3,enum=com.coralogix.outgoing_webhooks.v1.SlackConfig_AttachmentType" json:"type,omitempty"`
	IsActive *wrapperspb.BoolValue      `protobuf:"bytes,2,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *SlackConfig_Attachment) Reset() {
	*x = SlackConfig_Attachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackConfig_Attachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackConfig_Attachment) ProtoMessage() {}

func (x *SlackConfig_Attachment) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackConfig_Attachment.ProtoReflect.Descriptor instead.
func (*SlackConfig_Attachment) Descriptor() ([]byte, []int) {
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescGZIP(), []int{1, 1}
}

func (x *SlackConfig_Attachment) GetType() SlackConfig_AttachmentType {
	if x != nil {
		return x.Type
	}
	return SlackConfig_EMPTY
}

func (x *SlackConfig_Attachment) GetIsActive() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsActive
	}
	return nil
}

var File_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto protoreflect.FileDescriptor

var file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDesc = []byte{
	0x0a, 0x39, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x6f, 0x75, 0x74, 0x67, 0x6f,
	0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb1, 0x03, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x5b, 0x0a, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x6f, 0x75, 0x74, 0x67,
	0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x5f, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69,
	0x6e, 0x67, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x35, 0x0a,
	0x0a, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x50,
	0x55, 0x54, 0x10, 0x03, 0x22, 0x9a, 0x05, 0x0a, 0x0b, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x50, 0x0a, 0x07, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x52, 0x07, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x6f, 0x75, 0x74, 0x67,
	0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x1a, 0x91, 0x01, 0x0a, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12,
	0x4e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x6f, 0x75,
	0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x37, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x99, 0x01, 0x0a, 0x0a, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x22, 0x6f, 0x0a, 0x0a, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x52, 0x49,
	0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x47, 0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x4e, 0x4f, 0x4d, 0x41, 0x4c, 0x49, 0x45, 0x53, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x50, 0x49, 0x4b, 0x45, 0x5f, 0x41, 0x4e, 0x4f, 0x4d, 0x41, 0x4c,
	0x49, 0x45, 0x53, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x53,
	0x41, 0x47, 0x45, 0x10, 0x04, 0x22, 0x3a, 0x0a, 0x0e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x50, 0x54, 0x59,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x53, 0x4e, 0x41,
	0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x47, 0x53, 0x10,
	0x02, 0x22, 0x50, 0x0a, 0x0f, 0x50, 0x61, 0x67, 0x65, 0x72, 0x44, 0x75, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4b, 0x65, 0x79, 0x22, 0x79, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x59,
	0x0a, 0x10, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x45, 0x0a, 0x0f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x4d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x17, 0x0a, 0x15, 0x4d, 0x53, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xba, 0x01, 0x0a, 0x0a, 0x4a,
	0x69, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x70, 0x69,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x70, 0x69, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x3d, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x10, 0x0a, 0x0e, 0x4f, 0x70, 0x73, 0x67, 0x65,
	0x6e, 0x69, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x79, 0x0a, 0x0d, 0x44, 0x65, 0x6d,
	0x69, 0x73, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0xcc, 0x02, 0x0a, 0x14, 0x41, 0x77, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a,
	0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x75, 0x73, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x73, 0x41, 0x72, 0x6e, 0x12,
	0x34, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x6f, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x22, 0xb7, 0x02, 0x0a, 0x1b, 0x49, 0x62, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x63, 0x0a, 0x1f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3d,
	0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe8, 0x0b,
	0x0a, 0x0f, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x6f, 0x75,
	0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x0b,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x0f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x12, 0x47, 0x0a, 0x05, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x05, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x12, 0x54, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x64, 0x75, 0x74, 0x79, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x6f, 0x75,
	0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x44, 0x75, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x72, 0x44, 0x75, 0x74, 0x79, 0x12,
	0x4e, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x67, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x12,
	0x57, 0x0a, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x68,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x63, 0x0a, 0x0f, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x69, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x44, 0x0a,
	0x04, 0x6a, 0x69, 0x72, 0x61, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x6f, 0x75, 0x74, 0x67,
	0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4a, 0x69, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x04, 0x6a,
	0x69, 0x72, 0x61, 0x12, 0x50, 0x0a, 0x08, 0x6f, 0x70, 0x73, 0x67, 0x65, 0x6e, 0x69, 0x65, 0x18,
	0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x73, 0x67, 0x65,
	0x6e, 0x69, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x73,
	0x67, 0x65, 0x6e, 0x69, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x64, 0x65, 0x6d, 0x69, 0x73, 0x74, 0x6f,
	0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6d, 0x69,
	0x73, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x6d,
	0x69, 0x73, 0x74, 0x6f, 0x12, 0x64, 0x0a, 0x10, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x6f,
	0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x77, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x79, 0x0a, 0x17, 0x69, 0x62,
	0x6d, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x6f, 0x75, 0x74, 0x67,
	0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x62, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x15,
	0x69, 0x62, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x67, 0x0a, 0x11, 0x6d, 0x73, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x53, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0f, 0x6d,
	0x73, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x08,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x8e, 0x0a, 0x0a, 0x18, 0x4f, 0x75, 0x74,
	0x67, 0x6f, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x63, 0x0a, 0x0f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x05, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x12, 0x54, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x64, 0x75, 0x74, 0x79, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x6f,
	0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x44, 0x75, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x72, 0x44, 0x75, 0x74, 0x79,
	0x12, 0x4e, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67,
	0x12, 0x57, 0x0a, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x63, 0x0a, 0x0f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x69, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x44,
	0x0a, 0x04, 0x6a, 0x69, 0x72, 0x61, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x6f, 0x75, 0x74,
	0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4a, 0x69, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x04,
	0x6a, 0x69, 0x72, 0x61, 0x12, 0x50, 0x0a, 0x08, 0x6f, 0x70, 0x73, 0x67, 0x65, 0x6e, 0x69, 0x65,
	0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x73, 0x67,
	0x65, 0x6e, 0x69, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70,
	0x73, 0x67, 0x65, 0x6e, 0x69, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x64, 0x65, 0x6d, 0x69, 0x73, 0x74,
	0x6f, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67,
	0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6d,
	0x69, 0x73, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65,
	0x6d, 0x69, 0x73, 0x74, 0x6f, 0x12, 0x64, 0x0a, 0x10, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x77, 0x73,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x79, 0x0a, 0x17, 0x69,
	0x62, 0x6d, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x6f, 0x75, 0x74,
	0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x62, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52,
	0x15, 0x69, 0x62, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x67, 0x0a, 0x11, 0x6d, 0x73, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x6f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x53, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0f,
	0x6d, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42,
	0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xdd, 0x02, 0x0a, 0x16, 0x4f, 0x75,
	0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x22, 0xaa, 0x03, 0x0a, 0x1e, 0x4f, 0x75,
	0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e,
	0x67, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x16, 0x4f, 0x75, 0x74, 0x67, 0x6f,
	0x69, 0x6e, 0x67, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xf2, 0x02, 0x0a, 0x16, 0x4f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x3d, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x2a,
	0xe4, 0x01, 0x0a, 0x0b, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4c, 0x41,
	0x43, 0x4b, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x41, 0x47, 0x45, 0x52, 0x44, 0x55, 0x54,
	0x59, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x10,
	0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x4f, 0x46, 0x54, 0x5f,
	0x54, 0x45, 0x41, 0x4d, 0x53, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x49, 0x52, 0x41, 0x10,
	0x07, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x53, 0x47, 0x45, 0x4e, 0x49, 0x45, 0x10, 0x08, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4d, 0x49, 0x53, 0x54, 0x4f, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10,
	0x41, 0x57, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45,
	0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x42, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x0b, 0x12,
	0x15, 0x0a, 0x11, 0x4d, 0x53, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x53, 0x5f, 0x57, 0x4f, 0x52, 0x4b,
	0x46, 0x4c, 0x4f, 0x57, 0x10, 0x0c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescOnce sync.Once
	file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescData = file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDesc
)

func file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescGZIP() []byte {
	file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescOnce.Do(func() {
		file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescData)
	})
	return file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDescData
}

var file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_goTypes = []any{
	(WebhookType)(0),                       // 0: com.coralogix.outgoing_webhooks.v1.WebhookType
	(GenericWebhookConfig_MethodType)(0),   // 1: com.coralogix.outgoing_webhooks.v1.GenericWebhookConfig.MethodType
	(SlackConfig_DigestType)(0),            // 2: com.coralogix.outgoing_webhooks.v1.SlackConfig.DigestType
	(SlackConfig_AttachmentType)(0),        // 3: com.coralogix.outgoing_webhooks.v1.SlackConfig.AttachmentType
	(*GenericWebhookConfig)(nil),           // 4: com.coralogix.outgoing_webhooks.v1.GenericWebhookConfig
	(*SlackConfig)(nil),                    // 5: com.coralogix.outgoing_webhooks.v1.SlackConfig
	(*PagerDutyConfig)(nil),                // 6: com.coralogix.outgoing_webhooks.v1.PagerDutyConfig
	(*SendLogConfig)(nil),                  // 7: com.coralogix.outgoing_webhooks.v1.SendLogConfig
	(*EmailGroupConfig)(nil),               // 8: com.coralogix.outgoing_webhooks.v1.EmailGroupConfig
	(*MicrosoftTeamsConfig)(nil),           // 9: com.coralogix.outgoing_webhooks.v1.MicrosoftTeamsConfig
	(*MSTeamsWorkflowConfig)(nil),          // 10: com.coralogix.outgoing_webhooks.v1.MSTeamsWorkflowConfig
	(*JiraConfig)(nil),                     // 11: com.coralogix.outgoing_webhooks.v1.JiraConfig
	(*OpsgenieConfig)(nil),                 // 12: com.coralogix.outgoing_webhooks.v1.OpsgenieConfig
	(*DemistoConfig)(nil),                  // 13: com.coralogix.outgoing_webhooks.v1.DemistoConfig
	(*AwsEventBridgeConfig)(nil),           // 14: com.coralogix.outgoing_webhooks.v1.AwsEventBridgeConfig
	(*IbmEventNotificationsConfig)(nil),    // 15: com.coralogix.outgoing_webhooks.v1.IbmEventNotificationsConfig
	(*OutgoingWebhook)(nil),                // 16: com.coralogix.outgoing_webhooks.v1.OutgoingWebhook
	(*OutgoingWebhookInputData)(nil),       // 17: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookInputData
	(*OutgoingWebhookSummary)(nil),         // 18: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookSummary
	(*OutgoingWebhookExtendedSummary)(nil), // 19: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookExtendedSummary
	(*OutgoingWebhookDetails)(nil),         // 20: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookDetails
	(*OutboundWebhookSummary)(nil),         // 21: com.coralogix.outgoing_webhooks.v1.OutboundWebhookSummary
	nil,                                    // 22: com.coralogix.outgoing_webhooks.v1.GenericWebhookConfig.HeadersEntry
	(*SlackConfig_Digest)(nil),             // 23: com.coralogix.outgoing_webhooks.v1.SlackConfig.Digest
	(*SlackConfig_Attachment)(nil),         // 24: com.coralogix.outgoing_webhooks.v1.SlackConfig.Attachment
	(*wrapperspb.StringValue)(nil),         // 25: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),          // 26: google.protobuf.Timestamp
	(*wrapperspb.UInt32Value)(nil),         // 27: google.protobuf.UInt32Value
	(*wrapperspb.BoolValue)(nil),           // 28: google.protobuf.BoolValue
}
var file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_depIdxs = []int32{
	25, // 0: com.coralogix.outgoing_webhooks.v1.GenericWebhookConfig.uuid:type_name -> google.protobuf.StringValue
	1,  // 1: com.coralogix.outgoing_webhooks.v1.GenericWebhookConfig.method:type_name -> com.coralogix.outgoing_webhooks.v1.GenericWebhookConfig.MethodType
	22, // 2: com.coralogix.outgoing_webhooks.v1.GenericWebhookConfig.headers:type_name -> com.coralogix.outgoing_webhooks.v1.GenericWebhookConfig.HeadersEntry
	25, // 3: com.coralogix.outgoing_webhooks.v1.GenericWebhookConfig.payload:type_name -> google.protobuf.StringValue
	23, // 4: com.coralogix.outgoing_webhooks.v1.SlackConfig.digests:type_name -> com.coralogix.outgoing_webhooks.v1.SlackConfig.Digest
	24, // 5: com.coralogix.outgoing_webhooks.v1.SlackConfig.attachments:type_name -> com.coralogix.outgoing_webhooks.v1.SlackConfig.Attachment
	25, // 6: com.coralogix.outgoing_webhooks.v1.PagerDutyConfig.service_key:type_name -> google.protobuf.StringValue
	25, // 7: com.coralogix.outgoing_webhooks.v1.SendLogConfig.uuid:type_name -> google.protobuf.StringValue
	25, // 8: com.coralogix.outgoing_webhooks.v1.SendLogConfig.payload:type_name -> google.protobuf.StringValue
	25, // 9: com.coralogix.outgoing_webhooks.v1.EmailGroupConfig.email_addresses:type_name -> google.protobuf.StringValue
	25, // 10: com.coralogix.outgoing_webhooks.v1.JiraConfig.api_token:type_name -> google.protobuf.StringValue
	25, // 11: com.coralogix.outgoing_webhooks.v1.JiraConfig.email:type_name -> google.protobuf.StringValue
	25, // 12: com.coralogix.outgoing_webhooks.v1.JiraConfig.project_key:type_name -> google.protobuf.StringValue
	25, // 13: com.coralogix.outgoing_webhooks.v1.DemistoConfig.uuid:type_name -> google.protobuf.StringValue
	25, // 14: com.coralogix.outgoing_webhooks.v1.DemistoConfig.payload:type_name -> google.protobuf.StringValue
	25, // 15: com.coralogix.outgoing_webhooks.v1.AwsEventBridgeConfig.event_bus_arn:type_name -> google.protobuf.StringValue
	25, // 16: com.coralogix.outgoing_webhooks.v1.AwsEventBridgeConfig.detail:type_name -> google.protobuf.StringValue
	25, // 17: com.coralogix.outgoing_webhooks.v1.AwsEventBridgeConfig.detail_type:type_name -> google.protobuf.StringValue
	25, // 18: com.coralogix.outgoing_webhooks.v1.AwsEventBridgeConfig.source:type_name -> google.protobuf.StringValue
	25, // 19: com.coralogix.outgoing_webhooks.v1.AwsEventBridgeConfig.role_name:type_name -> google.protobuf.StringValue
	25, // 20: com.coralogix.outgoing_webhooks.v1.IbmEventNotificationsConfig.event_notifications_instance_id:type_name -> google.protobuf.StringValue
	25, // 21: com.coralogix.outgoing_webhooks.v1.IbmEventNotificationsConfig.region_id:type_name -> google.protobuf.StringValue
	25, // 22: com.coralogix.outgoing_webhooks.v1.IbmEventNotificationsConfig.source_id:type_name -> google.protobuf.StringValue
	25, // 23: com.coralogix.outgoing_webhooks.v1.IbmEventNotificationsConfig.source_name:type_name -> google.protobuf.StringValue
	25, // 24: com.coralogix.outgoing_webhooks.v1.OutgoingWebhook.id:type_name -> google.protobuf.StringValue
	0,  // 25: com.coralogix.outgoing_webhooks.v1.OutgoingWebhook.type:type_name -> com.coralogix.outgoing_webhooks.v1.WebhookType
	25, // 26: com.coralogix.outgoing_webhooks.v1.OutgoingWebhook.name:type_name -> google.protobuf.StringValue
	25, // 27: com.coralogix.outgoing_webhooks.v1.OutgoingWebhook.url:type_name -> google.protobuf.StringValue
	26, // 28: com.coralogix.outgoing_webhooks.v1.OutgoingWebhook.created_at:type_name -> google.protobuf.Timestamp
	26, // 29: com.coralogix.outgoing_webhooks.v1.OutgoingWebhook.updated_at:type_name -> google.protobuf.Timestamp
	27, // 30: com.coralogix.outgoing_webhooks.v1.OutgoingWebhook.external_id:type_name -> google.protobuf.UInt32Value
	4,  // 31: com.coralogix.outgoing_webhooks.v1.OutgoingWebhook.generic_webhook:type_name -> com.coralogix.outgoing_webhooks.v1.GenericWebhookConfig
	5,  // 32: com.coralogix.outgoing_webhooks.v1.OutgoingWebhook.slack:type_name -> com.coralogix.outgoing_webhooks.v1.SlackConfig
	6,  // 33: com.coralogix.outgoing_webhooks.v1.OutgoingWebhook.pager_duty:type_name -> com.coralogix.outgoing_webhooks.v1.PagerDutyConfig
	7,  // 34: com.coralogix.outgoing_webhooks.v1.OutgoingWebhook.send_log:type_name -> com.coralogix.outgoing_webhooks.v1.SendLogConfig
	8,  // 35: com.coralogix.outgoing_webhooks.v1.OutgoingWebhook.email_group:type_name -> com.coralogix.outgoing_webhooks.v1.EmailGroupConfig
	9,  // 36: com.coralogix.outgoing_webhooks.v1.OutgoingWebhook.microsoft_teams:type_name -> com.coralogix.outgoing_webhooks.v1.MicrosoftTeamsConfig
	11, // 37: com.coralogix.outgoing_webhooks.v1.OutgoingWebhook.jira:type_name -> com.coralogix.outgoing_webhooks.v1.JiraConfig
	12, // 38: com.coralogix.outgoing_webhooks.v1.OutgoingWebhook.opsgenie:type_name -> com.coralogix.outgoing_webhooks.v1.OpsgenieConfig
	13, // 39: com.coralogix.outgoing_webhooks.v1.OutgoingWebhook.demisto:type_name -> com.coralogix.outgoing_webhooks.v1.DemistoConfig
	14, // 40: com.coralogix.outgoing_webhooks.v1.OutgoingWebhook.aws_event_bridge:type_name -> com.coralogix.outgoing_webhooks.v1.AwsEventBridgeConfig
	15, // 41: com.coralogix.outgoing_webhooks.v1.OutgoingWebhook.ibm_event_notifications:type_name -> com.coralogix.outgoing_webhooks.v1.IbmEventNotificationsConfig
	10, // 42: com.coralogix.outgoing_webhooks.v1.OutgoingWebhook.ms_teams_workflow:type_name -> com.coralogix.outgoing_webhooks.v1.MSTeamsWorkflowConfig
	0,  // 43: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookInputData.type:type_name -> com.coralogix.outgoing_webhooks.v1.WebhookType
	25, // 44: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookInputData.name:type_name -> google.protobuf.StringValue
	25, // 45: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookInputData.url:type_name -> google.protobuf.StringValue
	4,  // 46: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookInputData.generic_webhook:type_name -> com.coralogix.outgoing_webhooks.v1.GenericWebhookConfig
	5,  // 47: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookInputData.slack:type_name -> com.coralogix.outgoing_webhooks.v1.SlackConfig
	6,  // 48: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookInputData.pager_duty:type_name -> com.coralogix.outgoing_webhooks.v1.PagerDutyConfig
	7,  // 49: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookInputData.send_log:type_name -> com.coralogix.outgoing_webhooks.v1.SendLogConfig
	8,  // 50: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookInputData.email_group:type_name -> com.coralogix.outgoing_webhooks.v1.EmailGroupConfig
	9,  // 51: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookInputData.microsoft_teams:type_name -> com.coralogix.outgoing_webhooks.v1.MicrosoftTeamsConfig
	11, // 52: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookInputData.jira:type_name -> com.coralogix.outgoing_webhooks.v1.JiraConfig
	12, // 53: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookInputData.opsgenie:type_name -> com.coralogix.outgoing_webhooks.v1.OpsgenieConfig
	13, // 54: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookInputData.demisto:type_name -> com.coralogix.outgoing_webhooks.v1.DemistoConfig
	14, // 55: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookInputData.aws_event_bridge:type_name -> com.coralogix.outgoing_webhooks.v1.AwsEventBridgeConfig
	15, // 56: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookInputData.ibm_event_notifications:type_name -> com.coralogix.outgoing_webhooks.v1.IbmEventNotificationsConfig
	10, // 57: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookInputData.ms_teams_workflow:type_name -> com.coralogix.outgoing_webhooks.v1.MSTeamsWorkflowConfig
	25, // 58: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookSummary.id:type_name -> google.protobuf.StringValue
	25, // 59: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookSummary.name:type_name -> google.protobuf.StringValue
	25, // 60: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookSummary.url:type_name -> google.protobuf.StringValue
	26, // 61: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookSummary.created_at:type_name -> google.protobuf.Timestamp
	26, // 62: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookSummary.updated_at:type_name -> google.protobuf.Timestamp
	27, // 63: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookSummary.external_id:type_name -> google.protobuf.UInt32Value
	25, // 64: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookExtendedSummary.id:type_name -> google.protobuf.StringValue
	0,  // 65: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookExtendedSummary.type:type_name -> com.coralogix.outgoing_webhooks.v1.WebhookType
	25, // 66: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookExtendedSummary.name:type_name -> google.protobuf.StringValue
	25, // 67: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookExtendedSummary.url:type_name -> google.protobuf.StringValue
	26, // 68: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookExtendedSummary.created_at:type_name -> google.protobuf.Timestamp
	26, // 69: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookExtendedSummary.updated_at:type_name -> google.protobuf.Timestamp
	27, // 70: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookExtendedSummary.external_id:type_name -> google.protobuf.UInt32Value
	0,  // 71: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookDetails.type:type_name -> com.coralogix.outgoing_webhooks.v1.WebhookType
	25, // 72: com.coralogix.outgoing_webhooks.v1.OutgoingWebhookDetails.label:type_name -> google.protobuf.StringValue
	25, // 73: com.coralogix.outgoing_webhooks.v1.OutboundWebhookSummary.id:type_name -> google.protobuf.StringValue
	0,  // 74: com.coralogix.outgoing_webhooks.v1.OutboundWebhookSummary.type:type_name -> com.coralogix.outgoing_webhooks.v1.WebhookType
	25, // 75: com.coralogix.outgoing_webhooks.v1.OutboundWebhookSummary.name:type_name -> google.protobuf.StringValue
	26, // 76: com.coralogix.outgoing_webhooks.v1.OutboundWebhookSummary.created_at:type_name -> google.protobuf.Timestamp
	26, // 77: com.coralogix.outgoing_webhooks.v1.OutboundWebhookSummary.updated_at:type_name -> google.protobuf.Timestamp
	27, // 78: com.coralogix.outgoing_webhooks.v1.OutboundWebhookSummary.external_id:type_name -> google.protobuf.UInt32Value
	2,  // 79: com.coralogix.outgoing_webhooks.v1.SlackConfig.Digest.type:type_name -> com.coralogix.outgoing_webhooks.v1.SlackConfig.DigestType
	28, // 80: com.coralogix.outgoing_webhooks.v1.SlackConfig.Digest.is_active:type_name -> google.protobuf.BoolValue
	3,  // 81: com.coralogix.outgoing_webhooks.v1.SlackConfig.Attachment.type:type_name -> com.coralogix.outgoing_webhooks.v1.SlackConfig.AttachmentType
	28, // 82: com.coralogix.outgoing_webhooks.v1.SlackConfig.Attachment.is_active:type_name -> google.protobuf.BoolValue
	83, // [83:83] is the sub-list for method output_type
	83, // [83:83] is the sub-list for method input_type
	83, // [83:83] is the sub-list for extension type_name
	83, // [83:83] is the sub-list for extension extendee
	0,  // [0:83] is the sub-list for field type_name
}

func init() { file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_init() }
func file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_init() {
	if File_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GenericWebhookConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SlackConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PagerDutyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SendLogConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*EmailGroupConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*MicrosoftTeamsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*MSTeamsWorkflowConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*JiraConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*OpsgenieConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*DemistoConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*AwsEventBridgeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*IbmEventNotificationsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*OutgoingWebhook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*OutgoingWebhookInputData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*OutgoingWebhookSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*OutgoingWebhookExtendedSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*OutgoingWebhookDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*OutboundWebhookSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*SlackConfig_Digest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*SlackConfig_Attachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[12].OneofWrappers = []any{
		(*OutgoingWebhook_GenericWebhook)(nil),
		(*OutgoingWebhook_Slack)(nil),
		(*OutgoingWebhook_PagerDuty)(nil),
		(*OutgoingWebhook_SendLog)(nil),
		(*OutgoingWebhook_EmailGroup)(nil),
		(*OutgoingWebhook_MicrosoftTeams)(nil),
		(*OutgoingWebhook_Jira)(nil),
		(*OutgoingWebhook_Opsgenie)(nil),
		(*OutgoingWebhook_Demisto)(nil),
		(*OutgoingWebhook_AwsEventBridge)(nil),
		(*OutgoingWebhook_IbmEventNotifications)(nil),
		(*OutgoingWebhook_MsTeamsWorkflow)(nil),
	}
	file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes[13].OneofWrappers = []any{
		(*OutgoingWebhookInputData_GenericWebhook)(nil),
		(*OutgoingWebhookInputData_Slack)(nil),
		(*OutgoingWebhookInputData_PagerDuty)(nil),
		(*OutgoingWebhookInputData_SendLog)(nil),
		(*OutgoingWebhookInputData_EmailGroup)(nil),
		(*OutgoingWebhookInputData_MicrosoftTeams)(nil),
		(*OutgoingWebhookInputData_Jira)(nil),
		(*OutgoingWebhookInputData_Opsgenie)(nil),
		(*OutgoingWebhookInputData_Demisto)(nil),
		(*OutgoingWebhookInputData_AwsEventBridge)(nil),
		(*OutgoingWebhookInputData_IbmEventNotifications)(nil),
		(*OutgoingWebhookInputData_MsTeamsWorkflow)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_goTypes,
		DependencyIndexes: file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_depIdxs,
		EnumInfos:         file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_enumTypes,
		MessageInfos:      file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_msgTypes,
	}.Build()
	File_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto = out.File
	file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_rawDesc = nil
	file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_goTypes = nil
	file_com_coralogix_outgoing_webhooks_v1_outgoing_webhook_proto_depIdxs = nil
}
