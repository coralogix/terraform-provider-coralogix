// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: com/coralogix/outgoing_webhooks/v1/outgoing_webhook_service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OutgoingWebhooksServiceClient is the client API for OutgoingWebhooksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OutgoingWebhooksServiceClient interface {
	ListOutgoingWebhookTypes(ctx context.Context, in *ListOutgoingWebhookTypesRequest, opts ...grpc.CallOption) (*ListOutgoingWebhookTypesResponse, error)
	GetOutgoingWebhookTypeDetails(ctx context.Context, in *GetOutgoingWebhookTypeDetailsRequest, opts ...grpc.CallOption) (*GetOutgoingWebhookTypeDetailsResponse, error)
	ListOutgoingWebhooks(ctx context.Context, in *ListOutgoingWebhooksRequest, opts ...grpc.CallOption) (*ListOutgoingWebhooksResponse, error)
	ListAllOutgoingWebhooks(ctx context.Context, in *ListAllOutgoingWebhooksRequest, opts ...grpc.CallOption) (*ListAllOutgoingWebhooksResponse, error)
	GetOutgoingWebhook(ctx context.Context, in *GetOutgoingWebhookRequest, opts ...grpc.CallOption) (*GetOutgoingWebhookResponse, error)
	CreateOutgoingWebhook(ctx context.Context, in *CreateOutgoingWebhookRequest, opts ...grpc.CallOption) (*CreateOutgoingWebhookResponse, error)
	UpdateOutgoingWebhook(ctx context.Context, in *UpdateOutgoingWebhookRequest, opts ...grpc.CallOption) (*UpdateOutgoingWebhookResponse, error)
	DeleteOutgoingWebhook(ctx context.Context, in *DeleteOutgoingWebhookRequest, opts ...grpc.CallOption) (*DeleteOutgoingWebhookResponse, error)
	TestOutgoingWebhook(ctx context.Context, in *TestOutgoingWebhookRequest, opts ...grpc.CallOption) (*TestOutgoingWebhookResponse, error)
	TestExistingOutgoingWebhook(ctx context.Context, in *TestExistingOutgoingWebhookRequest, opts ...grpc.CallOption) (*TestOutgoingWebhookResponse, error)
	ListIbmEventNotificationsInstances(ctx context.Context, in *ListIbmEventNotificationsInstancesRequest, opts ...grpc.CallOption) (*ListIbmEventNotificationsInstancesResponse, error)
}

type outgoingWebhooksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOutgoingWebhooksServiceClient(cc grpc.ClientConnInterface) OutgoingWebhooksServiceClient {
	return &outgoingWebhooksServiceClient{cc}
}

func (c *outgoingWebhooksServiceClient) ListOutgoingWebhookTypes(ctx context.Context, in *ListOutgoingWebhookTypesRequest, opts ...grpc.CallOption) (*ListOutgoingWebhookTypesResponse, error) {
	out := new(ListOutgoingWebhookTypesResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.outgoing_webhooks.v1.OutgoingWebhooksService/ListOutgoingWebhookTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outgoingWebhooksServiceClient) GetOutgoingWebhookTypeDetails(ctx context.Context, in *GetOutgoingWebhookTypeDetailsRequest, opts ...grpc.CallOption) (*GetOutgoingWebhookTypeDetailsResponse, error) {
	out := new(GetOutgoingWebhookTypeDetailsResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.outgoing_webhooks.v1.OutgoingWebhooksService/GetOutgoingWebhookTypeDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outgoingWebhooksServiceClient) ListOutgoingWebhooks(ctx context.Context, in *ListOutgoingWebhooksRequest, opts ...grpc.CallOption) (*ListOutgoingWebhooksResponse, error) {
	out := new(ListOutgoingWebhooksResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.outgoing_webhooks.v1.OutgoingWebhooksService/ListOutgoingWebhooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outgoingWebhooksServiceClient) ListAllOutgoingWebhooks(ctx context.Context, in *ListAllOutgoingWebhooksRequest, opts ...grpc.CallOption) (*ListAllOutgoingWebhooksResponse, error) {
	out := new(ListAllOutgoingWebhooksResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.outgoing_webhooks.v1.OutgoingWebhooksService/ListAllOutgoingWebhooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outgoingWebhooksServiceClient) GetOutgoingWebhook(ctx context.Context, in *GetOutgoingWebhookRequest, opts ...grpc.CallOption) (*GetOutgoingWebhookResponse, error) {
	out := new(GetOutgoingWebhookResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.outgoing_webhooks.v1.OutgoingWebhooksService/GetOutgoingWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outgoingWebhooksServiceClient) CreateOutgoingWebhook(ctx context.Context, in *CreateOutgoingWebhookRequest, opts ...grpc.CallOption) (*CreateOutgoingWebhookResponse, error) {
	out := new(CreateOutgoingWebhookResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.outgoing_webhooks.v1.OutgoingWebhooksService/CreateOutgoingWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outgoingWebhooksServiceClient) UpdateOutgoingWebhook(ctx context.Context, in *UpdateOutgoingWebhookRequest, opts ...grpc.CallOption) (*UpdateOutgoingWebhookResponse, error) {
	out := new(UpdateOutgoingWebhookResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.outgoing_webhooks.v1.OutgoingWebhooksService/UpdateOutgoingWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outgoingWebhooksServiceClient) DeleteOutgoingWebhook(ctx context.Context, in *DeleteOutgoingWebhookRequest, opts ...grpc.CallOption) (*DeleteOutgoingWebhookResponse, error) {
	out := new(DeleteOutgoingWebhookResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.outgoing_webhooks.v1.OutgoingWebhooksService/DeleteOutgoingWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outgoingWebhooksServiceClient) TestOutgoingWebhook(ctx context.Context, in *TestOutgoingWebhookRequest, opts ...grpc.CallOption) (*TestOutgoingWebhookResponse, error) {
	out := new(TestOutgoingWebhookResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.outgoing_webhooks.v1.OutgoingWebhooksService/TestOutgoingWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outgoingWebhooksServiceClient) TestExistingOutgoingWebhook(ctx context.Context, in *TestExistingOutgoingWebhookRequest, opts ...grpc.CallOption) (*TestOutgoingWebhookResponse, error) {
	out := new(TestOutgoingWebhookResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.outgoing_webhooks.v1.OutgoingWebhooksService/TestExistingOutgoingWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outgoingWebhooksServiceClient) ListIbmEventNotificationsInstances(ctx context.Context, in *ListIbmEventNotificationsInstancesRequest, opts ...grpc.CallOption) (*ListIbmEventNotificationsInstancesResponse, error) {
	out := new(ListIbmEventNotificationsInstancesResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.outgoing_webhooks.v1.OutgoingWebhooksService/ListIbmEventNotificationsInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OutgoingWebhooksServiceServer is the server API for OutgoingWebhooksService service.
// All implementations must embed UnimplementedOutgoingWebhooksServiceServer
// for forward compatibility
type OutgoingWebhooksServiceServer interface {
	ListOutgoingWebhookTypes(context.Context, *ListOutgoingWebhookTypesRequest) (*ListOutgoingWebhookTypesResponse, error)
	GetOutgoingWebhookTypeDetails(context.Context, *GetOutgoingWebhookTypeDetailsRequest) (*GetOutgoingWebhookTypeDetailsResponse, error)
	ListOutgoingWebhooks(context.Context, *ListOutgoingWebhooksRequest) (*ListOutgoingWebhooksResponse, error)
	ListAllOutgoingWebhooks(context.Context, *ListAllOutgoingWebhooksRequest) (*ListAllOutgoingWebhooksResponse, error)
	GetOutgoingWebhook(context.Context, *GetOutgoingWebhookRequest) (*GetOutgoingWebhookResponse, error)
	CreateOutgoingWebhook(context.Context, *CreateOutgoingWebhookRequest) (*CreateOutgoingWebhookResponse, error)
	UpdateOutgoingWebhook(context.Context, *UpdateOutgoingWebhookRequest) (*UpdateOutgoingWebhookResponse, error)
	DeleteOutgoingWebhook(context.Context, *DeleteOutgoingWebhookRequest) (*DeleteOutgoingWebhookResponse, error)
	TestOutgoingWebhook(context.Context, *TestOutgoingWebhookRequest) (*TestOutgoingWebhookResponse, error)
	TestExistingOutgoingWebhook(context.Context, *TestExistingOutgoingWebhookRequest) (*TestOutgoingWebhookResponse, error)
	ListIbmEventNotificationsInstances(context.Context, *ListIbmEventNotificationsInstancesRequest) (*ListIbmEventNotificationsInstancesResponse, error)
	mustEmbedUnimplementedOutgoingWebhooksServiceServer()
}

// UnimplementedOutgoingWebhooksServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOutgoingWebhooksServiceServer struct {
}

func (UnimplementedOutgoingWebhooksServiceServer) ListOutgoingWebhookTypes(context.Context, *ListOutgoingWebhookTypesRequest) (*ListOutgoingWebhookTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOutgoingWebhookTypes not implemented")
}
func (UnimplementedOutgoingWebhooksServiceServer) GetOutgoingWebhookTypeDetails(context.Context, *GetOutgoingWebhookTypeDetailsRequest) (*GetOutgoingWebhookTypeDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutgoingWebhookTypeDetails not implemented")
}
func (UnimplementedOutgoingWebhooksServiceServer) ListOutgoingWebhooks(context.Context, *ListOutgoingWebhooksRequest) (*ListOutgoingWebhooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOutgoingWebhooks not implemented")
}
func (UnimplementedOutgoingWebhooksServiceServer) ListAllOutgoingWebhooks(context.Context, *ListAllOutgoingWebhooksRequest) (*ListAllOutgoingWebhooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllOutgoingWebhooks not implemented")
}
func (UnimplementedOutgoingWebhooksServiceServer) GetOutgoingWebhook(context.Context, *GetOutgoingWebhookRequest) (*GetOutgoingWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutgoingWebhook not implemented")
}
func (UnimplementedOutgoingWebhooksServiceServer) CreateOutgoingWebhook(context.Context, *CreateOutgoingWebhookRequest) (*CreateOutgoingWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOutgoingWebhook not implemented")
}
func (UnimplementedOutgoingWebhooksServiceServer) UpdateOutgoingWebhook(context.Context, *UpdateOutgoingWebhookRequest) (*UpdateOutgoingWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOutgoingWebhook not implemented")
}
func (UnimplementedOutgoingWebhooksServiceServer) DeleteOutgoingWebhook(context.Context, *DeleteOutgoingWebhookRequest) (*DeleteOutgoingWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOutgoingWebhook not implemented")
}
func (UnimplementedOutgoingWebhooksServiceServer) TestOutgoingWebhook(context.Context, *TestOutgoingWebhookRequest) (*TestOutgoingWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestOutgoingWebhook not implemented")
}
func (UnimplementedOutgoingWebhooksServiceServer) TestExistingOutgoingWebhook(context.Context, *TestExistingOutgoingWebhookRequest) (*TestOutgoingWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestExistingOutgoingWebhook not implemented")
}
func (UnimplementedOutgoingWebhooksServiceServer) ListIbmEventNotificationsInstances(context.Context, *ListIbmEventNotificationsInstancesRequest) (*ListIbmEventNotificationsInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIbmEventNotificationsInstances not implemented")
}
func (UnimplementedOutgoingWebhooksServiceServer) mustEmbedUnimplementedOutgoingWebhooksServiceServer() {
}

// UnsafeOutgoingWebhooksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OutgoingWebhooksServiceServer will
// result in compilation errors.
type UnsafeOutgoingWebhooksServiceServer interface {
	mustEmbedUnimplementedOutgoingWebhooksServiceServer()
}

func RegisterOutgoingWebhooksServiceServer(s grpc.ServiceRegistrar, srv OutgoingWebhooksServiceServer) {
	s.RegisterService(&OutgoingWebhooksService_ServiceDesc, srv)
}

func _OutgoingWebhooksService_ListOutgoingWebhookTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOutgoingWebhookTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutgoingWebhooksServiceServer).ListOutgoingWebhookTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.outgoing_webhooks.v1.OutgoingWebhooksService/ListOutgoingWebhookTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutgoingWebhooksServiceServer).ListOutgoingWebhookTypes(ctx, req.(*ListOutgoingWebhookTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OutgoingWebhooksService_GetOutgoingWebhookTypeDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOutgoingWebhookTypeDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutgoingWebhooksServiceServer).GetOutgoingWebhookTypeDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.outgoing_webhooks.v1.OutgoingWebhooksService/GetOutgoingWebhookTypeDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutgoingWebhooksServiceServer).GetOutgoingWebhookTypeDetails(ctx, req.(*GetOutgoingWebhookTypeDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OutgoingWebhooksService_ListOutgoingWebhooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOutgoingWebhooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutgoingWebhooksServiceServer).ListOutgoingWebhooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.outgoing_webhooks.v1.OutgoingWebhooksService/ListOutgoingWebhooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutgoingWebhooksServiceServer).ListOutgoingWebhooks(ctx, req.(*ListOutgoingWebhooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OutgoingWebhooksService_ListAllOutgoingWebhooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllOutgoingWebhooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutgoingWebhooksServiceServer).ListAllOutgoingWebhooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.outgoing_webhooks.v1.OutgoingWebhooksService/ListAllOutgoingWebhooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutgoingWebhooksServiceServer).ListAllOutgoingWebhooks(ctx, req.(*ListAllOutgoingWebhooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OutgoingWebhooksService_GetOutgoingWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOutgoingWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutgoingWebhooksServiceServer).GetOutgoingWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.outgoing_webhooks.v1.OutgoingWebhooksService/GetOutgoingWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutgoingWebhooksServiceServer).GetOutgoingWebhook(ctx, req.(*GetOutgoingWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OutgoingWebhooksService_CreateOutgoingWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOutgoingWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutgoingWebhooksServiceServer).CreateOutgoingWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.outgoing_webhooks.v1.OutgoingWebhooksService/CreateOutgoingWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutgoingWebhooksServiceServer).CreateOutgoingWebhook(ctx, req.(*CreateOutgoingWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OutgoingWebhooksService_UpdateOutgoingWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOutgoingWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutgoingWebhooksServiceServer).UpdateOutgoingWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.outgoing_webhooks.v1.OutgoingWebhooksService/UpdateOutgoingWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutgoingWebhooksServiceServer).UpdateOutgoingWebhook(ctx, req.(*UpdateOutgoingWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OutgoingWebhooksService_DeleteOutgoingWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOutgoingWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutgoingWebhooksServiceServer).DeleteOutgoingWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.outgoing_webhooks.v1.OutgoingWebhooksService/DeleteOutgoingWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutgoingWebhooksServiceServer).DeleteOutgoingWebhook(ctx, req.(*DeleteOutgoingWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OutgoingWebhooksService_TestOutgoingWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestOutgoingWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutgoingWebhooksServiceServer).TestOutgoingWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.outgoing_webhooks.v1.OutgoingWebhooksService/TestOutgoingWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutgoingWebhooksServiceServer).TestOutgoingWebhook(ctx, req.(*TestOutgoingWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OutgoingWebhooksService_TestExistingOutgoingWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestExistingOutgoingWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutgoingWebhooksServiceServer).TestExistingOutgoingWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.outgoing_webhooks.v1.OutgoingWebhooksService/TestExistingOutgoingWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutgoingWebhooksServiceServer).TestExistingOutgoingWebhook(ctx, req.(*TestExistingOutgoingWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OutgoingWebhooksService_ListIbmEventNotificationsInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIbmEventNotificationsInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutgoingWebhooksServiceServer).ListIbmEventNotificationsInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.outgoing_webhooks.v1.OutgoingWebhooksService/ListIbmEventNotificationsInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutgoingWebhooksServiceServer).ListIbmEventNotificationsInstances(ctx, req.(*ListIbmEventNotificationsInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OutgoingWebhooksService_ServiceDesc is the grpc.ServiceDesc for OutgoingWebhooksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OutgoingWebhooksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.outgoing_webhooks.v1.OutgoingWebhooksService",
	HandlerType: (*OutgoingWebhooksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOutgoingWebhookTypes",
			Handler:    _OutgoingWebhooksService_ListOutgoingWebhookTypes_Handler,
		},
		{
			MethodName: "GetOutgoingWebhookTypeDetails",
			Handler:    _OutgoingWebhooksService_GetOutgoingWebhookTypeDetails_Handler,
		},
		{
			MethodName: "ListOutgoingWebhooks",
			Handler:    _OutgoingWebhooksService_ListOutgoingWebhooks_Handler,
		},
		{
			MethodName: "ListAllOutgoingWebhooks",
			Handler:    _OutgoingWebhooksService_ListAllOutgoingWebhooks_Handler,
		},
		{
			MethodName: "GetOutgoingWebhook",
			Handler:    _OutgoingWebhooksService_GetOutgoingWebhook_Handler,
		},
		{
			MethodName: "CreateOutgoingWebhook",
			Handler:    _OutgoingWebhooksService_CreateOutgoingWebhook_Handler,
		},
		{
			MethodName: "UpdateOutgoingWebhook",
			Handler:    _OutgoingWebhooksService_UpdateOutgoingWebhook_Handler,
		},
		{
			MethodName: "DeleteOutgoingWebhook",
			Handler:    _OutgoingWebhooksService_DeleteOutgoingWebhook_Handler,
		},
		{
			MethodName: "TestOutgoingWebhook",
			Handler:    _OutgoingWebhooksService_TestOutgoingWebhook_Handler,
		},
		{
			MethodName: "TestExistingOutgoingWebhook",
			Handler:    _OutgoingWebhooksService_TestExistingOutgoingWebhook_Handler,
		},
		{
			MethodName: "ListIbmEventNotificationsInstances",
			Handler:    _OutgoingWebhooksService_ListIbmEventNotificationsInstances_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/outgoing_webhooks/v1/outgoing_webhook_service.proto",
}
