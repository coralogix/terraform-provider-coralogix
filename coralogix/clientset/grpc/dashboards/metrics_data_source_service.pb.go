// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: com/coralogixapis/dashboards/v1/services/metrics_data_source_service.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MetricsEvent_AggregationType int32

const (
	MetricsEvent_AGGREGATION_TYPE_UNSPECIFIED MetricsEvent_AggregationType = 0
	MetricsEvent_AGGREGATION_TYPE_LAST        MetricsEvent_AggregationType = 1
	MetricsEvent_AGGREGATION_TYPE_MIN         MetricsEvent_AggregationType = 2
	MetricsEvent_AGGREGATION_TYPE_MAX         MetricsEvent_AggregationType = 3
	MetricsEvent_AGGREGATION_TYPE_AVG         MetricsEvent_AggregationType = 4
	MetricsEvent_AGGREGATION_TYPE_SUM         MetricsEvent_AggregationType = 5
)

// Enum value maps for MetricsEvent_AggregationType.
var (
	MetricsEvent_AggregationType_name = map[int32]string{
		0: "AGGREGATION_TYPE_UNSPECIFIED",
		1: "AGGREGATION_TYPE_LAST",
		2: "AGGREGATION_TYPE_MIN",
		3: "AGGREGATION_TYPE_MAX",
		4: "AGGREGATION_TYPE_AVG",
		5: "AGGREGATION_TYPE_SUM",
	}
	MetricsEvent_AggregationType_value = map[string]int32{
		"AGGREGATION_TYPE_UNSPECIFIED": 0,
		"AGGREGATION_TYPE_LAST":        1,
		"AGGREGATION_TYPE_MIN":         2,
		"AGGREGATION_TYPE_MAX":         3,
		"AGGREGATION_TYPE_AVG":         4,
		"AGGREGATION_TYPE_SUM":         5,
	}
)

func (x MetricsEvent_AggregationType) Enum() *MetricsEvent_AggregationType {
	p := new(MetricsEvent_AggregationType)
	*p = x
	return p
}

func (x MetricsEvent_AggregationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricsEvent_AggregationType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_enumTypes[0].Descriptor()
}

func (MetricsEvent_AggregationType) Type() protoreflect.EnumType {
	return &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_enumTypes[0]
}

func (x MetricsEvent_AggregationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricsEvent_AggregationType.Descriptor instead.
func (MetricsEvent_AggregationType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDescGZIP(), []int{10, 0}
}

type SearchMetricsTimeSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeFrame   *TimeFrame              `protobuf:"bytes,1,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	Interval    *durationpb.Duration    `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
	PromqlQuery *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=promql_query,json=promqlQuery,proto3" json:"promql_query,omitempty"`
	Limit       *wrapperspb.Int32Value  `protobuf:"bytes,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Filters     []*Filter_MetricsFilter `protobuf:"bytes,5,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *SearchMetricsTimeSeriesRequest) Reset() {
	*x = SearchMetricsTimeSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMetricsTimeSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMetricsTimeSeriesRequest) ProtoMessage() {}

func (x *SearchMetricsTimeSeriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMetricsTimeSeriesRequest.ProtoReflect.Descriptor instead.
func (*SearchMetricsTimeSeriesRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDescGZIP(), []int{0}
}

func (x *SearchMetricsTimeSeriesRequest) GetTimeFrame() *TimeFrame {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

func (x *SearchMetricsTimeSeriesRequest) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *SearchMetricsTimeSeriesRequest) GetPromqlQuery() *wrapperspb.StringValue {
	if x != nil {
		return x.PromqlQuery
	}
	return nil
}

func (x *SearchMetricsTimeSeriesRequest) GetLimit() *wrapperspb.Int32Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *SearchMetricsTimeSeriesRequest) GetFilters() []*Filter_MetricsFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type SearchMetricsTimeSeriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeSeries      []*TimeSeries          `protobuf:"bytes,1,rep,name=time_series,json=timeSeries,proto3" json:"time_series,omitempty"`
	IsLimitExceeded bool                   `protobuf:"varint,2,opt,name=is_limit_exceeded,json=isLimitExceeded,proto3" json:"is_limit_exceeded,omitempty"`
	Total           *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *SearchMetricsTimeSeriesResponse) Reset() {
	*x = SearchMetricsTimeSeriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMetricsTimeSeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMetricsTimeSeriesResponse) ProtoMessage() {}

func (x *SearchMetricsTimeSeriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMetricsTimeSeriesResponse.ProtoReflect.Descriptor instead.
func (*SearchMetricsTimeSeriesResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDescGZIP(), []int{1}
}

func (x *SearchMetricsTimeSeriesResponse) GetTimeSeries() []*TimeSeries {
	if x != nil {
		return x.TimeSeries
	}
	return nil
}

func (x *SearchMetricsTimeSeriesResponse) GetIsLimitExceeded() bool {
	if x != nil {
		return x.IsLimitExceeded
	}
	return false
}

func (x *SearchMetricsTimeSeriesResponse) GetTotal() *wrapperspb.Int64Value {
	if x != nil {
		return x.Total
	}
	return nil
}

type SearchMetricsTimeValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeFrame   *TimeFrame              `protobuf:"bytes,1,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	PromqlQuery *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=promql_query,json=promqlQuery,proto3" json:"promql_query,omitempty"`
	Limit       *wrapperspb.Int32Value  `protobuf:"bytes,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Filters     []*Filter_MetricsFilter `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *SearchMetricsTimeValuesRequest) Reset() {
	*x = SearchMetricsTimeValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMetricsTimeValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMetricsTimeValuesRequest) ProtoMessage() {}

func (x *SearchMetricsTimeValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMetricsTimeValuesRequest.ProtoReflect.Descriptor instead.
func (*SearchMetricsTimeValuesRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDescGZIP(), []int{2}
}

func (x *SearchMetricsTimeValuesRequest) GetTimeFrame() *TimeFrame {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

func (x *SearchMetricsTimeValuesRequest) GetPromqlQuery() *wrapperspb.StringValue {
	if x != nil {
		return x.PromqlQuery
	}
	return nil
}

func (x *SearchMetricsTimeValuesRequest) GetLimit() *wrapperspb.Int32Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *SearchMetricsTimeValuesRequest) GetFilters() []*Filter_MetricsFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type SearchMetricsTimeValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values          []*LabelledValue       `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	IsLimitExceeded bool                   `protobuf:"varint,2,opt,name=is_limit_exceeded,json=isLimitExceeded,proto3" json:"is_limit_exceeded,omitempty"`
	Total           *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *SearchMetricsTimeValuesResponse) Reset() {
	*x = SearchMetricsTimeValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMetricsTimeValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMetricsTimeValuesResponse) ProtoMessage() {}

func (x *SearchMetricsTimeValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMetricsTimeValuesResponse.ProtoReflect.Descriptor instead.
func (*SearchMetricsTimeValuesResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDescGZIP(), []int{3}
}

func (x *SearchMetricsTimeValuesResponse) GetValues() []*LabelledValue {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *SearchMetricsTimeValuesResponse) GetIsLimitExceeded() bool {
	if x != nil {
		return x.IsLimitExceeded
	}
	return false
}

func (x *SearchMetricsTimeValuesResponse) GetTotal() *wrapperspb.Int64Value {
	if x != nil {
		return x.Total
	}
	return nil
}

type SearchMetricsGroupedSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeFrame   *TimeFrame                                 `protobuf:"bytes,1,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	PromqlQuery *wrapperspb.StringValue                    `protobuf:"bytes,2,opt,name=promql_query,json=promqlQuery,proto3" json:"promql_query,omitempty"`
	GroupBy     []*wrapperspb.StringValue                  `protobuf:"bytes,3,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	Limits      []*SearchMetricsGroupedSeriesRequest_Limit `protobuf:"bytes,4,rep,name=limits,proto3" json:"limits,omitempty"`
	Filters     []*Filter_MetricsFilter                    `protobuf:"bytes,5,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *SearchMetricsGroupedSeriesRequest) Reset() {
	*x = SearchMetricsGroupedSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMetricsGroupedSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMetricsGroupedSeriesRequest) ProtoMessage() {}

func (x *SearchMetricsGroupedSeriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMetricsGroupedSeriesRequest.ProtoReflect.Descriptor instead.
func (*SearchMetricsGroupedSeriesRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDescGZIP(), []int{4}
}

func (x *SearchMetricsGroupedSeriesRequest) GetTimeFrame() *TimeFrame {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

func (x *SearchMetricsGroupedSeriesRequest) GetPromqlQuery() *wrapperspb.StringValue {
	if x != nil {
		return x.PromqlQuery
	}
	return nil
}

func (x *SearchMetricsGroupedSeriesRequest) GetGroupBy() []*wrapperspb.StringValue {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *SearchMetricsGroupedSeriesRequest) GetLimits() []*SearchMetricsGroupedSeriesRequest_Limit {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *SearchMetricsGroupedSeriesRequest) GetFilters() []*Filter_MetricsFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type SearchMetricsGroupedSeriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Series []*GroupedSeries `protobuf:"bytes,1,rep,name=series,proto3" json:"series,omitempty"`
}

func (x *SearchMetricsGroupedSeriesResponse) Reset() {
	*x = SearchMetricsGroupedSeriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMetricsGroupedSeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMetricsGroupedSeriesResponse) ProtoMessage() {}

func (x *SearchMetricsGroupedSeriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMetricsGroupedSeriesResponse.ProtoReflect.Descriptor instead.
func (*SearchMetricsGroupedSeriesResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDescGZIP(), []int{5}
}

func (x *SearchMetricsGroupedSeriesResponse) GetSeries() []*GroupedSeries {
	if x != nil {
		return x.Series
	}
	return nil
}

type SearchMetricsGroupedTimeSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeFrame   *TimeFrame                                       `protobuf:"bytes,1,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	Interval    *durationpb.Duration                             `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
	PromqlQuery *wrapperspb.StringValue                          `protobuf:"bytes,3,opt,name=promql_query,json=promqlQuery,proto3" json:"promql_query,omitempty"`
	GroupBy     []*SearchMetricsGroupedTimeSeriesRequest_GroupBy `protobuf:"bytes,4,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	Filters     []*Filter_MetricsFilter                          `protobuf:"bytes,5,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *SearchMetricsGroupedTimeSeriesRequest) Reset() {
	*x = SearchMetricsGroupedTimeSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMetricsGroupedTimeSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMetricsGroupedTimeSeriesRequest) ProtoMessage() {}

func (x *SearchMetricsGroupedTimeSeriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMetricsGroupedTimeSeriesRequest.ProtoReflect.Descriptor instead.
func (*SearchMetricsGroupedTimeSeriesRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDescGZIP(), []int{6}
}

func (x *SearchMetricsGroupedTimeSeriesRequest) GetTimeFrame() *TimeFrame {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

func (x *SearchMetricsGroupedTimeSeriesRequest) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *SearchMetricsGroupedTimeSeriesRequest) GetPromqlQuery() *wrapperspb.StringValue {
	if x != nil {
		return x.PromqlQuery
	}
	return nil
}

func (x *SearchMetricsGroupedTimeSeriesRequest) GetGroupBy() []*SearchMetricsGroupedTimeSeriesRequest_GroupBy {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *SearchMetricsGroupedTimeSeriesRequest) GetFilters() []*Filter_MetricsFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type SearchMetricsGroupedTimeSeriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Series []*GroupedSeries `protobuf:"bytes,1,rep,name=series,proto3" json:"series,omitempty"`
}

func (x *SearchMetricsGroupedTimeSeriesResponse) Reset() {
	*x = SearchMetricsGroupedTimeSeriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMetricsGroupedTimeSeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMetricsGroupedTimeSeriesResponse) ProtoMessage() {}

func (x *SearchMetricsGroupedTimeSeriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMetricsGroupedTimeSeriesResponse.ProtoReflect.Descriptor instead.
func (*SearchMetricsGroupedTimeSeriesResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDescGZIP(), []int{7}
}

func (x *SearchMetricsGroupedTimeSeriesResponse) GetSeries() []*GroupedSeries {
	if x != nil {
		return x.Series
	}
	return nil
}

type SearchMetricsEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeFrame          *TimeFrame                             `protobuf:"bytes,1,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	TimeSeriesInterval *durationpb.Duration                   `protobuf:"bytes,2,opt,name=time_series_interval,json=timeSeriesInterval,proto3" json:"time_series_interval,omitempty"`
	PromqlQuery        *wrapperspb.StringValue                `protobuf:"bytes,3,opt,name=promql_query,json=promqlQuery,proto3" json:"promql_query,omitempty"`
	Pagination         *SearchMetricsEventsRequest_Pagination `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Filters            []*Filter_MetricsFilter                `protobuf:"bytes,5,rep,name=filters,proto3" json:"filters,omitempty"`
	OrderBy            *SearchMetricsEventsRequest_OrderBy    `protobuf:"bytes,6,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *SearchMetricsEventsRequest) Reset() {
	*x = SearchMetricsEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMetricsEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMetricsEventsRequest) ProtoMessage() {}

func (x *SearchMetricsEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMetricsEventsRequest.ProtoReflect.Descriptor instead.
func (*SearchMetricsEventsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDescGZIP(), []int{8}
}

func (x *SearchMetricsEventsRequest) GetTimeFrame() *TimeFrame {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

func (x *SearchMetricsEventsRequest) GetTimeSeriesInterval() *durationpb.Duration {
	if x != nil {
		return x.TimeSeriesInterval
	}
	return nil
}

func (x *SearchMetricsEventsRequest) GetPromqlQuery() *wrapperspb.StringValue {
	if x != nil {
		return x.PromqlQuery
	}
	return nil
}

func (x *SearchMetricsEventsRequest) GetPagination() *SearchMetricsEventsRequest_Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *SearchMetricsEventsRequest) GetFilters() []*Filter_MetricsFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *SearchMetricsEventsRequest) GetOrderBy() *SearchMetricsEventsRequest_OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

type SearchMetricsEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels        []*wrapperspb.StringValue `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	MetricsEvents []*MetricsEvent           `protobuf:"bytes,2,rep,name=metrics_events,json=metricsEvents,proto3" json:"metrics_events,omitempty"`
	Total         *wrapperspb.Int64Value    `protobuf:"bytes,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *SearchMetricsEventsResponse) Reset() {
	*x = SearchMetricsEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMetricsEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMetricsEventsResponse) ProtoMessage() {}

func (x *SearchMetricsEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMetricsEventsResponse.ProtoReflect.Descriptor instead.
func (*SearchMetricsEventsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDescGZIP(), []int{9}
}

func (x *SearchMetricsEventsResponse) GetLabels() []*wrapperspb.StringValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SearchMetricsEventsResponse) GetMetricsEvents() []*MetricsEvent {
	if x != nil {
		return x.MetricsEvents
	}
	return nil
}

func (x *SearchMetricsEventsResponse) GetTotal() *wrapperspb.Int64Value {
	if x != nil {
		return x.Total
	}
	return nil
}

type MetricsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aggregations []*MetricsEvent_Aggregation `protobuf:"bytes,1,rep,name=aggregations,proto3" json:"aggregations,omitempty"`
	TimeSeries   *TimeSeries                 `protobuf:"bytes,2,opt,name=time_series,json=timeSeries,proto3" json:"time_series,omitempty"`
}

func (x *MetricsEvent) Reset() {
	*x = MetricsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsEvent) ProtoMessage() {}

func (x *MetricsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsEvent.ProtoReflect.Descriptor instead.
func (*MetricsEvent) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDescGZIP(), []int{10}
}

func (x *MetricsEvent) GetAggregations() []*MetricsEvent_Aggregation {
	if x != nil {
		return x.Aggregations
	}
	return nil
}

func (x *MetricsEvent) GetTimeSeries() *TimeSeries {
	if x != nil {
		return x.TimeSeries
	}
	return nil
}

type SearchMetricsAnnotationEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeFrame   *TimeFrame                         `protobuf:"bytes,1,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	Interval    *durationpb.Duration               `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
	Filters     []*Filter_MetricsFilter            `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	PromqlQuery *wrapperspb.StringValue            `protobuf:"bytes,4,opt,name=promql_query,json=promqlQuery,proto3" json:"promql_query,omitempty"`
	Strategy    *Annotation_MetricsSource_Strategy `protobuf:"bytes,5,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Limit       *wrapperspb.Int32Value             `protobuf:"bytes,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SearchMetricsAnnotationEventsRequest) Reset() {
	*x = SearchMetricsAnnotationEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMetricsAnnotationEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMetricsAnnotationEventsRequest) ProtoMessage() {}

func (x *SearchMetricsAnnotationEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMetricsAnnotationEventsRequest.ProtoReflect.Descriptor instead.
func (*SearchMetricsAnnotationEventsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDescGZIP(), []int{11}
}

func (x *SearchMetricsAnnotationEventsRequest) GetTimeFrame() *TimeFrame {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

func (x *SearchMetricsAnnotationEventsRequest) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *SearchMetricsAnnotationEventsRequest) GetFilters() []*Filter_MetricsFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *SearchMetricsAnnotationEventsRequest) GetPromqlQuery() *wrapperspb.StringValue {
	if x != nil {
		return x.PromqlQuery
	}
	return nil
}

func (x *SearchMetricsAnnotationEventsRequest) GetStrategy() *Annotation_MetricsSource_Strategy {
	if x != nil {
		return x.Strategy
	}
	return nil
}

func (x *SearchMetricsAnnotationEventsRequest) GetLimit() *wrapperspb.Int32Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

type SearchMetricsAnnotationEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnotationEvents []*AnnotationEvent `protobuf:"bytes,1,rep,name=annotation_events,json=annotationEvents,proto3" json:"annotation_events,omitempty"`
}

func (x *SearchMetricsAnnotationEventsResponse) Reset() {
	*x = SearchMetricsAnnotationEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMetricsAnnotationEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMetricsAnnotationEventsResponse) ProtoMessage() {}

func (x *SearchMetricsAnnotationEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMetricsAnnotationEventsResponse.ProtoReflect.Descriptor instead.
func (*SearchMetricsAnnotationEventsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDescGZIP(), []int{12}
}

func (x *SearchMetricsAnnotationEventsResponse) GetAnnotationEvents() []*AnnotationEvent {
	if x != nil {
		return x.AnnotationEvents
	}
	return nil
}

type SearchMetricsGroupedSeriesRequest_Limit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupBy       []*wrapperspb.StringValue `protobuf:"bytes,1,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	Limit         *wrapperspb.Int32Value    `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
	MinPercentage *wrapperspb.Int32Value    `protobuf:"bytes,3,opt,name=min_percentage,json=minPercentage,proto3" json:"min_percentage,omitempty"`
}

func (x *SearchMetricsGroupedSeriesRequest_Limit) Reset() {
	*x = SearchMetricsGroupedSeriesRequest_Limit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMetricsGroupedSeriesRequest_Limit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMetricsGroupedSeriesRequest_Limit) ProtoMessage() {}

func (x *SearchMetricsGroupedSeriesRequest_Limit) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMetricsGroupedSeriesRequest_Limit.ProtoReflect.Descriptor instead.
func (*SearchMetricsGroupedSeriesRequest_Limit) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDescGZIP(), []int{4, 0}
}

func (x *SearchMetricsGroupedSeriesRequest_Limit) GetGroupBy() []*wrapperspb.StringValue {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *SearchMetricsGroupedSeriesRequest_Limit) GetLimit() *wrapperspb.Int32Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *SearchMetricsGroupedSeriesRequest_Limit) GetMinPercentage() *wrapperspb.Int32Value {
	if x != nil {
		return x.MinPercentage
	}
	return nil
}

type SearchMetricsGroupedTimeSeriesRequest_GroupBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels        []*wrapperspb.StringValue `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	Limit         *wrapperspb.Int32Value    `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
	MinPercentage *wrapperspb.Int32Value    `protobuf:"bytes,3,opt,name=min_percentage,json=minPercentage,proto3" json:"min_percentage,omitempty"`
}

func (x *SearchMetricsGroupedTimeSeriesRequest_GroupBy) Reset() {
	*x = SearchMetricsGroupedTimeSeriesRequest_GroupBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMetricsGroupedTimeSeriesRequest_GroupBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMetricsGroupedTimeSeriesRequest_GroupBy) ProtoMessage() {}

func (x *SearchMetricsGroupedTimeSeriesRequest_GroupBy) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMetricsGroupedTimeSeriesRequest_GroupBy.ProtoReflect.Descriptor instead.
func (*SearchMetricsGroupedTimeSeriesRequest_GroupBy) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDescGZIP(), []int{6, 0}
}

func (x *SearchMetricsGroupedTimeSeriesRequest_GroupBy) GetLabels() []*wrapperspb.StringValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SearchMetricsGroupedTimeSeriesRequest_GroupBy) GetLimit() *wrapperspb.Int32Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *SearchMetricsGroupedTimeSeriesRequest_GroupBy) GetMinPercentage() *wrapperspb.Int32Value {
	if x != nil {
		return x.MinPercentage
	}
	return nil
}

type SearchMetricsEventsRequest_OrderBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction OrderDirection `protobuf:"varint,1,opt,name=direction,proto3,enum=com.coralogixapis.dashboards.v1.common.OrderDirection" json:"direction,omitempty"`
	// Types that are assignable to Value:
	//	*SearchMetricsEventsRequest_OrderBy_Label
	//	*SearchMetricsEventsRequest_OrderBy_AggType
	Value isSearchMetricsEventsRequest_OrderBy_Value `protobuf_oneof:"value"`
}

func (x *SearchMetricsEventsRequest_OrderBy) Reset() {
	*x = SearchMetricsEventsRequest_OrderBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMetricsEventsRequest_OrderBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMetricsEventsRequest_OrderBy) ProtoMessage() {}

func (x *SearchMetricsEventsRequest_OrderBy) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMetricsEventsRequest_OrderBy.ProtoReflect.Descriptor instead.
func (*SearchMetricsEventsRequest_OrderBy) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDescGZIP(), []int{8, 0}
}

func (x *SearchMetricsEventsRequest_OrderBy) GetDirection() OrderDirection {
	if x != nil {
		return x.Direction
	}
	return OrderDirection_ORDER_DIRECTION_UNSPECIFIED
}

func (m *SearchMetricsEventsRequest_OrderBy) GetValue() isSearchMetricsEventsRequest_OrderBy_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *SearchMetricsEventsRequest_OrderBy) GetLabel() *wrapperspb.StringValue {
	if x, ok := x.GetValue().(*SearchMetricsEventsRequest_OrderBy_Label); ok {
		return x.Label
	}
	return nil
}

func (x *SearchMetricsEventsRequest_OrderBy) GetAggType() MetricsEvent_AggregationType {
	if x, ok := x.GetValue().(*SearchMetricsEventsRequest_OrderBy_AggType); ok {
		return x.AggType
	}
	return MetricsEvent_AGGREGATION_TYPE_UNSPECIFIED
}

type isSearchMetricsEventsRequest_OrderBy_Value interface {
	isSearchMetricsEventsRequest_OrderBy_Value()
}

type SearchMetricsEventsRequest_OrderBy_Label struct {
	Label *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=label,proto3,oneof"`
}

type SearchMetricsEventsRequest_OrderBy_AggType struct {
	AggType MetricsEvent_AggregationType `protobuf:"varint,3,opt,name=agg_type,json=aggType,proto3,enum=com.coralogixapis.dashboards.v1.services.MetricsEvent_AggregationType,oneof"`
}

func (*SearchMetricsEventsRequest_OrderBy_Label) isSearchMetricsEventsRequest_OrderBy_Value() {}

func (*SearchMetricsEventsRequest_OrderBy_AggType) isSearchMetricsEventsRequest_OrderBy_Value() {}

type SearchMetricsEventsRequest_Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SearchMetricsEventsRequest_Pagination) Reset() {
	*x = SearchMetricsEventsRequest_Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMetricsEventsRequest_Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMetricsEventsRequest_Pagination) ProtoMessage() {}

func (x *SearchMetricsEventsRequest_Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMetricsEventsRequest_Pagination.ProtoReflect.Descriptor instead.
func (*SearchMetricsEventsRequest_Pagination) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDescGZIP(), []int{8, 1}
}

func (x *SearchMetricsEventsRequest_Pagination) GetOffset() *wrapperspb.Int32Value {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *SearchMetricsEventsRequest_Pagination) GetLimit() *wrapperspb.Int32Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

type MetricsEvent_Aggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregationType MetricsEvent_AggregationType `protobuf:"varint,1,opt,name=aggregation_type,json=aggregationType,proto3,enum=com.coralogixapis.dashboards.v1.services.MetricsEvent_AggregationType" json:"aggregation_type,omitempty"`
	Value           *wrapperspb.DoubleValue      `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MetricsEvent_Aggregation) Reset() {
	*x = MetricsEvent_Aggregation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsEvent_Aggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsEvent_Aggregation) ProtoMessage() {}

func (x *MetricsEvent_Aggregation) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsEvent_Aggregation.ProtoReflect.Descriptor instead.
func (*MetricsEvent_Aggregation) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDescGZIP(), []int{10, 0}
}

func (x *MetricsEvent_Aggregation) GetAggregationType() MetricsEvent_AggregationType {
	if x != nil {
		return x.AggregationType
	}
	return MetricsEvent_AGGREGATION_TYPE_UNSPECIFIED
}

func (x *MetricsEvent_Aggregation) GetValue() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto protoreflect.FileDescriptor

var file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDesc = []byte{
	0x0a, 0x4a, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x28, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x34, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73,
	0x74, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x3d, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3c, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x38, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf2, 0x02, 0x0a, 0x1e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x71,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x53, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xd5,
	0x01, 0x0a, 0x1f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x53, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xbb, 0x02, 0x0a, 0x1e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x53, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x1f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xe9, 0x04, 0x0a, 0x21, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x3f,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x37, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x69, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xb7, 0x01, 0x0a, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x42,
	0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x22, 0x73, 0x0a, 0x22, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0xf3, 0x04, 0x0a, 0x25, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x50, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x6d, 0x71, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x72, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12,
	0x53, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x1a, 0xb6, 0x01, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79,
	0x12, 0x34, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x6d, 0x69, 0x6e,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x6d, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x77, 0x0a,
	0x26, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0xa7, 0x07, 0x0a, 0x1a, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x6f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x67, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x1a, 0x83, 0x02, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x12, 0x54, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x63, 0x0a, 0x08,
	0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x07, 0x61, 0x67, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x74, 0x0a, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x31, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0xe5, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x5d, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xbb, 0x04, 0x0a, 0x0c, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x66, 0x0a, 0x0c, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x53, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x1a, 0xb4, 0x01, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x71, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb6, 0x01,
	0x0a, 0x0f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x47, 0x47, 0x52,
	0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58,
	0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x56, 0x47, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14,
	0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x55, 0x4d, 0x10, 0x05, 0x22, 0xdc, 0x03, 0x0a, 0x24, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x50, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x53, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x62,
	0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x25, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x64, 0x0a, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0xa2, 0x0a, 0x0a, 0x18, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xc8, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x48,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x18, 0xba, 0xb8, 0x02, 0x14, 0x0a, 0x12, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0xcb, 0x01,
	0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b,
	0xba, 0xb8, 0x02, 0x17, 0x0a, 0x15, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0xd4, 0x01, 0x0a, 0x1a,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x65, 0x64, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0xba, 0xb8, 0x02, 0x17, 0x0a, 0x15, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x20, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x12, 0xe5, 0x01, 0x0a, 0x1e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0xba, 0xb8, 0x02, 0x1c, 0x0a, 0x1a,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x20, 0x74,
	0x69, 0x6d, 0x65, 0x20, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0xc2, 0x01, 0x0a, 0x13, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1e, 0xba, 0xb8, 0x02, 0x1a, 0x0a, 0x18, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x20, 0x61, 0x73, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0xe8, 0x01, 0x0a, 0x1d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x4e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x4f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x26, 0xba, 0xb8, 0x02, 0x22, 0x0a, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x03, 0x5a, 0x01, 0x2e, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDescOnce sync.Once
	file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDescData = file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDesc
)

func file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDescData)
	})
	return file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDescData
}

var file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_goTypes = []interface{}{
	(MetricsEvent_AggregationType)(0),                     // 0: com.coralogixapis.dashboards.v1.services.MetricsEvent.AggregationType
	(*SearchMetricsTimeSeriesRequest)(nil),                // 1: com.coralogixapis.dashboards.v1.services.SearchMetricsTimeSeriesRequest
	(*SearchMetricsTimeSeriesResponse)(nil),               // 2: com.coralogixapis.dashboards.v1.services.SearchMetricsTimeSeriesResponse
	(*SearchMetricsTimeValuesRequest)(nil),                // 3: com.coralogixapis.dashboards.v1.services.SearchMetricsTimeValuesRequest
	(*SearchMetricsTimeValuesResponse)(nil),               // 4: com.coralogixapis.dashboards.v1.services.SearchMetricsTimeValuesResponse
	(*SearchMetricsGroupedSeriesRequest)(nil),             // 5: com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedSeriesRequest
	(*SearchMetricsGroupedSeriesResponse)(nil),            // 6: com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedSeriesResponse
	(*SearchMetricsGroupedTimeSeriesRequest)(nil),         // 7: com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedTimeSeriesRequest
	(*SearchMetricsGroupedTimeSeriesResponse)(nil),        // 8: com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedTimeSeriesResponse
	(*SearchMetricsEventsRequest)(nil),                    // 9: com.coralogixapis.dashboards.v1.services.SearchMetricsEventsRequest
	(*SearchMetricsEventsResponse)(nil),                   // 10: com.coralogixapis.dashboards.v1.services.SearchMetricsEventsResponse
	(*MetricsEvent)(nil),                                  // 11: com.coralogixapis.dashboards.v1.services.MetricsEvent
	(*SearchMetricsAnnotationEventsRequest)(nil),          // 12: com.coralogixapis.dashboards.v1.services.SearchMetricsAnnotationEventsRequest
	(*SearchMetricsAnnotationEventsResponse)(nil),         // 13: com.coralogixapis.dashboards.v1.services.SearchMetricsAnnotationEventsResponse
	(*SearchMetricsGroupedSeriesRequest_Limit)(nil),       // 14: com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedSeriesRequest.Limit
	(*SearchMetricsGroupedTimeSeriesRequest_GroupBy)(nil), // 15: com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedTimeSeriesRequest.GroupBy
	(*SearchMetricsEventsRequest_OrderBy)(nil),            // 16: com.coralogixapis.dashboards.v1.services.SearchMetricsEventsRequest.OrderBy
	(*SearchMetricsEventsRequest_Pagination)(nil),         // 17: com.coralogixapis.dashboards.v1.services.SearchMetricsEventsRequest.Pagination
	(*MetricsEvent_Aggregation)(nil),                      // 18: com.coralogixapis.dashboards.v1.services.MetricsEvent.Aggregation
	(*TimeFrame)(nil),                                     // 19: com.coralogixapis.dashboards.v1.common.TimeFrame
	(*durationpb.Duration)(nil),                           // 20: google.protobuf.Duration
	(*wrapperspb.StringValue)(nil),                        // 21: google.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),                         // 22: google.protobuf.Int32Value
	(*Filter_MetricsFilter)(nil),                          // 23: com.coralogixapis.dashboards.v1.ast.Filter.MetricsFilter
	(*TimeSeries)(nil),                                    // 24: com.coralogixapis.dashboards.v1.common.TimeSeries
	(*wrapperspb.Int64Value)(nil),                         // 25: google.protobuf.Int64Value
	(*LabelledValue)(nil),                                 // 26: com.coralogixapis.dashboards.v1.common.LabelledValue
	(*GroupedSeries)(nil),                                 // 27: com.coralogixapis.dashboards.v1.common.GroupedSeries
	(*Annotation_MetricsSource_Strategy)(nil),             // 28: com.coralogixapis.dashboards.v1.ast.Annotation.MetricsSource.Strategy
	(*AnnotationEvent)(nil),                               // 29: com.coralogixapis.dashboards.v1.common.AnnotationEvent
	(OrderDirection)(0),                                   // 30: com.coralogixapis.dashboards.v1.common.OrderDirection
	(*wrapperspb.DoubleValue)(nil),                        // 31: google.protobuf.DoubleValue
}
var file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_depIdxs = []int32{
	19, // 0: com.coralogixapis.dashboards.v1.services.SearchMetricsTimeSeriesRequest.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrame
	20, // 1: com.coralogixapis.dashboards.v1.services.SearchMetricsTimeSeriesRequest.interval:type_name -> google.protobuf.Duration
	21, // 2: com.coralogixapis.dashboards.v1.services.SearchMetricsTimeSeriesRequest.promql_query:type_name -> google.protobuf.StringValue
	22, // 3: com.coralogixapis.dashboards.v1.services.SearchMetricsTimeSeriesRequest.limit:type_name -> google.protobuf.Int32Value
	23, // 4: com.coralogixapis.dashboards.v1.services.SearchMetricsTimeSeriesRequest.filters:type_name -> com.coralogixapis.dashboards.v1.ast.Filter.MetricsFilter
	24, // 5: com.coralogixapis.dashboards.v1.services.SearchMetricsTimeSeriesResponse.time_series:type_name -> com.coralogixapis.dashboards.v1.common.TimeSeries
	25, // 6: com.coralogixapis.dashboards.v1.services.SearchMetricsTimeSeriesResponse.total:type_name -> google.protobuf.Int64Value
	19, // 7: com.coralogixapis.dashboards.v1.services.SearchMetricsTimeValuesRequest.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrame
	21, // 8: com.coralogixapis.dashboards.v1.services.SearchMetricsTimeValuesRequest.promql_query:type_name -> google.protobuf.StringValue
	22, // 9: com.coralogixapis.dashboards.v1.services.SearchMetricsTimeValuesRequest.limit:type_name -> google.protobuf.Int32Value
	23, // 10: com.coralogixapis.dashboards.v1.services.SearchMetricsTimeValuesRequest.filters:type_name -> com.coralogixapis.dashboards.v1.ast.Filter.MetricsFilter
	26, // 11: com.coralogixapis.dashboards.v1.services.SearchMetricsTimeValuesResponse.values:type_name -> com.coralogixapis.dashboards.v1.common.LabelledValue
	25, // 12: com.coralogixapis.dashboards.v1.services.SearchMetricsTimeValuesResponse.total:type_name -> google.protobuf.Int64Value
	19, // 13: com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedSeriesRequest.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrame
	21, // 14: com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedSeriesRequest.promql_query:type_name -> google.protobuf.StringValue
	21, // 15: com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedSeriesRequest.group_by:type_name -> google.protobuf.StringValue
	14, // 16: com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedSeriesRequest.limits:type_name -> com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedSeriesRequest.Limit
	23, // 17: com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedSeriesRequest.filters:type_name -> com.coralogixapis.dashboards.v1.ast.Filter.MetricsFilter
	27, // 18: com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedSeriesResponse.series:type_name -> com.coralogixapis.dashboards.v1.common.GroupedSeries
	19, // 19: com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedTimeSeriesRequest.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrame
	20, // 20: com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedTimeSeriesRequest.interval:type_name -> google.protobuf.Duration
	21, // 21: com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedTimeSeriesRequest.promql_query:type_name -> google.protobuf.StringValue
	15, // 22: com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedTimeSeriesRequest.group_by:type_name -> com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedTimeSeriesRequest.GroupBy
	23, // 23: com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedTimeSeriesRequest.filters:type_name -> com.coralogixapis.dashboards.v1.ast.Filter.MetricsFilter
	27, // 24: com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedTimeSeriesResponse.series:type_name -> com.coralogixapis.dashboards.v1.common.GroupedSeries
	19, // 25: com.coralogixapis.dashboards.v1.services.SearchMetricsEventsRequest.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrame
	20, // 26: com.coralogixapis.dashboards.v1.services.SearchMetricsEventsRequest.time_series_interval:type_name -> google.protobuf.Duration
	21, // 27: com.coralogixapis.dashboards.v1.services.SearchMetricsEventsRequest.promql_query:type_name -> google.protobuf.StringValue
	17, // 28: com.coralogixapis.dashboards.v1.services.SearchMetricsEventsRequest.pagination:type_name -> com.coralogixapis.dashboards.v1.services.SearchMetricsEventsRequest.Pagination
	23, // 29: com.coralogixapis.dashboards.v1.services.SearchMetricsEventsRequest.filters:type_name -> com.coralogixapis.dashboards.v1.ast.Filter.MetricsFilter
	16, // 30: com.coralogixapis.dashboards.v1.services.SearchMetricsEventsRequest.order_by:type_name -> com.coralogixapis.dashboards.v1.services.SearchMetricsEventsRequest.OrderBy
	21, // 31: com.coralogixapis.dashboards.v1.services.SearchMetricsEventsResponse.labels:type_name -> google.protobuf.StringValue
	11, // 32: com.coralogixapis.dashboards.v1.services.SearchMetricsEventsResponse.metrics_events:type_name -> com.coralogixapis.dashboards.v1.services.MetricsEvent
	25, // 33: com.coralogixapis.dashboards.v1.services.SearchMetricsEventsResponse.total:type_name -> google.protobuf.Int64Value
	18, // 34: com.coralogixapis.dashboards.v1.services.MetricsEvent.aggregations:type_name -> com.coralogixapis.dashboards.v1.services.MetricsEvent.Aggregation
	24, // 35: com.coralogixapis.dashboards.v1.services.MetricsEvent.time_series:type_name -> com.coralogixapis.dashboards.v1.common.TimeSeries
	19, // 36: com.coralogixapis.dashboards.v1.services.SearchMetricsAnnotationEventsRequest.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrame
	20, // 37: com.coralogixapis.dashboards.v1.services.SearchMetricsAnnotationEventsRequest.interval:type_name -> google.protobuf.Duration
	23, // 38: com.coralogixapis.dashboards.v1.services.SearchMetricsAnnotationEventsRequest.filters:type_name -> com.coralogixapis.dashboards.v1.ast.Filter.MetricsFilter
	21, // 39: com.coralogixapis.dashboards.v1.services.SearchMetricsAnnotationEventsRequest.promql_query:type_name -> google.protobuf.StringValue
	28, // 40: com.coralogixapis.dashboards.v1.services.SearchMetricsAnnotationEventsRequest.strategy:type_name -> com.coralogixapis.dashboards.v1.ast.Annotation.MetricsSource.Strategy
	22, // 41: com.coralogixapis.dashboards.v1.services.SearchMetricsAnnotationEventsRequest.limit:type_name -> google.protobuf.Int32Value
	29, // 42: com.coralogixapis.dashboards.v1.services.SearchMetricsAnnotationEventsResponse.annotation_events:type_name -> com.coralogixapis.dashboards.v1.common.AnnotationEvent
	21, // 43: com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedSeriesRequest.Limit.group_by:type_name -> google.protobuf.StringValue
	22, // 44: com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedSeriesRequest.Limit.limit:type_name -> google.protobuf.Int32Value
	22, // 45: com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedSeriesRequest.Limit.min_percentage:type_name -> google.protobuf.Int32Value
	21, // 46: com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedTimeSeriesRequest.GroupBy.labels:type_name -> google.protobuf.StringValue
	22, // 47: com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedTimeSeriesRequest.GroupBy.limit:type_name -> google.protobuf.Int32Value
	22, // 48: com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedTimeSeriesRequest.GroupBy.min_percentage:type_name -> google.protobuf.Int32Value
	30, // 49: com.coralogixapis.dashboards.v1.services.SearchMetricsEventsRequest.OrderBy.direction:type_name -> com.coralogixapis.dashboards.v1.common.OrderDirection
	21, // 50: com.coralogixapis.dashboards.v1.services.SearchMetricsEventsRequest.OrderBy.label:type_name -> google.protobuf.StringValue
	0,  // 51: com.coralogixapis.dashboards.v1.services.SearchMetricsEventsRequest.OrderBy.agg_type:type_name -> com.coralogixapis.dashboards.v1.services.MetricsEvent.AggregationType
	22, // 52: com.coralogixapis.dashboards.v1.services.SearchMetricsEventsRequest.Pagination.offset:type_name -> google.protobuf.Int32Value
	22, // 53: com.coralogixapis.dashboards.v1.services.SearchMetricsEventsRequest.Pagination.limit:type_name -> google.protobuf.Int32Value
	0,  // 54: com.coralogixapis.dashboards.v1.services.MetricsEvent.Aggregation.aggregation_type:type_name -> com.coralogixapis.dashboards.v1.services.MetricsEvent.AggregationType
	31, // 55: com.coralogixapis.dashboards.v1.services.MetricsEvent.Aggregation.value:type_name -> google.protobuf.DoubleValue
	1,  // 56: com.coralogixapis.dashboards.v1.services.MetricsDataSourceService.SearchMetricsTimeSeries:input_type -> com.coralogixapis.dashboards.v1.services.SearchMetricsTimeSeriesRequest
	3,  // 57: com.coralogixapis.dashboards.v1.services.MetricsDataSourceService.SearchMetricsTimeValues:input_type -> com.coralogixapis.dashboards.v1.services.SearchMetricsTimeValuesRequest
	5,  // 58: com.coralogixapis.dashboards.v1.services.MetricsDataSourceService.SearchMetricsGroupedSeries:input_type -> com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedSeriesRequest
	7,  // 59: com.coralogixapis.dashboards.v1.services.MetricsDataSourceService.SearchMetricsGroupedTimeSeries:input_type -> com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedTimeSeriesRequest
	9,  // 60: com.coralogixapis.dashboards.v1.services.MetricsDataSourceService.SearchMetricsEvents:input_type -> com.coralogixapis.dashboards.v1.services.SearchMetricsEventsRequest
	12, // 61: com.coralogixapis.dashboards.v1.services.MetricsDataSourceService.SearchMetricsAnnotationEvents:input_type -> com.coralogixapis.dashboards.v1.services.SearchMetricsAnnotationEventsRequest
	2,  // 62: com.coralogixapis.dashboards.v1.services.MetricsDataSourceService.SearchMetricsTimeSeries:output_type -> com.coralogixapis.dashboards.v1.services.SearchMetricsTimeSeriesResponse
	4,  // 63: com.coralogixapis.dashboards.v1.services.MetricsDataSourceService.SearchMetricsTimeValues:output_type -> com.coralogixapis.dashboards.v1.services.SearchMetricsTimeValuesResponse
	6,  // 64: com.coralogixapis.dashboards.v1.services.MetricsDataSourceService.SearchMetricsGroupedSeries:output_type -> com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedSeriesResponse
	8,  // 65: com.coralogixapis.dashboards.v1.services.MetricsDataSourceService.SearchMetricsGroupedTimeSeries:output_type -> com.coralogixapis.dashboards.v1.services.SearchMetricsGroupedTimeSeriesResponse
	10, // 66: com.coralogixapis.dashboards.v1.services.MetricsDataSourceService.SearchMetricsEvents:output_type -> com.coralogixapis.dashboards.v1.services.SearchMetricsEventsResponse
	13, // 67: com.coralogixapis.dashboards.v1.services.MetricsDataSourceService.SearchMetricsAnnotationEvents:output_type -> com.coralogixapis.dashboards.v1.services.SearchMetricsAnnotationEventsResponse
	62, // [62:68] is the sub-list for method output_type
	56, // [56:62] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_init() }
func file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_init() {
	if File_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto != nil {
		return
	}
	file_com_coralogixapis_dashboards_v1_ast_annotation_proto_init()
	file_com_coralogixapis_dashboards_v1_ast_filter_proto_init()
	file_com_coralogixapis_dashboards_v1_audit_log_proto_init()
	file_com_coralogixapis_dashboards_v1_common_annotation_event_proto_init()
	file_com_coralogixapis_dashboards_v1_common_grouped_series_proto_init()
	file_com_coralogixapis_dashboards_v1_common_labelled_value_proto_init()
	file_com_coralogixapis_dashboards_v1_common_order_direction_proto_init()
	file_com_coralogixapis_dashboards_v1_common_time_frame_proto_init()
	file_com_coralogixapis_dashboards_v1_common_time_series_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMetricsTimeSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMetricsTimeSeriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMetricsTimeValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMetricsTimeValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMetricsGroupedSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMetricsGroupedSeriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMetricsGroupedTimeSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMetricsGroupedTimeSeriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMetricsEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMetricsEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMetricsAnnotationEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMetricsAnnotationEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMetricsGroupedSeriesRequest_Limit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMetricsGroupedTimeSeriesRequest_GroupBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMetricsEventsRequest_OrderBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMetricsEventsRequest_Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsEvent_Aggregation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*SearchMetricsEventsRequest_OrderBy_Label)(nil),
		(*SearchMetricsEventsRequest_OrderBy_AggType)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_depIdxs,
		EnumInfos:         file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_enumTypes,
		MessageInfos:      file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto = out.File
	file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_rawDesc = nil
	file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_goTypes = nil
	file_com_coralogixapis_dashboards_v1_services_metrics_data_source_service_proto_depIdxs = nil
}
