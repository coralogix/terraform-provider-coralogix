// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.2
// source: com/coralogixapis/dashboards/v1/services/archive_spans_data_source_service.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SearchArchiveSpansTimeSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WidgetId          *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=widget_id,json=widgetId,proto3" json:"widget_id,omitempty"`
	TimeFrame         *TimeFrame                `protobuf:"bytes,2,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	Limit             *wrapperspb.Int32Value    `protobuf:"bytes,3,opt,name=limit,proto3" json:"limit,omitempty"`
	RequestParamsHash *wrapperspb.StringValue   `protobuf:"bytes,4,opt,name=request_params_hash,json=requestParamsHash,proto3" json:"request_params_hash,omitempty"`
	Query             *SerializedDataprimeQuery `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`
	QueryRaw          *DataprimeQuery           `protobuf:"bytes,6,opt,name=query_raw,json=queryRaw,proto3" json:"query_raw,omitempty"`
	AggregationKeys   []*wrapperspb.StringValue `protobuf:"bytes,7,rep,name=aggregation_keys,json=aggregationKeys,proto3" json:"aggregation_keys,omitempty"`
}

func (x *SearchArchiveSpansTimeSeriesRequest) Reset() {
	*x = SearchArchiveSpansTimeSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArchiveSpansTimeSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArchiveSpansTimeSeriesRequest) ProtoMessage() {}

func (x *SearchArchiveSpansTimeSeriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArchiveSpansTimeSeriesRequest.ProtoReflect.Descriptor instead.
func (*SearchArchiveSpansTimeSeriesRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDescGZIP(), []int{0}
}

func (x *SearchArchiveSpansTimeSeriesRequest) GetWidgetId() *wrapperspb.StringValue {
	if x != nil {
		return x.WidgetId
	}
	return nil
}

func (x *SearchArchiveSpansTimeSeriesRequest) GetTimeFrame() *TimeFrame {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

func (x *SearchArchiveSpansTimeSeriesRequest) GetLimit() *wrapperspb.Int32Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *SearchArchiveSpansTimeSeriesRequest) GetRequestParamsHash() *wrapperspb.StringValue {
	if x != nil {
		return x.RequestParamsHash
	}
	return nil
}

func (x *SearchArchiveSpansTimeSeriesRequest) GetQuery() *SerializedDataprimeQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SearchArchiveSpansTimeSeriesRequest) GetQueryRaw() *DataprimeQuery {
	if x != nil {
		return x.QueryRaw
	}
	return nil
}

func (x *SearchArchiveSpansTimeSeriesRequest) GetAggregationKeys() []*wrapperspb.StringValue {
	if x != nil {
		return x.AggregationKeys
	}
	return nil
}

type SearchArchiveSpansTimeSeriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeSeries []*TimeSeries          `protobuf:"bytes,1,rep,name=time_series,json=timeSeries,proto3" json:"time_series,omitempty"`
	Total      *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *SearchArchiveSpansTimeSeriesResponse) Reset() {
	*x = SearchArchiveSpansTimeSeriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArchiveSpansTimeSeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArchiveSpansTimeSeriesResponse) ProtoMessage() {}

func (x *SearchArchiveSpansTimeSeriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArchiveSpansTimeSeriesResponse.ProtoReflect.Descriptor instead.
func (*SearchArchiveSpansTimeSeriesResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDescGZIP(), []int{1}
}

func (x *SearchArchiveSpansTimeSeriesResponse) GetTimeSeries() []*TimeSeries {
	if x != nil {
		return x.TimeSeries
	}
	return nil
}

func (x *SearchArchiveSpansTimeSeriesResponse) GetTotal() *wrapperspb.Int64Value {
	if x != nil {
		return x.Total
	}
	return nil
}

type SearchArchiveSpansEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WidgetId          *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=widget_id,json=widgetId,proto3" json:"widget_id,omitempty"`
	TimeFrame         *TimeFrame                `protobuf:"bytes,2,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	Pagination        *Pagination               `protobuf:"bytes,6,opt,name=pagination,proto3" json:"pagination,omitempty"`
	RequestParamsHash *wrapperspb.StringValue   `protobuf:"bytes,7,opt,name=request_params_hash,json=requestParamsHash,proto3" json:"request_params_hash,omitempty"`
	Query             *SerializedDataprimeQuery `protobuf:"bytes,8,opt,name=query,proto3" json:"query,omitempty"`
	QueryRaw          *DataprimeQuery           `protobuf:"bytes,9,opt,name=query_raw,json=queryRaw,proto3" json:"query_raw,omitempty"`
}

func (x *SearchArchiveSpansEventsRequest) Reset() {
	*x = SearchArchiveSpansEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArchiveSpansEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArchiveSpansEventsRequest) ProtoMessage() {}

func (x *SearchArchiveSpansEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArchiveSpansEventsRequest.ProtoReflect.Descriptor instead.
func (*SearchArchiveSpansEventsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDescGZIP(), []int{2}
}

func (x *SearchArchiveSpansEventsRequest) GetWidgetId() *wrapperspb.StringValue {
	if x != nil {
		return x.WidgetId
	}
	return nil
}

func (x *SearchArchiveSpansEventsRequest) GetTimeFrame() *TimeFrame {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

func (x *SearchArchiveSpansEventsRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *SearchArchiveSpansEventsRequest) GetRequestParamsHash() *wrapperspb.StringValue {
	if x != nil {
		return x.RequestParamsHash
	}
	return nil
}

func (x *SearchArchiveSpansEventsRequest) GetQuery() *SerializedDataprimeQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SearchArchiveSpansEventsRequest) GetQueryRaw() *DataprimeQuery {
	if x != nil {
		return x.QueryRaw
	}
	return nil
}

type SearchArchiveSpansEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events       []*ArchiveSpansEvent   `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	TotalFetched *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=total_fetched,json=totalFetched,proto3" json:"total_fetched,omitempty"` // How many events were fetched before pagination applied.
}

func (x *SearchArchiveSpansEventsResponse) Reset() {
	*x = SearchArchiveSpansEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArchiveSpansEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArchiveSpansEventsResponse) ProtoMessage() {}

func (x *SearchArchiveSpansEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArchiveSpansEventsResponse.ProtoReflect.Descriptor instead.
func (*SearchArchiveSpansEventsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDescGZIP(), []int{3}
}

func (x *SearchArchiveSpansEventsResponse) GetEvents() []*ArchiveSpansEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *SearchArchiveSpansEventsResponse) GetTotalFetched() *wrapperspb.Int32Value {
	if x != nil {
		return x.TotalFetched
	}
	return nil
}

type SearchArchiveSpansEventsCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WidgetId          *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=widget_id,json=widgetId,proto3" json:"widget_id,omitempty"`
	TimeFrame         *TimeFrame                `protobuf:"bytes,2,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	RequestParamsHash *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=request_params_hash,json=requestParamsHash,proto3" json:"request_params_hash,omitempty"`
	Query             *SerializedDataprimeQuery `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	QueryRaw          *DataprimeQuery           `protobuf:"bytes,5,opt,name=query_raw,json=queryRaw,proto3" json:"query_raw,omitempty"`
}

func (x *SearchArchiveSpansEventsCountRequest) Reset() {
	*x = SearchArchiveSpansEventsCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArchiveSpansEventsCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArchiveSpansEventsCountRequest) ProtoMessage() {}

func (x *SearchArchiveSpansEventsCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArchiveSpansEventsCountRequest.ProtoReflect.Descriptor instead.
func (*SearchArchiveSpansEventsCountRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDescGZIP(), []int{4}
}

func (x *SearchArchiveSpansEventsCountRequest) GetWidgetId() *wrapperspb.StringValue {
	if x != nil {
		return x.WidgetId
	}
	return nil
}

func (x *SearchArchiveSpansEventsCountRequest) GetTimeFrame() *TimeFrame {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

func (x *SearchArchiveSpansEventsCountRequest) GetRequestParamsHash() *wrapperspb.StringValue {
	if x != nil {
		return x.RequestParamsHash
	}
	return nil
}

func (x *SearchArchiveSpansEventsCountRequest) GetQuery() *SerializedDataprimeQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SearchArchiveSpansEventsCountRequest) GetQueryRaw() *DataprimeQuery {
	if x != nil {
		return x.QueryRaw
	}
	return nil
}

type SearchArchiveSpansEventsCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *SearchArchiveSpansEventsCountResponse) Reset() {
	*x = SearchArchiveSpansEventsCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArchiveSpansEventsCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArchiveSpansEventsCountResponse) ProtoMessage() {}

func (x *SearchArchiveSpansEventsCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArchiveSpansEventsCountResponse.ProtoReflect.Descriptor instead.
func (*SearchArchiveSpansEventsCountResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDescGZIP(), []int{5}
}

func (x *SearchArchiveSpansEventsCountResponse) GetCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.Count
	}
	return nil
}

type ArchiveSpansEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpanId       *wrapperspb.StringValue     `protobuf:"bytes,1,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	TraceId      *wrapperspb.StringValue     `protobuf:"bytes,2,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	ParentSpanId *wrapperspb.StringValue     `protobuf:"bytes,3,opt,name=parent_span_id,json=parentSpanId,proto3" json:"parent_span_id,omitempty"`
	Metadata     *ArchiveSpansEvent_Metadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	StartTime    *timestamppb.Timestamp      `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Duration     *durationpb.Duration        `protobuf:"bytes,6,opt,name=duration,proto3" json:"duration,omitempty"`
	Tags         []*ArchiveSpansEvent_Tag    `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	ProcessTags  []*ArchiveSpansEvent_Tag    `protobuf:"bytes,8,rep,name=process_tags,json=processTags,proto3" json:"process_tags,omitempty"`
	Logs         []*ArchiveSpansEvent_Log    `protobuf:"bytes,9,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *ArchiveSpansEvent) Reset() {
	*x = ArchiveSpansEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveSpansEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveSpansEvent) ProtoMessage() {}

func (x *ArchiveSpansEvent) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveSpansEvent.ProtoReflect.Descriptor instead.
func (*ArchiveSpansEvent) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDescGZIP(), []int{6}
}

func (x *ArchiveSpansEvent) GetSpanId() *wrapperspb.StringValue {
	if x != nil {
		return x.SpanId
	}
	return nil
}

func (x *ArchiveSpansEvent) GetTraceId() *wrapperspb.StringValue {
	if x != nil {
		return x.TraceId
	}
	return nil
}

func (x *ArchiveSpansEvent) GetParentSpanId() *wrapperspb.StringValue {
	if x != nil {
		return x.ParentSpanId
	}
	return nil
}

func (x *ArchiveSpansEvent) GetMetadata() *ArchiveSpansEvent_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ArchiveSpansEvent) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ArchiveSpansEvent) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *ArchiveSpansEvent) GetTags() []*ArchiveSpansEvent_Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ArchiveSpansEvent) GetProcessTags() []*ArchiveSpansEvent_Tag {
	if x != nil {
		return x.ProcessTags
	}
	return nil
}

func (x *ArchiveSpansEvent) GetLogs() []*ArchiveSpansEvent_Log {
	if x != nil {
		return x.Logs
	}
	return nil
}

type SearchArchiveSpansEventGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WidgetId          *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=widget_id,json=widgetId,proto3" json:"widget_id,omitempty"`
	TimeFrame         *TimeFrame                `protobuf:"bytes,2,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	RequestParamsHash *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=request_params_hash,json=requestParamsHash,proto3" json:"request_params_hash,omitempty"`
	Query             *SerializedDataprimeQuery `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	QueryRaw          *DataprimeQuery           `protobuf:"bytes,5,opt,name=query_raw,json=queryRaw,proto3" json:"query_raw,omitempty"`
	GroupByKeys       []*wrapperspb.StringValue `protobuf:"bytes,6,rep,name=group_by_keys,json=groupByKeys,proto3" json:"group_by_keys,omitempty"`
	AggregationKeys   []*wrapperspb.StringValue `protobuf:"bytes,7,rep,name=aggregation_keys,json=aggregationKeys,proto3" json:"aggregation_keys,omitempty"`
	Pagination        *Pagination               `protobuf:"bytes,8,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *SearchArchiveSpansEventGroupsRequest) Reset() {
	*x = SearchArchiveSpansEventGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArchiveSpansEventGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArchiveSpansEventGroupsRequest) ProtoMessage() {}

func (x *SearchArchiveSpansEventGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArchiveSpansEventGroupsRequest.ProtoReflect.Descriptor instead.
func (*SearchArchiveSpansEventGroupsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDescGZIP(), []int{7}
}

func (x *SearchArchiveSpansEventGroupsRequest) GetWidgetId() *wrapperspb.StringValue {
	if x != nil {
		return x.WidgetId
	}
	return nil
}

func (x *SearchArchiveSpansEventGroupsRequest) GetTimeFrame() *TimeFrame {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

func (x *SearchArchiveSpansEventGroupsRequest) GetRequestParamsHash() *wrapperspb.StringValue {
	if x != nil {
		return x.RequestParamsHash
	}
	return nil
}

func (x *SearchArchiveSpansEventGroupsRequest) GetQuery() *SerializedDataprimeQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SearchArchiveSpansEventGroupsRequest) GetQueryRaw() *DataprimeQuery {
	if x != nil {
		return x.QueryRaw
	}
	return nil
}

func (x *SearchArchiveSpansEventGroupsRequest) GetGroupByKeys() []*wrapperspb.StringValue {
	if x != nil {
		return x.GroupByKeys
	}
	return nil
}

func (x *SearchArchiveSpansEventGroupsRequest) GetAggregationKeys() []*wrapperspb.StringValue {
	if x != nil {
		return x.AggregationKeys
	}
	return nil
}

func (x *SearchArchiveSpansEventGroupsRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type SearchArchiveSpansEventGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*MultiGroup `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *SearchArchiveSpansEventGroupsResponse) Reset() {
	*x = SearchArchiveSpansEventGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArchiveSpansEventGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArchiveSpansEventGroupsResponse) ProtoMessage() {}

func (x *SearchArchiveSpansEventGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArchiveSpansEventGroupsResponse.ProtoReflect.Descriptor instead.
func (*SearchArchiveSpansEventGroupsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDescGZIP(), []int{8}
}

func (x *SearchArchiveSpansEventGroupsResponse) GetGroups() []*MultiGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

type SearchArchiveGroupedSpansSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WidgetId          *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=widget_id,json=widgetId,proto3" json:"widget_id,omitempty"`
	TimeFrame         *TimeFrame                `protobuf:"bytes,2,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	RequestParamsHash *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=request_params_hash,json=requestParamsHash,proto3" json:"request_params_hash,omitempty"`
	Query             *SerializedDataprimeQuery `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	QueryRaw          *DataprimeQuery           `protobuf:"bytes,5,opt,name=query_raw,json=queryRaw,proto3" json:"query_raw,omitempty"`
	GroupByKeys       []*wrapperspb.StringValue `protobuf:"bytes,6,rep,name=group_by_keys,json=groupByKeys,proto3" json:"group_by_keys,omitempty"` // Have to be ordered for correctly structured results.
	AggregationKey    *wrapperspb.StringValue   `protobuf:"bytes,7,opt,name=aggregation_key,json=aggregationKey,proto3" json:"aggregation_key,omitempty"`
	Limits            []*GroupLimit             `protobuf:"bytes,8,rep,name=limits,proto3" json:"limits,omitempty"`
}

func (x *SearchArchiveGroupedSpansSeriesRequest) Reset() {
	*x = SearchArchiveGroupedSpansSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArchiveGroupedSpansSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArchiveGroupedSpansSeriesRequest) ProtoMessage() {}

func (x *SearchArchiveGroupedSpansSeriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArchiveGroupedSpansSeriesRequest.ProtoReflect.Descriptor instead.
func (*SearchArchiveGroupedSpansSeriesRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDescGZIP(), []int{9}
}

func (x *SearchArchiveGroupedSpansSeriesRequest) GetWidgetId() *wrapperspb.StringValue {
	if x != nil {
		return x.WidgetId
	}
	return nil
}

func (x *SearchArchiveGroupedSpansSeriesRequest) GetTimeFrame() *TimeFrame {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

func (x *SearchArchiveGroupedSpansSeriesRequest) GetRequestParamsHash() *wrapperspb.StringValue {
	if x != nil {
		return x.RequestParamsHash
	}
	return nil
}

func (x *SearchArchiveGroupedSpansSeriesRequest) GetQuery() *SerializedDataprimeQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SearchArchiveGroupedSpansSeriesRequest) GetQueryRaw() *DataprimeQuery {
	if x != nil {
		return x.QueryRaw
	}
	return nil
}

func (x *SearchArchiveGroupedSpansSeriesRequest) GetGroupByKeys() []*wrapperspb.StringValue {
	if x != nil {
		return x.GroupByKeys
	}
	return nil
}

func (x *SearchArchiveGroupedSpansSeriesRequest) GetAggregationKey() *wrapperspb.StringValue {
	if x != nil {
		return x.AggregationKey
	}
	return nil
}

func (x *SearchArchiveGroupedSpansSeriesRequest) GetLimits() []*GroupLimit {
	if x != nil {
		return x.Limits
	}
	return nil
}

type SearchArchiveGroupedSpansSeriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Series []*GroupedSeries  `protobuf:"bytes,1,rep,name=series,proto3" json:"series,omitempty"`
	Meta   map[string]string `protobuf:"bytes,2,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SearchArchiveGroupedSpansSeriesResponse) Reset() {
	*x = SearchArchiveGroupedSpansSeriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArchiveGroupedSpansSeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArchiveGroupedSpansSeriesResponse) ProtoMessage() {}

func (x *SearchArchiveGroupedSpansSeriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArchiveGroupedSpansSeriesResponse.ProtoReflect.Descriptor instead.
func (*SearchArchiveGroupedSpansSeriesResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDescGZIP(), []int{10}
}

func (x *SearchArchiveGroupedSpansSeriesResponse) GetSeries() []*GroupedSeries {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *SearchArchiveGroupedSpansSeriesResponse) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

// Assumes timestamp is aliased to `timestamp` in the results.
type SearchArchiveGroupedSpansTimeSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WidgetId          *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=widget_id,json=widgetId,proto3" json:"widget_id,omitempty"`
	TimeFrame         *TimeFrame                `protobuf:"bytes,2,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	RequestParamsHash *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=request_params_hash,json=requestParamsHash,proto3" json:"request_params_hash,omitempty"`
	Query             *SerializedDataprimeQuery `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	QueryRaw          *DataprimeQuery           `protobuf:"bytes,5,opt,name=query_raw,json=queryRaw,proto3" json:"query_raw,omitempty"`
	GroupByKeys       []*wrapperspb.StringValue `protobuf:"bytes,6,rep,name=group_by_keys,json=groupByKeys,proto3" json:"group_by_keys,omitempty"` // Expects up to 1 element for now, without `timestamp`.
	AggregationKey    *wrapperspb.StringValue   `protobuf:"bytes,7,opt,name=aggregation_key,json=aggregationKey,proto3" json:"aggregation_key,omitempty"`
	Limits            []*GroupLimit             `protobuf:"bytes,8,rep,name=limits,proto3" json:"limits,omitempty"`
}

func (x *SearchArchiveGroupedSpansTimeSeriesRequest) Reset() {
	*x = SearchArchiveGroupedSpansTimeSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArchiveGroupedSpansTimeSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArchiveGroupedSpansTimeSeriesRequest) ProtoMessage() {}

func (x *SearchArchiveGroupedSpansTimeSeriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArchiveGroupedSpansTimeSeriesRequest.ProtoReflect.Descriptor instead.
func (*SearchArchiveGroupedSpansTimeSeriesRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDescGZIP(), []int{11}
}

func (x *SearchArchiveGroupedSpansTimeSeriesRequest) GetWidgetId() *wrapperspb.StringValue {
	if x != nil {
		return x.WidgetId
	}
	return nil
}

func (x *SearchArchiveGroupedSpansTimeSeriesRequest) GetTimeFrame() *TimeFrame {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

func (x *SearchArchiveGroupedSpansTimeSeriesRequest) GetRequestParamsHash() *wrapperspb.StringValue {
	if x != nil {
		return x.RequestParamsHash
	}
	return nil
}

func (x *SearchArchiveGroupedSpansTimeSeriesRequest) GetQuery() *SerializedDataprimeQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SearchArchiveGroupedSpansTimeSeriesRequest) GetQueryRaw() *DataprimeQuery {
	if x != nil {
		return x.QueryRaw
	}
	return nil
}

func (x *SearchArchiveGroupedSpansTimeSeriesRequest) GetGroupByKeys() []*wrapperspb.StringValue {
	if x != nil {
		return x.GroupByKeys
	}
	return nil
}

func (x *SearchArchiveGroupedSpansTimeSeriesRequest) GetAggregationKey() *wrapperspb.StringValue {
	if x != nil {
		return x.AggregationKey
	}
	return nil
}

func (x *SearchArchiveGroupedSpansTimeSeriesRequest) GetLimits() []*GroupLimit {
	if x != nil {
		return x.Limits
	}
	return nil
}

type SearchArchiveGroupedSpansTimeSeriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Series *GroupedSeries    `protobuf:"bytes,1,opt,name=series,proto3" json:"series,omitempty"`
	Meta   map[string]string `protobuf:"bytes,2,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SearchArchiveGroupedSpansTimeSeriesResponse) Reset() {
	*x = SearchArchiveGroupedSpansTimeSeriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArchiveGroupedSpansTimeSeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArchiveGroupedSpansTimeSeriesResponse) ProtoMessage() {}

func (x *SearchArchiveGroupedSpansTimeSeriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArchiveGroupedSpansTimeSeriesResponse.ProtoReflect.Descriptor instead.
func (*SearchArchiveGroupedSpansTimeSeriesResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDescGZIP(), []int{12}
}

func (x *SearchArchiveGroupedSpansTimeSeriesResponse) GetSeries() *GroupedSeries {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *SearchArchiveGroupedSpansTimeSeriesResponse) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

type SearchArchiveSpansTimeValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WidgetId          *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=widget_id,json=widgetId,proto3" json:"widget_id,omitempty"`
	TimeFrame         *TimeFrame                `protobuf:"bytes,2,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	RequestParamsHash *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=request_params_hash,json=requestParamsHash,proto3" json:"request_params_hash,omitempty"`
	Query             *SerializedDataprimeQuery `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	QueryRaw          *DataprimeQuery           `protobuf:"bytes,5,opt,name=query_raw,json=queryRaw,proto3" json:"query_raw,omitempty"`
	AggregationKey    *wrapperspb.StringValue   `protobuf:"bytes,6,opt,name=aggregation_key,json=aggregationKey,proto3" json:"aggregation_key,omitempty"`
}

func (x *SearchArchiveSpansTimeValueRequest) Reset() {
	*x = SearchArchiveSpansTimeValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArchiveSpansTimeValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArchiveSpansTimeValueRequest) ProtoMessage() {}

func (x *SearchArchiveSpansTimeValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArchiveSpansTimeValueRequest.ProtoReflect.Descriptor instead.
func (*SearchArchiveSpansTimeValueRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDescGZIP(), []int{13}
}

func (x *SearchArchiveSpansTimeValueRequest) GetWidgetId() *wrapperspb.StringValue {
	if x != nil {
		return x.WidgetId
	}
	return nil
}

func (x *SearchArchiveSpansTimeValueRequest) GetTimeFrame() *TimeFrame {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

func (x *SearchArchiveSpansTimeValueRequest) GetRequestParamsHash() *wrapperspb.StringValue {
	if x != nil {
		return x.RequestParamsHash
	}
	return nil
}

func (x *SearchArchiveSpansTimeValueRequest) GetQuery() *SerializedDataprimeQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SearchArchiveSpansTimeValueRequest) GetQueryRaw() *DataprimeQuery {
	if x != nil {
		return x.QueryRaw
	}
	return nil
}

func (x *SearchArchiveSpansTimeValueRequest) GetAggregationKey() *wrapperspb.StringValue {
	if x != nil {
		return x.AggregationKey
	}
	return nil
}

type SearchArchiveSpansTimeValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SearchArchiveSpansTimeValueResponse) Reset() {
	*x = SearchArchiveSpansTimeValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArchiveSpansTimeValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArchiveSpansTimeValueResponse) ProtoMessage() {}

func (x *SearchArchiveSpansTimeValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArchiveSpansTimeValueResponse.ProtoReflect.Descriptor instead.
func (*SearchArchiveSpansTimeValueResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDescGZIP(), []int{14}
}

func (x *SearchArchiveSpansTimeValueResponse) GetValue() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type SearchArchiveSpansGroupedValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WidgetId          *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=widget_id,json=widgetId,proto3" json:"widget_id,omitempty"`
	TimeFrame         *TimeFrame                `protobuf:"bytes,2,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	RequestParamsHash *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=request_params_hash,json=requestParamsHash,proto3" json:"request_params_hash,omitempty"`
	Query             *SerializedDataprimeQuery `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	QueryRaw          *DataprimeQuery           `protobuf:"bytes,5,opt,name=query_raw,json=queryRaw,proto3" json:"query_raw,omitempty"`
	GroupByKeys       []*wrapperspb.StringValue `protobuf:"bytes,6,rep,name=group_by_keys,json=groupByKeys,proto3" json:"group_by_keys,omitempty"`
	AggregationKeys   *wrapperspb.StringValue   `protobuf:"bytes,7,opt,name=aggregation_keys,json=aggregationKeys,proto3" json:"aggregation_keys,omitempty"`
	Limit             *wrapperspb.Int32Value    `protobuf:"bytes,8,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SearchArchiveSpansGroupedValuesRequest) Reset() {
	*x = SearchArchiveSpansGroupedValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArchiveSpansGroupedValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArchiveSpansGroupedValuesRequest) ProtoMessage() {}

func (x *SearchArchiveSpansGroupedValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArchiveSpansGroupedValuesRequest.ProtoReflect.Descriptor instead.
func (*SearchArchiveSpansGroupedValuesRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDescGZIP(), []int{15}
}

func (x *SearchArchiveSpansGroupedValuesRequest) GetWidgetId() *wrapperspb.StringValue {
	if x != nil {
		return x.WidgetId
	}
	return nil
}

func (x *SearchArchiveSpansGroupedValuesRequest) GetTimeFrame() *TimeFrame {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

func (x *SearchArchiveSpansGroupedValuesRequest) GetRequestParamsHash() *wrapperspb.StringValue {
	if x != nil {
		return x.RequestParamsHash
	}
	return nil
}

func (x *SearchArchiveSpansGroupedValuesRequest) GetQuery() *SerializedDataprimeQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SearchArchiveSpansGroupedValuesRequest) GetQueryRaw() *DataprimeQuery {
	if x != nil {
		return x.QueryRaw
	}
	return nil
}

func (x *SearchArchiveSpansGroupedValuesRequest) GetGroupByKeys() []*wrapperspb.StringValue {
	if x != nil {
		return x.GroupByKeys
	}
	return nil
}

func (x *SearchArchiveSpansGroupedValuesRequest) GetAggregationKeys() *wrapperspb.StringValue {
	if x != nil {
		return x.AggregationKeys
	}
	return nil
}

func (x *SearchArchiveSpansGroupedValuesRequest) GetLimit() *wrapperspb.Int32Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

type SearchArchiveSpansGroupedValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups          []*Group               `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	IsLimitExceeded bool                   `protobuf:"varint,2,opt,name=is_limit_exceeded,json=isLimitExceeded,proto3" json:"is_limit_exceeded,omitempty"`
	Total           *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=total,proto3" json:"total,omitempty"`
	Meta            map[string]string      `protobuf:"bytes,4,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SearchArchiveSpansGroupedValuesResponse) Reset() {
	*x = SearchArchiveSpansGroupedValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArchiveSpansGroupedValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArchiveSpansGroupedValuesResponse) ProtoMessage() {}

func (x *SearchArchiveSpansGroupedValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArchiveSpansGroupedValuesResponse.ProtoReflect.Descriptor instead.
func (*SearchArchiveSpansGroupedValuesResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDescGZIP(), []int{16}
}

func (x *SearchArchiveSpansGroupedValuesResponse) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *SearchArchiveSpansGroupedValuesResponse) GetIsLimitExceeded() bool {
	if x != nil {
		return x.IsLimitExceeded
	}
	return false
}

func (x *SearchArchiveSpansGroupedValuesResponse) GetTotal() *wrapperspb.Int64Value {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *SearchArchiveSpansGroupedValuesResponse) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

type ArchiveSpansEvent_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationName *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	SubsystemName   *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=subsystem_name,json=subsystemName,proto3" json:"subsystem_name,omitempty"`
	ServiceName     *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	OperationName   *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=operation_name,json=operationName,proto3" json:"operation_name,omitempty"`
}

func (x *ArchiveSpansEvent_Metadata) Reset() {
	*x = ArchiveSpansEvent_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveSpansEvent_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveSpansEvent_Metadata) ProtoMessage() {}

func (x *ArchiveSpansEvent_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveSpansEvent_Metadata.ProtoReflect.Descriptor instead.
func (*ArchiveSpansEvent_Metadata) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ArchiveSpansEvent_Metadata) GetApplicationName() *wrapperspb.StringValue {
	if x != nil {
		return x.ApplicationName
	}
	return nil
}

func (x *ArchiveSpansEvent_Metadata) GetSubsystemName() *wrapperspb.StringValue {
	if x != nil {
		return x.SubsystemName
	}
	return nil
}

func (x *ArchiveSpansEvent_Metadata) GetServiceName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *ArchiveSpansEvent_Metadata) GetOperationName() *wrapperspb.StringValue {
	if x != nil {
		return x.OperationName
	}
	return nil
}

type ArchiveSpansEvent_Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ArchiveSpansEvent_Tag) Reset() {
	*x = ArchiveSpansEvent_Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveSpansEvent_Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveSpansEvent_Tag) ProtoMessage() {}

func (x *ArchiveSpansEvent_Tag) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveSpansEvent_Tag.ProtoReflect.Descriptor instead.
func (*ArchiveSpansEvent_Tag) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDescGZIP(), []int{6, 1}
}

func (x *ArchiveSpansEvent_Tag) GetKey() *wrapperspb.StringValue {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ArchiveSpansEvent_Tag) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type ArchiveSpansEvent_Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp             `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Fields    map[string]*wrapperspb.StringValue `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ArchiveSpansEvent_Log) Reset() {
	*x = ArchiveSpansEvent_Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveSpansEvent_Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveSpansEvent_Log) ProtoMessage() {}

func (x *ArchiveSpansEvent_Log) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveSpansEvent_Log.ProtoReflect.Descriptor instead.
func (*ArchiveSpansEvent_Log) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDescGZIP(), []int{6, 2}
}

func (x *ArchiveSpansEvent_Log) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ArchiveSpansEvent_Log) GetFields() map[string]*wrapperspb.StringValue {
	if x != nil {
		return x.Fields
	}
	return nil
}

var File_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto protoreflect.FileDescriptor

var file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDesc = []byte{
	0x0a, 0x50, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x28, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x2f, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x38, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x32, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x04, 0x0a, 0x23, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x09, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x31,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x56, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x53, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x72, 0x61, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61, 0x77, 0x12, 0x47, 0x0a, 0x10,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x24, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53,
	0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x8f, 0x04, 0x0a, 0x1f, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x77, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x77, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x13, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x56, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x53, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x08, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x61, 0x77, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x4a, 0x04, 0x08, 0x0b,
	0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x22, 0xb9, 0x01, 0x0a, 0x20, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x53, 0x70, 0x61, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x22, 0xae, 0x03, 0x0a, 0x24, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a,
	0x09, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x56, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x70,
	0x72, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x53, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x08, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x61, 0x77, 0x22, 0x5a, 0x0a, 0x25, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xb5, 0x0a, 0x0a, 0x11, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61,
	0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x53, 0x70, 0x61, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x53, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x53, 0x70, 0x61, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x62, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61,
	0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x67, 0x73, 0x12, 0x53, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x1a, 0x9e, 0x02,
	0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x69,
	0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xfd, 0x01, 0x0a, 0x03, 0x4c, 0x6f,
	0x67, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x63, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70,
	0x61, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x1a, 0x57, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8d, 0x05, 0x0a, 0x24, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12,
	0x4c, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x56, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x53, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72,
	0x61, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61, 0x77, 0x12, 0x40, 0x0a, 0x0d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x47, 0x0a, 0x10,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x52, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x73, 0x0a, 0x25, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x85,
	0x05, 0x0a, 0x26, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x77, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x77, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x56, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x53, 0x0a, 0x09,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61,
	0x77, 0x12, 0x40, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x06, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x06,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0xa2, 0x02, 0x0a, 0x27, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x53,
	0x70, 0x61, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x65, 0x64, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x6f, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x5b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x53,
	0x70, 0x61, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x89, 0x05, 0x0a, 0x2a,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x65, 0x64, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x77, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x77, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x56, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x53, 0x0a,
	0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x69, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x61, 0x77, 0x12, 0x40, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x06, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0xaa, 0x02, 0x0a, 0x2b, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64,
	0x53, 0x70, 0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x73, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x65, 0x64, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x4d,
	0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xf3, 0x03, 0x0a, 0x22, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x77,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x77, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x56, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x53,
	0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70,
	0x72, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x61, 0x77, 0x12, 0x45, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x59, 0x0a, 0x23, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xee, 0x04, 0x0a, 0x26, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x39, 0x0a, 0x09, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a,
	0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x56, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x53, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x77,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x08,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61, 0x77, 0x12, 0x40, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x62, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xf9, 0x02, 0x0a, 0x27, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x6f, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53,
	0x70, 0x61, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x65, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x32, 0x87, 0x0f, 0x0a, 0x1d, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70,
	0x61, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0xe5, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70,
	0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61,
	0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0xba, 0xb8, 0x02, 0x22, 0x0a, 0x20, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x20, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x20, 0x73, 0x70, 0x61, 0x6e, 0x73,
	0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0xd4, 0x01, 0x0a,
	0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70,
	0x61, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61,
	0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x21, 0xba, 0xb8, 0x02, 0x1d, 0x0a, 0x1b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x20, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x20, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0xe9, 0x01, 0x0a, 0x1d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70,
	0x61, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70,
	0x61, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0xba, 0xb8, 0x02, 0x23, 0x0a, 0x21, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x20, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x20, 0x73, 0x70, 0x61,
	0x6e, 0x73, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0xe9, 0x01, 0x0a, 0x1d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x4e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x4f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x27, 0xba, 0xb8, 0x02, 0x23, 0x0a, 0x21, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x20, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x20, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x20, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0xf1, 0x01, 0x0a, 0x1f,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x65, 0x64, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x53,
	0x70, 0x61, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x51, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65,
	0x64, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0xba, 0xb8, 0x02, 0x25, 0x0a, 0x23, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x20, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x65, 0x64, 0x20, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x20, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x82, 0x02, 0x0a, 0x23, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x54, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x55, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x53, 0x70, 0x61,
	0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0xba, 0xb8, 0x02, 0x2a, 0x0a, 0x28, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x20, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x65, 0x64, 0x20, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x12, 0xe1, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x4c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61,
	0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x4d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x25, 0xba, 0xb8, 0x02, 0x21, 0x0a, 0x1f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x20, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x20, 0x74, 0x69,
	0x6d, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xf1, 0x01, 0x0a, 0x1f, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x50, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x51,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x29, 0xba, 0xb8, 0x02, 0x25, 0x0a, 0x23, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x20, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x20, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x65, 0x64, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDescOnce sync.Once
	file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDescData = file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDesc
)

func file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDescData)
	})
	return file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDescData
}

var file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_goTypes = []any{
	(*SearchArchiveSpansTimeSeriesRequest)(nil),         // 0: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansTimeSeriesRequest
	(*SearchArchiveSpansTimeSeriesResponse)(nil),        // 1: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansTimeSeriesResponse
	(*SearchArchiveSpansEventsRequest)(nil),             // 2: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventsRequest
	(*SearchArchiveSpansEventsResponse)(nil),            // 3: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventsResponse
	(*SearchArchiveSpansEventsCountRequest)(nil),        // 4: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventsCountRequest
	(*SearchArchiveSpansEventsCountResponse)(nil),       // 5: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventsCountResponse
	(*ArchiveSpansEvent)(nil),                           // 6: com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent
	(*SearchArchiveSpansEventGroupsRequest)(nil),        // 7: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventGroupsRequest
	(*SearchArchiveSpansEventGroupsResponse)(nil),       // 8: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventGroupsResponse
	(*SearchArchiveGroupedSpansSeriesRequest)(nil),      // 9: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansSeriesRequest
	(*SearchArchiveGroupedSpansSeriesResponse)(nil),     // 10: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansSeriesResponse
	(*SearchArchiveGroupedSpansTimeSeriesRequest)(nil),  // 11: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansTimeSeriesRequest
	(*SearchArchiveGroupedSpansTimeSeriesResponse)(nil), // 12: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansTimeSeriesResponse
	(*SearchArchiveSpansTimeValueRequest)(nil),          // 13: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansTimeValueRequest
	(*SearchArchiveSpansTimeValueResponse)(nil),         // 14: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansTimeValueResponse
	(*SearchArchiveSpansGroupedValuesRequest)(nil),      // 15: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansGroupedValuesRequest
	(*SearchArchiveSpansGroupedValuesResponse)(nil),     // 16: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansGroupedValuesResponse
	(*ArchiveSpansEvent_Metadata)(nil),                  // 17: com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent.Metadata
	(*ArchiveSpansEvent_Tag)(nil),                       // 18: com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent.Tag
	(*ArchiveSpansEvent_Log)(nil),                       // 19: com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent.Log
	nil,                                                 // 20: com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent.Log.FieldsEntry
	nil,                                                 // 21: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansSeriesResponse.MetaEntry
	nil,                                                 // 22: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansTimeSeriesResponse.MetaEntry
	nil,                                                 // 23: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansGroupedValuesResponse.MetaEntry
	(*wrapperspb.StringValue)(nil),                      // 24: google.protobuf.StringValue
	(*TimeFrame)(nil),                                   // 25: com.coralogixapis.dashboards.v1.common.TimeFrame
	(*wrapperspb.Int32Value)(nil),                       // 26: google.protobuf.Int32Value
	(*SerializedDataprimeQuery)(nil),                    // 27: com.coralogixapis.dashboards.v1.common.SerializedDataprimeQuery
	(*DataprimeQuery)(nil),                              // 28: com.coralogixapis.dashboards.v1.common.DataprimeQuery
	(*TimeSeries)(nil),                                  // 29: com.coralogixapis.dashboards.v1.common.TimeSeries
	(*wrapperspb.Int64Value)(nil),                       // 30: google.protobuf.Int64Value
	(*Pagination)(nil),                                  // 31: com.coralogixapis.dashboards.v1.common.Pagination
	(*timestamppb.Timestamp)(nil),                       // 32: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                         // 33: google.protobuf.Duration
	(*MultiGroup)(nil),                                  // 34: com.coralogixapis.dashboards.v1.common.MultiGroup
	(*GroupLimit)(nil),                                  // 35: com.coralogixapis.dashboards.v1.common.GroupLimit
	(*GroupedSeries)(nil),                               // 36: com.coralogixapis.dashboards.v1.common.GroupedSeries
	(*wrapperspb.DoubleValue)(nil),                      // 37: google.protobuf.DoubleValue
	(*Group)(nil),                                       // 38: com.coralogixapis.dashboards.v1.common.Group
}
var file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_depIdxs = []int32{
	24, // 0: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansTimeSeriesRequest.widget_id:type_name -> google.protobuf.StringValue
	25, // 1: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansTimeSeriesRequest.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrame
	26, // 2: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansTimeSeriesRequest.limit:type_name -> google.protobuf.Int32Value
	24, // 3: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansTimeSeriesRequest.request_params_hash:type_name -> google.protobuf.StringValue
	27, // 4: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansTimeSeriesRequest.query:type_name -> com.coralogixapis.dashboards.v1.common.SerializedDataprimeQuery
	28, // 5: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansTimeSeriesRequest.query_raw:type_name -> com.coralogixapis.dashboards.v1.common.DataprimeQuery
	24, // 6: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansTimeSeriesRequest.aggregation_keys:type_name -> google.protobuf.StringValue
	29, // 7: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansTimeSeriesResponse.time_series:type_name -> com.coralogixapis.dashboards.v1.common.TimeSeries
	30, // 8: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansTimeSeriesResponse.total:type_name -> google.protobuf.Int64Value
	24, // 9: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventsRequest.widget_id:type_name -> google.protobuf.StringValue
	25, // 10: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventsRequest.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrame
	31, // 11: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventsRequest.pagination:type_name -> com.coralogixapis.dashboards.v1.common.Pagination
	24, // 12: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventsRequest.request_params_hash:type_name -> google.protobuf.StringValue
	27, // 13: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventsRequest.query:type_name -> com.coralogixapis.dashboards.v1.common.SerializedDataprimeQuery
	28, // 14: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventsRequest.query_raw:type_name -> com.coralogixapis.dashboards.v1.common.DataprimeQuery
	6,  // 15: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventsResponse.events:type_name -> com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent
	26, // 16: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventsResponse.total_fetched:type_name -> google.protobuf.Int32Value
	24, // 17: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventsCountRequest.widget_id:type_name -> google.protobuf.StringValue
	25, // 18: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventsCountRequest.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrame
	24, // 19: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventsCountRequest.request_params_hash:type_name -> google.protobuf.StringValue
	27, // 20: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventsCountRequest.query:type_name -> com.coralogixapis.dashboards.v1.common.SerializedDataprimeQuery
	28, // 21: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventsCountRequest.query_raw:type_name -> com.coralogixapis.dashboards.v1.common.DataprimeQuery
	30, // 22: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventsCountResponse.count:type_name -> google.protobuf.Int64Value
	24, // 23: com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent.span_id:type_name -> google.protobuf.StringValue
	24, // 24: com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent.trace_id:type_name -> google.protobuf.StringValue
	24, // 25: com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent.parent_span_id:type_name -> google.protobuf.StringValue
	17, // 26: com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent.metadata:type_name -> com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent.Metadata
	32, // 27: com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent.start_time:type_name -> google.protobuf.Timestamp
	33, // 28: com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent.duration:type_name -> google.protobuf.Duration
	18, // 29: com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent.tags:type_name -> com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent.Tag
	18, // 30: com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent.process_tags:type_name -> com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent.Tag
	19, // 31: com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent.logs:type_name -> com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent.Log
	24, // 32: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventGroupsRequest.widget_id:type_name -> google.protobuf.StringValue
	25, // 33: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventGroupsRequest.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrame
	24, // 34: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventGroupsRequest.request_params_hash:type_name -> google.protobuf.StringValue
	27, // 35: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventGroupsRequest.query:type_name -> com.coralogixapis.dashboards.v1.common.SerializedDataprimeQuery
	28, // 36: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventGroupsRequest.query_raw:type_name -> com.coralogixapis.dashboards.v1.common.DataprimeQuery
	24, // 37: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventGroupsRequest.group_by_keys:type_name -> google.protobuf.StringValue
	24, // 38: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventGroupsRequest.aggregation_keys:type_name -> google.protobuf.StringValue
	31, // 39: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventGroupsRequest.pagination:type_name -> com.coralogixapis.dashboards.v1.common.Pagination
	34, // 40: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventGroupsResponse.groups:type_name -> com.coralogixapis.dashboards.v1.common.MultiGroup
	24, // 41: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansSeriesRequest.widget_id:type_name -> google.protobuf.StringValue
	25, // 42: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansSeriesRequest.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrame
	24, // 43: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansSeriesRequest.request_params_hash:type_name -> google.protobuf.StringValue
	27, // 44: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansSeriesRequest.query:type_name -> com.coralogixapis.dashboards.v1.common.SerializedDataprimeQuery
	28, // 45: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansSeriesRequest.query_raw:type_name -> com.coralogixapis.dashboards.v1.common.DataprimeQuery
	24, // 46: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansSeriesRequest.group_by_keys:type_name -> google.protobuf.StringValue
	24, // 47: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansSeriesRequest.aggregation_key:type_name -> google.protobuf.StringValue
	35, // 48: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansSeriesRequest.limits:type_name -> com.coralogixapis.dashboards.v1.common.GroupLimit
	36, // 49: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansSeriesResponse.series:type_name -> com.coralogixapis.dashboards.v1.common.GroupedSeries
	21, // 50: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansSeriesResponse.meta:type_name -> com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansSeriesResponse.MetaEntry
	24, // 51: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansTimeSeriesRequest.widget_id:type_name -> google.protobuf.StringValue
	25, // 52: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansTimeSeriesRequest.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrame
	24, // 53: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansTimeSeriesRequest.request_params_hash:type_name -> google.protobuf.StringValue
	27, // 54: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansTimeSeriesRequest.query:type_name -> com.coralogixapis.dashboards.v1.common.SerializedDataprimeQuery
	28, // 55: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansTimeSeriesRequest.query_raw:type_name -> com.coralogixapis.dashboards.v1.common.DataprimeQuery
	24, // 56: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansTimeSeriesRequest.group_by_keys:type_name -> google.protobuf.StringValue
	24, // 57: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansTimeSeriesRequest.aggregation_key:type_name -> google.protobuf.StringValue
	35, // 58: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansTimeSeriesRequest.limits:type_name -> com.coralogixapis.dashboards.v1.common.GroupLimit
	36, // 59: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansTimeSeriesResponse.series:type_name -> com.coralogixapis.dashboards.v1.common.GroupedSeries
	22, // 60: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansTimeSeriesResponse.meta:type_name -> com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansTimeSeriesResponse.MetaEntry
	24, // 61: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansTimeValueRequest.widget_id:type_name -> google.protobuf.StringValue
	25, // 62: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansTimeValueRequest.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrame
	24, // 63: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansTimeValueRequest.request_params_hash:type_name -> google.protobuf.StringValue
	27, // 64: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansTimeValueRequest.query:type_name -> com.coralogixapis.dashboards.v1.common.SerializedDataprimeQuery
	28, // 65: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansTimeValueRequest.query_raw:type_name -> com.coralogixapis.dashboards.v1.common.DataprimeQuery
	24, // 66: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansTimeValueRequest.aggregation_key:type_name -> google.protobuf.StringValue
	37, // 67: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansTimeValueResponse.value:type_name -> google.protobuf.DoubleValue
	24, // 68: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansGroupedValuesRequest.widget_id:type_name -> google.protobuf.StringValue
	25, // 69: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansGroupedValuesRequest.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrame
	24, // 70: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansGroupedValuesRequest.request_params_hash:type_name -> google.protobuf.StringValue
	27, // 71: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansGroupedValuesRequest.query:type_name -> com.coralogixapis.dashboards.v1.common.SerializedDataprimeQuery
	28, // 72: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansGroupedValuesRequest.query_raw:type_name -> com.coralogixapis.dashboards.v1.common.DataprimeQuery
	24, // 73: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansGroupedValuesRequest.group_by_keys:type_name -> google.protobuf.StringValue
	24, // 74: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansGroupedValuesRequest.aggregation_keys:type_name -> google.protobuf.StringValue
	26, // 75: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansGroupedValuesRequest.limit:type_name -> google.protobuf.Int32Value
	38, // 76: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansGroupedValuesResponse.groups:type_name -> com.coralogixapis.dashboards.v1.common.Group
	30, // 77: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansGroupedValuesResponse.total:type_name -> google.protobuf.Int64Value
	23, // 78: com.coralogixapis.dashboards.v1.services.SearchArchiveSpansGroupedValuesResponse.meta:type_name -> com.coralogixapis.dashboards.v1.services.SearchArchiveSpansGroupedValuesResponse.MetaEntry
	24, // 79: com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent.Metadata.application_name:type_name -> google.protobuf.StringValue
	24, // 80: com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent.Metadata.subsystem_name:type_name -> google.protobuf.StringValue
	24, // 81: com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent.Metadata.service_name:type_name -> google.protobuf.StringValue
	24, // 82: com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent.Metadata.operation_name:type_name -> google.protobuf.StringValue
	24, // 83: com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent.Tag.key:type_name -> google.protobuf.StringValue
	24, // 84: com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent.Tag.value:type_name -> google.protobuf.StringValue
	32, // 85: com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent.Log.timestamp:type_name -> google.protobuf.Timestamp
	20, // 86: com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent.Log.fields:type_name -> com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent.Log.FieldsEntry
	24, // 87: com.coralogixapis.dashboards.v1.services.ArchiveSpansEvent.Log.FieldsEntry.value:type_name -> google.protobuf.StringValue
	0,  // 88: com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService.SearchArchiveSpansTimeSeries:input_type -> com.coralogixapis.dashboards.v1.services.SearchArchiveSpansTimeSeriesRequest
	2,  // 89: com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService.SearchArchiveSpansEvents:input_type -> com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventsRequest
	4,  // 90: com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService.SearchArchiveSpansEventsCount:input_type -> com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventsCountRequest
	7,  // 91: com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService.SearchArchiveSpansEventGroups:input_type -> com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventGroupsRequest
	9,  // 92: com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService.SearchArchiveGroupedSpansSeries:input_type -> com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansSeriesRequest
	11, // 93: com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService.SearchArchiveGroupedSpansTimeSeries:input_type -> com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansTimeSeriesRequest
	13, // 94: com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService.SearchArchiveSpansTimeValue:input_type -> com.coralogixapis.dashboards.v1.services.SearchArchiveSpansTimeValueRequest
	15, // 95: com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService.SearchArchiveSpansGroupedValues:input_type -> com.coralogixapis.dashboards.v1.services.SearchArchiveSpansGroupedValuesRequest
	1,  // 96: com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService.SearchArchiveSpansTimeSeries:output_type -> com.coralogixapis.dashboards.v1.services.SearchArchiveSpansTimeSeriesResponse
	3,  // 97: com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService.SearchArchiveSpansEvents:output_type -> com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventsResponse
	5,  // 98: com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService.SearchArchiveSpansEventsCount:output_type -> com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventsCountResponse
	8,  // 99: com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService.SearchArchiveSpansEventGroups:output_type -> com.coralogixapis.dashboards.v1.services.SearchArchiveSpansEventGroupsResponse
	10, // 100: com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService.SearchArchiveGroupedSpansSeries:output_type -> com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansSeriesResponse
	12, // 101: com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService.SearchArchiveGroupedSpansTimeSeries:output_type -> com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedSpansTimeSeriesResponse
	14, // 102: com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService.SearchArchiveSpansTimeValue:output_type -> com.coralogixapis.dashboards.v1.services.SearchArchiveSpansTimeValueResponse
	16, // 103: com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService.SearchArchiveSpansGroupedValues:output_type -> com.coralogixapis.dashboards.v1.services.SearchArchiveSpansGroupedValuesResponse
	96, // [96:104] is the sub-list for method output_type
	88, // [88:96] is the sub-list for method input_type
	88, // [88:88] is the sub-list for extension type_name
	88, // [88:88] is the sub-list for extension extendee
	0,  // [0:88] is the sub-list for field type_name
}

func init() {
	file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_init()
}
func file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_init() {
	if File_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto != nil {
		return
	}
	file_com_coralogixapis_dashboards_v1_audit_log_proto_init()
	file_com_coralogixapis_dashboards_v1_common_group_proto_init()
	file_com_coralogixapis_dashboards_v1_common_group_limit_proto_init()
	file_com_coralogixapis_dashboards_v1_common_grouped_series_proto_init()
	file_com_coralogixapis_dashboards_v1_common_pagination_proto_init()
	file_com_coralogixapis_dashboards_v1_common_query_proto_init()
	file_com_coralogixapis_dashboards_v1_common_time_frame_proto_init()
	file_com_coralogixapis_dashboards_v1_common_time_series_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SearchArchiveSpansTimeSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SearchArchiveSpansTimeSeriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SearchArchiveSpansEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SearchArchiveSpansEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*SearchArchiveSpansEventsCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*SearchArchiveSpansEventsCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ArchiveSpansEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*SearchArchiveSpansEventGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*SearchArchiveSpansEventGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*SearchArchiveGroupedSpansSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SearchArchiveGroupedSpansSeriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*SearchArchiveGroupedSpansTimeSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*SearchArchiveGroupedSpansTimeSeriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*SearchArchiveSpansTimeValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*SearchArchiveSpansTimeValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*SearchArchiveSpansGroupedValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*SearchArchiveSpansGroupedValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*ArchiveSpansEvent_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*ArchiveSpansEvent_Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*ArchiveSpansEvent_Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_depIdxs,
		MessageInfos:      file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto = out.File
	file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_rawDesc = nil
	file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_goTypes = nil
	file_com_coralogixapis_dashboards_v1_services_archive_spans_data_source_service_proto_depIdxs = nil
}
