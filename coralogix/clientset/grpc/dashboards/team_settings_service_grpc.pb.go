// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.28.2
// source: com/coralogixapis/dashboards/v1/services/team_settings_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TeamSettingsService_GetTeamSettings_FullMethodName = "/com.coralogixapis.dashboards.v1.services.TeamSettingsService/GetTeamSettings"
)

// TeamSettingsServiceClient is the client API for TeamSettingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeamSettingsServiceClient interface {
	GetTeamSettings(ctx context.Context, in *GetTeamSettingsRequest, opts ...grpc.CallOption) (*GetTeamSettingsResponse, error)
}

type teamSettingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamSettingsServiceClient(cc grpc.ClientConnInterface) TeamSettingsServiceClient {
	return &teamSettingsServiceClient{cc}
}

func (c *teamSettingsServiceClient) GetTeamSettings(ctx context.Context, in *GetTeamSettingsRequest, opts ...grpc.CallOption) (*GetTeamSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTeamSettingsResponse)
	err := c.cc.Invoke(ctx, TeamSettingsService_GetTeamSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamSettingsServiceServer is the server API for TeamSettingsService service.
// All implementations must embed UnimplementedTeamSettingsServiceServer
// for forward compatibility
type TeamSettingsServiceServer interface {
	GetTeamSettings(context.Context, *GetTeamSettingsRequest) (*GetTeamSettingsResponse, error)
	mustEmbedUnimplementedTeamSettingsServiceServer()
}

// UnimplementedTeamSettingsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTeamSettingsServiceServer struct {
}

func (UnimplementedTeamSettingsServiceServer) GetTeamSettings(context.Context, *GetTeamSettingsRequest) (*GetTeamSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamSettings not implemented")
}
func (UnimplementedTeamSettingsServiceServer) mustEmbedUnimplementedTeamSettingsServiceServer() {}

// UnsafeTeamSettingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeamSettingsServiceServer will
// result in compilation errors.
type UnsafeTeamSettingsServiceServer interface {
	mustEmbedUnimplementedTeamSettingsServiceServer()
}

func RegisterTeamSettingsServiceServer(s grpc.ServiceRegistrar, srv TeamSettingsServiceServer) {
	s.RegisterService(&TeamSettingsService_ServiceDesc, srv)
}

func _TeamSettingsService_GetTeamSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamSettingsServiceServer).GetTeamSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamSettingsService_GetTeamSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamSettingsServiceServer).GetTeamSettings(ctx, req.(*GetTeamSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeamSettingsService_ServiceDesc is the grpc.ServiceDesc for TeamSettingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeamSettingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogixapis.dashboards.v1.services.TeamSettingsService",
	HandlerType: (*TeamSettingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTeamSettings",
			Handler:    _TeamSettingsService_GetTeamSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogixapis/dashboards/v1/services/team_settings_service.proto",
}
