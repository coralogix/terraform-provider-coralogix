// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: com/coralogixapis/dashboards/v1/services/archive_spans_data_source_service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArchiveSpansDataSourceServiceClient is the client API for ArchiveSpansDataSourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArchiveSpansDataSourceServiceClient interface {
	SearchArchiveSpansTimeSeries(ctx context.Context, in *SearchArchiveSpansTimeSeriesRequest, opts ...grpc.CallOption) (*SearchArchiveSpansTimeSeriesResponse, error)
	SearchArchiveSpansEvents(ctx context.Context, in *SearchArchiveSpansEventsRequest, opts ...grpc.CallOption) (*SearchArchiveSpansEventsResponse, error)
	SearchArchiveSpansEventsCount(ctx context.Context, in *SearchArchiveSpansEventsCountRequest, opts ...grpc.CallOption) (*SearchArchiveSpansEventsCountResponse, error)
	SearchArchiveSpansEventGroups(ctx context.Context, in *SearchArchiveSpansEventGroupsRequest, opts ...grpc.CallOption) (*SearchArchiveSpansEventGroupsResponse, error)
	SearchArchiveGroupedSpansSeries(ctx context.Context, in *SearchArchiveGroupedSpansSeriesRequest, opts ...grpc.CallOption) (*SearchArchiveGroupedSpansSeriesResponse, error)
	SearchArchiveGroupedSpansTimeSeries(ctx context.Context, in *SearchArchiveGroupedSpansTimeSeriesRequest, opts ...grpc.CallOption) (*SearchArchiveGroupedSpansTimeSeriesResponse, error)
	SearchArchiveSpansTimeValue(ctx context.Context, in *SearchArchiveSpansTimeValueRequest, opts ...grpc.CallOption) (*SearchArchiveSpansTimeValueResponse, error)
}

type archiveSpansDataSourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArchiveSpansDataSourceServiceClient(cc grpc.ClientConnInterface) ArchiveSpansDataSourceServiceClient {
	return &archiveSpansDataSourceServiceClient{cc}
}

func (c *archiveSpansDataSourceServiceClient) SearchArchiveSpansTimeSeries(ctx context.Context, in *SearchArchiveSpansTimeSeriesRequest, opts ...grpc.CallOption) (*SearchArchiveSpansTimeSeriesResponse, error) {
	out := new(SearchArchiveSpansTimeSeriesResponse)
	err := c.cc.Invoke(ctx, "/com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService/SearchArchiveSpansTimeSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveSpansDataSourceServiceClient) SearchArchiveSpansEvents(ctx context.Context, in *SearchArchiveSpansEventsRequest, opts ...grpc.CallOption) (*SearchArchiveSpansEventsResponse, error) {
	out := new(SearchArchiveSpansEventsResponse)
	err := c.cc.Invoke(ctx, "/com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService/SearchArchiveSpansEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveSpansDataSourceServiceClient) SearchArchiveSpansEventsCount(ctx context.Context, in *SearchArchiveSpansEventsCountRequest, opts ...grpc.CallOption) (*SearchArchiveSpansEventsCountResponse, error) {
	out := new(SearchArchiveSpansEventsCountResponse)
	err := c.cc.Invoke(ctx, "/com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService/SearchArchiveSpansEventsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveSpansDataSourceServiceClient) SearchArchiveSpansEventGroups(ctx context.Context, in *SearchArchiveSpansEventGroupsRequest, opts ...grpc.CallOption) (*SearchArchiveSpansEventGroupsResponse, error) {
	out := new(SearchArchiveSpansEventGroupsResponse)
	err := c.cc.Invoke(ctx, "/com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService/SearchArchiveSpansEventGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveSpansDataSourceServiceClient) SearchArchiveGroupedSpansSeries(ctx context.Context, in *SearchArchiveGroupedSpansSeriesRequest, opts ...grpc.CallOption) (*SearchArchiveGroupedSpansSeriesResponse, error) {
	out := new(SearchArchiveGroupedSpansSeriesResponse)
	err := c.cc.Invoke(ctx, "/com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService/SearchArchiveGroupedSpansSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveSpansDataSourceServiceClient) SearchArchiveGroupedSpansTimeSeries(ctx context.Context, in *SearchArchiveGroupedSpansTimeSeriesRequest, opts ...grpc.CallOption) (*SearchArchiveGroupedSpansTimeSeriesResponse, error) {
	out := new(SearchArchiveGroupedSpansTimeSeriesResponse)
	err := c.cc.Invoke(ctx, "/com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService/SearchArchiveGroupedSpansTimeSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveSpansDataSourceServiceClient) SearchArchiveSpansTimeValue(ctx context.Context, in *SearchArchiveSpansTimeValueRequest, opts ...grpc.CallOption) (*SearchArchiveSpansTimeValueResponse, error) {
	out := new(SearchArchiveSpansTimeValueResponse)
	err := c.cc.Invoke(ctx, "/com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService/SearchArchiveSpansTimeValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArchiveSpansDataSourceServiceServer is the server API for ArchiveSpansDataSourceService service.
// All implementations must embed UnimplementedArchiveSpansDataSourceServiceServer
// for forward compatibility
type ArchiveSpansDataSourceServiceServer interface {
	SearchArchiveSpansTimeSeries(context.Context, *SearchArchiveSpansTimeSeriesRequest) (*SearchArchiveSpansTimeSeriesResponse, error)
	SearchArchiveSpansEvents(context.Context, *SearchArchiveSpansEventsRequest) (*SearchArchiveSpansEventsResponse, error)
	SearchArchiveSpansEventsCount(context.Context, *SearchArchiveSpansEventsCountRequest) (*SearchArchiveSpansEventsCountResponse, error)
	SearchArchiveSpansEventGroups(context.Context, *SearchArchiveSpansEventGroupsRequest) (*SearchArchiveSpansEventGroupsResponse, error)
	SearchArchiveGroupedSpansSeries(context.Context, *SearchArchiveGroupedSpansSeriesRequest) (*SearchArchiveGroupedSpansSeriesResponse, error)
	SearchArchiveGroupedSpansTimeSeries(context.Context, *SearchArchiveGroupedSpansTimeSeriesRequest) (*SearchArchiveGroupedSpansTimeSeriesResponse, error)
	SearchArchiveSpansTimeValue(context.Context, *SearchArchiveSpansTimeValueRequest) (*SearchArchiveSpansTimeValueResponse, error)
	mustEmbedUnimplementedArchiveSpansDataSourceServiceServer()
}

// UnimplementedArchiveSpansDataSourceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArchiveSpansDataSourceServiceServer struct {
}

func (UnimplementedArchiveSpansDataSourceServiceServer) SearchArchiveSpansTimeSeries(context.Context, *SearchArchiveSpansTimeSeriesRequest) (*SearchArchiveSpansTimeSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchArchiveSpansTimeSeries not implemented")
}
func (UnimplementedArchiveSpansDataSourceServiceServer) SearchArchiveSpansEvents(context.Context, *SearchArchiveSpansEventsRequest) (*SearchArchiveSpansEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchArchiveSpansEvents not implemented")
}
func (UnimplementedArchiveSpansDataSourceServiceServer) SearchArchiveSpansEventsCount(context.Context, *SearchArchiveSpansEventsCountRequest) (*SearchArchiveSpansEventsCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchArchiveSpansEventsCount not implemented")
}
func (UnimplementedArchiveSpansDataSourceServiceServer) SearchArchiveSpansEventGroups(context.Context, *SearchArchiveSpansEventGroupsRequest) (*SearchArchiveSpansEventGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchArchiveSpansEventGroups not implemented")
}
func (UnimplementedArchiveSpansDataSourceServiceServer) SearchArchiveGroupedSpansSeries(context.Context, *SearchArchiveGroupedSpansSeriesRequest) (*SearchArchiveGroupedSpansSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchArchiveGroupedSpansSeries not implemented")
}
func (UnimplementedArchiveSpansDataSourceServiceServer) SearchArchiveGroupedSpansTimeSeries(context.Context, *SearchArchiveGroupedSpansTimeSeriesRequest) (*SearchArchiveGroupedSpansTimeSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchArchiveGroupedSpansTimeSeries not implemented")
}
func (UnimplementedArchiveSpansDataSourceServiceServer) SearchArchiveSpansTimeValue(context.Context, *SearchArchiveSpansTimeValueRequest) (*SearchArchiveSpansTimeValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchArchiveSpansTimeValue not implemented")
}
func (UnimplementedArchiveSpansDataSourceServiceServer) mustEmbedUnimplementedArchiveSpansDataSourceServiceServer() {
}

// UnsafeArchiveSpansDataSourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArchiveSpansDataSourceServiceServer will
// result in compilation errors.
type UnsafeArchiveSpansDataSourceServiceServer interface {
	mustEmbedUnimplementedArchiveSpansDataSourceServiceServer()
}

func RegisterArchiveSpansDataSourceServiceServer(s grpc.ServiceRegistrar, srv ArchiveSpansDataSourceServiceServer) {
	s.RegisterService(&ArchiveSpansDataSourceService_ServiceDesc, srv)
}

func _ArchiveSpansDataSourceService_SearchArchiveSpansTimeSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchArchiveSpansTimeSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveSpansDataSourceServiceServer).SearchArchiveSpansTimeSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService/SearchArchiveSpansTimeSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveSpansDataSourceServiceServer).SearchArchiveSpansTimeSeries(ctx, req.(*SearchArchiveSpansTimeSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveSpansDataSourceService_SearchArchiveSpansEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchArchiveSpansEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveSpansDataSourceServiceServer).SearchArchiveSpansEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService/SearchArchiveSpansEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveSpansDataSourceServiceServer).SearchArchiveSpansEvents(ctx, req.(*SearchArchiveSpansEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveSpansDataSourceService_SearchArchiveSpansEventsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchArchiveSpansEventsCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveSpansDataSourceServiceServer).SearchArchiveSpansEventsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService/SearchArchiveSpansEventsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveSpansDataSourceServiceServer).SearchArchiveSpansEventsCount(ctx, req.(*SearchArchiveSpansEventsCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveSpansDataSourceService_SearchArchiveSpansEventGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchArchiveSpansEventGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveSpansDataSourceServiceServer).SearchArchiveSpansEventGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService/SearchArchiveSpansEventGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveSpansDataSourceServiceServer).SearchArchiveSpansEventGroups(ctx, req.(*SearchArchiveSpansEventGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveSpansDataSourceService_SearchArchiveGroupedSpansSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchArchiveGroupedSpansSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveSpansDataSourceServiceServer).SearchArchiveGroupedSpansSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService/SearchArchiveGroupedSpansSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveSpansDataSourceServiceServer).SearchArchiveGroupedSpansSeries(ctx, req.(*SearchArchiveGroupedSpansSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveSpansDataSourceService_SearchArchiveGroupedSpansTimeSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchArchiveGroupedSpansTimeSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveSpansDataSourceServiceServer).SearchArchiveGroupedSpansTimeSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService/SearchArchiveGroupedSpansTimeSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveSpansDataSourceServiceServer).SearchArchiveGroupedSpansTimeSeries(ctx, req.(*SearchArchiveGroupedSpansTimeSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveSpansDataSourceService_SearchArchiveSpansTimeValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchArchiveSpansTimeValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveSpansDataSourceServiceServer).SearchArchiveSpansTimeValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService/SearchArchiveSpansTimeValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveSpansDataSourceServiceServer).SearchArchiveSpansTimeValue(ctx, req.(*SearchArchiveSpansTimeValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArchiveSpansDataSourceService_ServiceDesc is the grpc.ServiceDesc for ArchiveSpansDataSourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArchiveSpansDataSourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogixapis.dashboards.v1.services.ArchiveSpansDataSourceService",
	HandlerType: (*ArchiveSpansDataSourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchArchiveSpansTimeSeries",
			Handler:    _ArchiveSpansDataSourceService_SearchArchiveSpansTimeSeries_Handler,
		},
		{
			MethodName: "SearchArchiveSpansEvents",
			Handler:    _ArchiveSpansDataSourceService_SearchArchiveSpansEvents_Handler,
		},
		{
			MethodName: "SearchArchiveSpansEventsCount",
			Handler:    _ArchiveSpansDataSourceService_SearchArchiveSpansEventsCount_Handler,
		},
		{
			MethodName: "SearchArchiveSpansEventGroups",
			Handler:    _ArchiveSpansDataSourceService_SearchArchiveSpansEventGroups_Handler,
		},
		{
			MethodName: "SearchArchiveGroupedSpansSeries",
			Handler:    _ArchiveSpansDataSourceService_SearchArchiveGroupedSpansSeries_Handler,
		},
		{
			MethodName: "SearchArchiveGroupedSpansTimeSeries",
			Handler:    _ArchiveSpansDataSourceService_SearchArchiveGroupedSpansTimeSeries_Handler,
		},
		{
			MethodName: "SearchArchiveSpansTimeValue",
			Handler:    _ArchiveSpansDataSourceService_SearchArchiveSpansTimeValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogixapis/dashboards/v1/services/archive_spans_data_source_service.proto",
}
