// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.2
// source: com/coralogixapis/dashboards/v1/ast/variable.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VariableDisplayType int32

const (
	VariableDisplayType_VARIABLE_DISPLAY_TYPE_UNSPECIFIED VariableDisplayType = 0
	VariableDisplayType_VARIABLE_DISPLAY_TYPE_LABEL_VALUE VariableDisplayType = 1
	VariableDisplayType_VARIABLE_DISPLAY_TYPE_VALUE       VariableDisplayType = 2
	VariableDisplayType_VARIABLE_DISPLAY_TYPE_NOTHING     VariableDisplayType = 3
)

// Enum value maps for VariableDisplayType.
var (
	VariableDisplayType_name = map[int32]string{
		0: "VARIABLE_DISPLAY_TYPE_UNSPECIFIED",
		1: "VARIABLE_DISPLAY_TYPE_LABEL_VALUE",
		2: "VARIABLE_DISPLAY_TYPE_VALUE",
		3: "VARIABLE_DISPLAY_TYPE_NOTHING",
	}
	VariableDisplayType_value = map[string]int32{
		"VARIABLE_DISPLAY_TYPE_UNSPECIFIED": 0,
		"VARIABLE_DISPLAY_TYPE_LABEL_VALUE": 1,
		"VARIABLE_DISPLAY_TYPE_VALUE":       2,
		"VARIABLE_DISPLAY_TYPE_NOTHING":     3,
	}
)

func (x VariableDisplayType) Enum() *VariableDisplayType {
	p := new(VariableDisplayType)
	*p = x
	return p
}

func (x VariableDisplayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VariableDisplayType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_enumTypes[0].Descriptor()
}

func (VariableDisplayType) Type() protoreflect.EnumType {
	return &file_com_coralogixapis_dashboards_v1_ast_variable_proto_enumTypes[0]
}

func (x VariableDisplayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VariableDisplayType.Descriptor instead.
func (VariableDisplayType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{0}
}

type MultiSelect_RefreshStrategy int32

const (
	MultiSelect_REFRESH_STRATEGY_UNSPECIFIED          MultiSelect_RefreshStrategy = 0
	MultiSelect_REFRESH_STRATEGY_ON_DASHBOARD_LOAD    MultiSelect_RefreshStrategy = 1
	MultiSelect_REFRESH_STRATEGY_ON_TIME_FRAME_CHANGE MultiSelect_RefreshStrategy = 2
)

// Enum value maps for MultiSelect_RefreshStrategy.
var (
	MultiSelect_RefreshStrategy_name = map[int32]string{
		0: "REFRESH_STRATEGY_UNSPECIFIED",
		1: "REFRESH_STRATEGY_ON_DASHBOARD_LOAD",
		2: "REFRESH_STRATEGY_ON_TIME_FRAME_CHANGE",
	}
	MultiSelect_RefreshStrategy_value = map[string]int32{
		"REFRESH_STRATEGY_UNSPECIFIED":          0,
		"REFRESH_STRATEGY_ON_DASHBOARD_LOAD":    1,
		"REFRESH_STRATEGY_ON_TIME_FRAME_CHANGE": 2,
	}
)

func (x MultiSelect_RefreshStrategy) Enum() *MultiSelect_RefreshStrategy {
	p := new(MultiSelect_RefreshStrategy)
	*p = x
	return p
}

func (x MultiSelect_RefreshStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MultiSelect_RefreshStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_enumTypes[1].Descriptor()
}

func (MultiSelect_RefreshStrategy) Type() protoreflect.EnumType {
	return &file_com_coralogixapis_dashboards_v1_ast_variable_proto_enumTypes[1]
}

func (x MultiSelect_RefreshStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MultiSelect_RefreshStrategy.Descriptor instead.
func (MultiSelect_RefreshStrategy) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 0}
}

type MultiSelect_VariableSelectionOptions_SelectionType int32

const (
	MultiSelect_VariableSelectionOptions_SELECTION_TYPE_UNSPECIFIED MultiSelect_VariableSelectionOptions_SelectionType = 0
	MultiSelect_VariableSelectionOptions_SELECTION_TYPE_MULTI_ALL   MultiSelect_VariableSelectionOptions_SelectionType = 1
	MultiSelect_VariableSelectionOptions_SELECTION_TYPE_MULTI       MultiSelect_VariableSelectionOptions_SelectionType = 2
	MultiSelect_VariableSelectionOptions_SELECTION_TYPE_SINGLE      MultiSelect_VariableSelectionOptions_SelectionType = 3
)

// Enum value maps for MultiSelect_VariableSelectionOptions_SelectionType.
var (
	MultiSelect_VariableSelectionOptions_SelectionType_name = map[int32]string{
		0: "SELECTION_TYPE_UNSPECIFIED",
		1: "SELECTION_TYPE_MULTI_ALL",
		2: "SELECTION_TYPE_MULTI",
		3: "SELECTION_TYPE_SINGLE",
	}
	MultiSelect_VariableSelectionOptions_SelectionType_value = map[string]int32{
		"SELECTION_TYPE_UNSPECIFIED": 0,
		"SELECTION_TYPE_MULTI_ALL":   1,
		"SELECTION_TYPE_MULTI":       2,
		"SELECTION_TYPE_SINGLE":      3,
	}
)

func (x MultiSelect_VariableSelectionOptions_SelectionType) Enum() *MultiSelect_VariableSelectionOptions_SelectionType {
	p := new(MultiSelect_VariableSelectionOptions_SelectionType)
	*p = x
	return p
}

func (x MultiSelect_VariableSelectionOptions_SelectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MultiSelect_VariableSelectionOptions_SelectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_enumTypes[2].Descriptor()
}

func (MultiSelect_VariableSelectionOptions_SelectionType) Type() protoreflect.EnumType {
	return &file_com_coralogixapis_dashboards_v1_ast_variable_proto_enumTypes[2]
}

func (x MultiSelect_VariableSelectionOptions_SelectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MultiSelect_VariableSelectionOptions_SelectionType.Descriptor instead.
func (MultiSelect_VariableSelectionOptions_SelectionType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 9, 0}
}

type Variable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Definition  *Variable_Definition    `protobuf:"bytes,2,opt,name=definition,proto3" json:"definition,omitempty"`
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	DisplayType VariableDisplayType     `protobuf:"varint,5,opt,name=display_type,json=displayType,proto3,enum=com.coralogixapis.dashboards.v1.ast.VariableDisplayType" json:"display_type,omitempty"`
}

func (x *Variable) Reset() {
	*x = Variable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable) ProtoMessage() {}

func (x *Variable) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable.ProtoReflect.Descriptor instead.
func (*Variable) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{0}
}

func (x *Variable) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Variable) GetDefinition() *Variable_Definition {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *Variable) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *Variable) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Variable) GetDisplayType() VariableDisplayType {
	if x != nil {
		return x.DisplayType
	}
	return VariableDisplayType_VARIABLE_DISPLAY_TYPE_UNSPECIFIED
}

type Constant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Constant) Reset() {
	*x = Constant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Constant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constant) ProtoMessage() {}

func (x *Constant) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constant.ProtoReflect.Descriptor instead.
func (*Constant) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{1}
}

func (x *Constant) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type MultiSelect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in com/coralogixapis/dashboards/v1/ast/variable.proto.
	Selected             []*wrapperspb.StringValue             `protobuf:"bytes,1,rep,name=selected,proto3" json:"selected,omitempty"`
	Source               *MultiSelect_Source                   `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Selection            *MultiSelect_Selection                `protobuf:"bytes,3,opt,name=selection,proto3" json:"selection,omitempty"`
	ValuesOrderDirection OrderDirection                        `protobuf:"varint,4,opt,name=values_order_direction,json=valuesOrderDirection,proto3,enum=com.coralogixapis.dashboards.v1.common.OrderDirection" json:"values_order_direction,omitempty"`
	SelectionOptions     *MultiSelect_VariableSelectionOptions `protobuf:"bytes,5,opt,name=selection_options,json=selectionOptions,proto3" json:"selection_options,omitempty"`
}

func (x *MultiSelect) Reset() {
	*x = MultiSelect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect) ProtoMessage() {}

func (x *MultiSelect) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect.ProtoReflect.Descriptor instead.
func (*MultiSelect) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2}
}

// Deprecated: Marked as deprecated in com/coralogixapis/dashboards/v1/ast/variable.proto.
func (x *MultiSelect) GetSelected() []*wrapperspb.StringValue {
	if x != nil {
		return x.Selected
	}
	return nil
}

func (x *MultiSelect) GetSource() *MultiSelect_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *MultiSelect) GetSelection() *MultiSelect_Selection {
	if x != nil {
		return x.Selection
	}
	return nil
}

func (x *MultiSelect) GetValuesOrderDirection() OrderDirection {
	if x != nil {
		return x.ValuesOrderDirection
	}
	return OrderDirection_ORDER_DIRECTION_UNSPECIFIED
}

func (x *MultiSelect) GetSelectionOptions() *MultiSelect_VariableSelectionOptions {
	if x != nil {
		return x.SelectionOptions
	}
	return nil
}

type Variable_Definition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Variable_Definition_Constant
	//	*Variable_Definition_MultiSelect
	Value isVariable_Definition_Value `protobuf_oneof:"value"`
}

func (x *Variable_Definition) Reset() {
	*x = Variable_Definition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variable_Definition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable_Definition) ProtoMessage() {}

func (x *Variable_Definition) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable_Definition.ProtoReflect.Descriptor instead.
func (*Variable_Definition) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Variable_Definition) GetValue() isVariable_Definition_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

// Deprecated: Marked as deprecated in com/coralogixapis/dashboards/v1/ast/variable.proto.
func (x *Variable_Definition) GetConstant() *Constant {
	if x, ok := x.GetValue().(*Variable_Definition_Constant); ok {
		return x.Constant
	}
	return nil
}

func (x *Variable_Definition) GetMultiSelect() *MultiSelect {
	if x, ok := x.GetValue().(*Variable_Definition_MultiSelect); ok {
		return x.MultiSelect
	}
	return nil
}

type isVariable_Definition_Value interface {
	isVariable_Definition_Value()
}

type Variable_Definition_Constant struct {
	// Deprecated: Marked as deprecated in com/coralogixapis/dashboards/v1/ast/variable.proto.
	Constant *Constant `protobuf:"bytes,1,opt,name=constant,proto3,oneof"`
}

type Variable_Definition_MultiSelect struct {
	MultiSelect *MultiSelect `protobuf:"bytes,2,opt,name=multi_select,json=multiSelect,proto3,oneof"`
}

func (*Variable_Definition_Constant) isVariable_Definition_Value() {}

func (*Variable_Definition_MultiSelect) isVariable_Definition_Value() {}

type MultiSelect_Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*MultiSelect_Source_LogsPath
	//	*MultiSelect_Source_MetricLabel
	//	*MultiSelect_Source_ConstantList
	//	*MultiSelect_Source_SpanField
	//	*MultiSelect_Source_Query
	Value isMultiSelect_Source_Value `protobuf_oneof:"value"`
}

func (x *MultiSelect_Source) Reset() {
	*x = MultiSelect_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_Source) ProtoMessage() {}

func (x *MultiSelect_Source) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_Source.ProtoReflect.Descriptor instead.
func (*MultiSelect_Source) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 0}
}

func (m *MultiSelect_Source) GetValue() isMultiSelect_Source_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *MultiSelect_Source) GetLogsPath() *MultiSelect_LogsPathSource {
	if x, ok := x.GetValue().(*MultiSelect_Source_LogsPath); ok {
		return x.LogsPath
	}
	return nil
}

func (x *MultiSelect_Source) GetMetricLabel() *MultiSelect_MetricLabelSource {
	if x, ok := x.GetValue().(*MultiSelect_Source_MetricLabel); ok {
		return x.MetricLabel
	}
	return nil
}

func (x *MultiSelect_Source) GetConstantList() *MultiSelect_ConstantListSource {
	if x, ok := x.GetValue().(*MultiSelect_Source_ConstantList); ok {
		return x.ConstantList
	}
	return nil
}

func (x *MultiSelect_Source) GetSpanField() *MultiSelect_SpanFieldSource {
	if x, ok := x.GetValue().(*MultiSelect_Source_SpanField); ok {
		return x.SpanField
	}
	return nil
}

func (x *MultiSelect_Source) GetQuery() *MultiSelect_QuerySource {
	if x, ok := x.GetValue().(*MultiSelect_Source_Query); ok {
		return x.Query
	}
	return nil
}

type isMultiSelect_Source_Value interface {
	isMultiSelect_Source_Value()
}

type MultiSelect_Source_LogsPath struct {
	LogsPath *MultiSelect_LogsPathSource `protobuf:"bytes,1,opt,name=logs_path,json=logsPath,proto3,oneof"`
}

type MultiSelect_Source_MetricLabel struct {
	MetricLabel *MultiSelect_MetricLabelSource `protobuf:"bytes,2,opt,name=metric_label,json=metricLabel,proto3,oneof"`
}

type MultiSelect_Source_ConstantList struct {
	ConstantList *MultiSelect_ConstantListSource `protobuf:"bytes,3,opt,name=constant_list,json=constantList,proto3,oneof"`
}

type MultiSelect_Source_SpanField struct {
	SpanField *MultiSelect_SpanFieldSource `protobuf:"bytes,4,opt,name=span_field,json=spanField,proto3,oneof"`
}

type MultiSelect_Source_Query struct {
	Query *MultiSelect_QuerySource `protobuf:"bytes,5,opt,name=query,proto3,oneof"`
}

func (*MultiSelect_Source_LogsPath) isMultiSelect_Source_Value() {}

func (*MultiSelect_Source_MetricLabel) isMultiSelect_Source_Value() {}

func (*MultiSelect_Source_ConstantList) isMultiSelect_Source_Value() {}

func (*MultiSelect_Source_SpanField) isMultiSelect_Source_Value() {}

func (*MultiSelect_Source_Query) isMultiSelect_Source_Value() {}

type MultiSelect_LogsPathSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value            *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	ObservationField *ObservationField       `protobuf:"bytes,3,opt,name=observation_field,json=observationField,proto3" json:"observation_field,omitempty"`
}

func (x *MultiSelect_LogsPathSource) Reset() {
	*x = MultiSelect_LogsPathSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_LogsPathSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_LogsPathSource) ProtoMessage() {}

func (x *MultiSelect_LogsPathSource) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_LogsPathSource.ProtoReflect.Descriptor instead.
func (*MultiSelect_LogsPathSource) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 1}
}

func (x *MultiSelect_LogsPathSource) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *MultiSelect_LogsPathSource) GetObservationField() *ObservationField {
	if x != nil {
		return x.ObservationField
	}
	return nil
}

type MultiSelect_MetricLabelSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricName *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	Label      *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *MultiSelect_MetricLabelSource) Reset() {
	*x = MultiSelect_MetricLabelSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_MetricLabelSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_MetricLabelSource) ProtoMessage() {}

func (x *MultiSelect_MetricLabelSource) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_MetricLabelSource.ProtoReflect.Descriptor instead.
func (*MultiSelect_MetricLabelSource) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 2}
}

func (x *MultiSelect_MetricLabelSource) GetMetricName() *wrapperspb.StringValue {
	if x != nil {
		return x.MetricName
	}
	return nil
}

func (x *MultiSelect_MetricLabelSource) GetLabel() *wrapperspb.StringValue {
	if x != nil {
		return x.Label
	}
	return nil
}

type MultiSelect_SpanFieldSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *SpanField `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MultiSelect_SpanFieldSource) Reset() {
	*x = MultiSelect_SpanFieldSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_SpanFieldSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_SpanFieldSource) ProtoMessage() {}

func (x *MultiSelect_SpanFieldSource) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_SpanFieldSource.ProtoReflect.Descriptor instead.
func (*MultiSelect_SpanFieldSource) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 3}
}

func (x *MultiSelect_SpanFieldSource) GetValue() *SpanField {
	if x != nil {
		return x.Value
	}
	return nil
}

type MultiSelect_ConstantListSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*wrapperspb.StringValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *MultiSelect_ConstantListSource) Reset() {
	*x = MultiSelect_ConstantListSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_ConstantListSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_ConstantListSource) ProtoMessage() {}

func (x *MultiSelect_ConstantListSource) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_ConstantListSource.ProtoReflect.Descriptor instead.
func (*MultiSelect_ConstantListSource) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 4}
}

func (x *MultiSelect_ConstantListSource) GetValues() []*wrapperspb.StringValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type MultiSelect_QuerySource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query               *MultiSelect_Query               `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	RefreshStrategy     MultiSelect_RefreshStrategy      `protobuf:"varint,2,opt,name=refresh_strategy,json=refreshStrategy,proto3,enum=com.coralogixapis.dashboards.v1.ast.MultiSelect_RefreshStrategy" json:"refresh_strategy,omitempty"`
	ValueDisplayOptions *MultiSelect_ValueDisplayOptions `protobuf:"bytes,3,opt,name=value_display_options,json=valueDisplayOptions,proto3" json:"value_display_options,omitempty"`
}

func (x *MultiSelect_QuerySource) Reset() {
	*x = MultiSelect_QuerySource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_QuerySource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_QuerySource) ProtoMessage() {}

func (x *MultiSelect_QuerySource) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_QuerySource.ProtoReflect.Descriptor instead.
func (*MultiSelect_QuerySource) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 5}
}

func (x *MultiSelect_QuerySource) GetQuery() *MultiSelect_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *MultiSelect_QuerySource) GetRefreshStrategy() MultiSelect_RefreshStrategy {
	if x != nil {
		return x.RefreshStrategy
	}
	return MultiSelect_REFRESH_STRATEGY_UNSPECIFIED
}

func (x *MultiSelect_QuerySource) GetValueDisplayOptions() *MultiSelect_ValueDisplayOptions {
	if x != nil {
		return x.ValueDisplayOptions
	}
	return nil
}

type MultiSelect_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*MultiSelect_Query_LogsQuery_
	//	*MultiSelect_Query_MetricsQuery_
	//	*MultiSelect_Query_SpansQuery_
	Value isMultiSelect_Query_Value `protobuf_oneof:"value"`
}

func (x *MultiSelect_Query) Reset() {
	*x = MultiSelect_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_Query) ProtoMessage() {}

func (x *MultiSelect_Query) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_Query.ProtoReflect.Descriptor instead.
func (*MultiSelect_Query) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 6}
}

func (m *MultiSelect_Query) GetValue() isMultiSelect_Query_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *MultiSelect_Query) GetLogsQuery() *MultiSelect_Query_LogsQuery {
	if x, ok := x.GetValue().(*MultiSelect_Query_LogsQuery_); ok {
		return x.LogsQuery
	}
	return nil
}

func (x *MultiSelect_Query) GetMetricsQuery() *MultiSelect_Query_MetricsQuery {
	if x, ok := x.GetValue().(*MultiSelect_Query_MetricsQuery_); ok {
		return x.MetricsQuery
	}
	return nil
}

func (x *MultiSelect_Query) GetSpansQuery() *MultiSelect_Query_SpansQuery {
	if x, ok := x.GetValue().(*MultiSelect_Query_SpansQuery_); ok {
		return x.SpansQuery
	}
	return nil
}

type isMultiSelect_Query_Value interface {
	isMultiSelect_Query_Value()
}

type MultiSelect_Query_LogsQuery_ struct {
	LogsQuery *MultiSelect_Query_LogsQuery `protobuf:"bytes,1,opt,name=logs_query,json=logsQuery,proto3,oneof"`
}

type MultiSelect_Query_MetricsQuery_ struct {
	MetricsQuery *MultiSelect_Query_MetricsQuery `protobuf:"bytes,2,opt,name=metrics_query,json=metricsQuery,proto3,oneof"`
}

type MultiSelect_Query_SpansQuery_ struct {
	SpansQuery *MultiSelect_Query_SpansQuery `protobuf:"bytes,3,opt,name=spans_query,json=spansQuery,proto3,oneof"`
}

func (*MultiSelect_Query_LogsQuery_) isMultiSelect_Query_Value() {}

func (*MultiSelect_Query_MetricsQuery_) isMultiSelect_Query_Value() {}

func (*MultiSelect_Query_SpansQuery_) isMultiSelect_Query_Value() {}

type MultiSelect_ValueDisplayOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueRegex *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=value_regex,json=valueRegex,proto3" json:"value_regex,omitempty"`
	LabelRegex *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=label_regex,json=labelRegex,proto3" json:"label_regex,omitempty"`
}

func (x *MultiSelect_ValueDisplayOptions) Reset() {
	*x = MultiSelect_ValueDisplayOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_ValueDisplayOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_ValueDisplayOptions) ProtoMessage() {}

func (x *MultiSelect_ValueDisplayOptions) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_ValueDisplayOptions.ProtoReflect.Descriptor instead.
func (*MultiSelect_ValueDisplayOptions) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 7}
}

func (x *MultiSelect_ValueDisplayOptions) GetValueRegex() *wrapperspb.StringValue {
	if x != nil {
		return x.ValueRegex
	}
	return nil
}

func (x *MultiSelect_ValueDisplayOptions) GetLabelRegex() *wrapperspb.StringValue {
	if x != nil {
		return x.LabelRegex
	}
	return nil
}

type MultiSelect_Selection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*MultiSelect_Selection_All
	//	*MultiSelect_Selection_List
	Value isMultiSelect_Selection_Value `protobuf_oneof:"value"`
}

func (x *MultiSelect_Selection) Reset() {
	*x = MultiSelect_Selection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_Selection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_Selection) ProtoMessage() {}

func (x *MultiSelect_Selection) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_Selection.ProtoReflect.Descriptor instead.
func (*MultiSelect_Selection) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 8}
}

func (m *MultiSelect_Selection) GetValue() isMultiSelect_Selection_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *MultiSelect_Selection) GetAll() *MultiSelect_Selection_AllSelection {
	if x, ok := x.GetValue().(*MultiSelect_Selection_All); ok {
		return x.All
	}
	return nil
}

func (x *MultiSelect_Selection) GetList() *MultiSelect_Selection_ListSelection {
	if x, ok := x.GetValue().(*MultiSelect_Selection_List); ok {
		return x.List
	}
	return nil
}

type isMultiSelect_Selection_Value interface {
	isMultiSelect_Selection_Value()
}

type MultiSelect_Selection_All struct {
	All *MultiSelect_Selection_AllSelection `protobuf:"bytes,1,opt,name=all,proto3,oneof"`
}

type MultiSelect_Selection_List struct {
	List *MultiSelect_Selection_ListSelection `protobuf:"bytes,2,opt,name=list,proto3,oneof"`
}

func (*MultiSelect_Selection_All) isMultiSelect_Selection_Value() {}

func (*MultiSelect_Selection_List) isMultiSelect_Selection_Value() {}

type MultiSelect_VariableSelectionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectionType MultiSelect_VariableSelectionOptions_SelectionType `protobuf:"varint,1,opt,name=selection_type,json=selectionType,proto3,enum=com.coralogixapis.dashboards.v1.ast.MultiSelect_VariableSelectionOptions_SelectionType" json:"selection_type,omitempty"`
}

func (x *MultiSelect_VariableSelectionOptions) Reset() {
	*x = MultiSelect_VariableSelectionOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_VariableSelectionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_VariableSelectionOptions) ProtoMessage() {}

func (x *MultiSelect_VariableSelectionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_VariableSelectionOptions.ProtoReflect.Descriptor instead.
func (*MultiSelect_VariableSelectionOptions) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 9}
}

func (x *MultiSelect_VariableSelectionOptions) GetSelectionType() MultiSelect_VariableSelectionOptions_SelectionType {
	if x != nil {
		return x.SelectionType
	}
	return MultiSelect_VariableSelectionOptions_SELECTION_TYPE_UNSPECIFIED
}

type MultiSelect_Query_LogsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *MultiSelect_Query_LogsQuery_Type `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *MultiSelect_Query_LogsQuery) Reset() {
	*x = MultiSelect_Query_LogsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_Query_LogsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_Query_LogsQuery) ProtoMessage() {}

func (x *MultiSelect_Query_LogsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_Query_LogsQuery.ProtoReflect.Descriptor instead.
func (*MultiSelect_Query_LogsQuery) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 6, 0}
}

func (x *MultiSelect_Query_LogsQuery) GetType() *MultiSelect_Query_LogsQuery_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

type MultiSelect_Query_SpansQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *MultiSelect_Query_SpansQuery_Type `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *MultiSelect_Query_SpansQuery) Reset() {
	*x = MultiSelect_Query_SpansQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_Query_SpansQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_Query_SpansQuery) ProtoMessage() {}

func (x *MultiSelect_Query_SpansQuery) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_Query_SpansQuery.ProtoReflect.Descriptor instead.
func (*MultiSelect_Query_SpansQuery) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 6, 1}
}

func (x *MultiSelect_Query_SpansQuery) GetType() *MultiSelect_Query_SpansQuery_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

type MultiSelect_Query_MetricsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *MultiSelect_Query_MetricsQuery_Type `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *MultiSelect_Query_MetricsQuery) Reset() {
	*x = MultiSelect_Query_MetricsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_Query_MetricsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_Query_MetricsQuery) ProtoMessage() {}

func (x *MultiSelect_Query_MetricsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_Query_MetricsQuery.ProtoReflect.Descriptor instead.
func (*MultiSelect_Query_MetricsQuery) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 6, 2}
}

func (x *MultiSelect_Query_MetricsQuery) GetType() *MultiSelect_Query_MetricsQuery_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

type MultiSelect_Query_LogsQuery_Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*MultiSelect_Query_LogsQuery_Type_FieldName_
	//	*MultiSelect_Query_LogsQuery_Type_FieldValue_
	Value isMultiSelect_Query_LogsQuery_Type_Value `protobuf_oneof:"value"`
}

func (x *MultiSelect_Query_LogsQuery_Type) Reset() {
	*x = MultiSelect_Query_LogsQuery_Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_Query_LogsQuery_Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_Query_LogsQuery_Type) ProtoMessage() {}

func (x *MultiSelect_Query_LogsQuery_Type) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_Query_LogsQuery_Type.ProtoReflect.Descriptor instead.
func (*MultiSelect_Query_LogsQuery_Type) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 6, 0, 0}
}

func (m *MultiSelect_Query_LogsQuery_Type) GetValue() isMultiSelect_Query_LogsQuery_Type_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *MultiSelect_Query_LogsQuery_Type) GetFieldName() *MultiSelect_Query_LogsQuery_Type_FieldName {
	if x, ok := x.GetValue().(*MultiSelect_Query_LogsQuery_Type_FieldName_); ok {
		return x.FieldName
	}
	return nil
}

func (x *MultiSelect_Query_LogsQuery_Type) GetFieldValue() *MultiSelect_Query_LogsQuery_Type_FieldValue {
	if x, ok := x.GetValue().(*MultiSelect_Query_LogsQuery_Type_FieldValue_); ok {
		return x.FieldValue
	}
	return nil
}

type isMultiSelect_Query_LogsQuery_Type_Value interface {
	isMultiSelect_Query_LogsQuery_Type_Value()
}

type MultiSelect_Query_LogsQuery_Type_FieldName_ struct {
	FieldName *MultiSelect_Query_LogsQuery_Type_FieldName `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3,oneof"`
}

type MultiSelect_Query_LogsQuery_Type_FieldValue_ struct {
	FieldValue *MultiSelect_Query_LogsQuery_Type_FieldValue `protobuf:"bytes,2,opt,name=field_value,json=fieldValue,proto3,oneof"`
}

func (*MultiSelect_Query_LogsQuery_Type_FieldName_) isMultiSelect_Query_LogsQuery_Type_Value() {}

func (*MultiSelect_Query_LogsQuery_Type_FieldValue_) isMultiSelect_Query_LogsQuery_Type_Value() {}

type MultiSelect_Query_LogsQuery_Type_FieldName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogRegex *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=log_regex,json=logRegex,proto3" json:"log_regex,omitempty"`
}

func (x *MultiSelect_Query_LogsQuery_Type_FieldName) Reset() {
	*x = MultiSelect_Query_LogsQuery_Type_FieldName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_Query_LogsQuery_Type_FieldName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_Query_LogsQuery_Type_FieldName) ProtoMessage() {}

func (x *MultiSelect_Query_LogsQuery_Type_FieldName) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_Query_LogsQuery_Type_FieldName.ProtoReflect.Descriptor instead.
func (*MultiSelect_Query_LogsQuery_Type_FieldName) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 6, 0, 0, 0}
}

func (x *MultiSelect_Query_LogsQuery_Type_FieldName) GetLogRegex() *wrapperspb.StringValue {
	if x != nil {
		return x.LogRegex
	}
	return nil
}

type MultiSelect_Query_LogsQuery_Type_FieldValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObservationField *ObservationField `protobuf:"bytes,3,opt,name=observation_field,json=observationField,proto3" json:"observation_field,omitempty"`
}

func (x *MultiSelect_Query_LogsQuery_Type_FieldValue) Reset() {
	*x = MultiSelect_Query_LogsQuery_Type_FieldValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_Query_LogsQuery_Type_FieldValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_Query_LogsQuery_Type_FieldValue) ProtoMessage() {}

func (x *MultiSelect_Query_LogsQuery_Type_FieldValue) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_Query_LogsQuery_Type_FieldValue.ProtoReflect.Descriptor instead.
func (*MultiSelect_Query_LogsQuery_Type_FieldValue) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 6, 0, 0, 1}
}

func (x *MultiSelect_Query_LogsQuery_Type_FieldValue) GetObservationField() *ObservationField {
	if x != nil {
		return x.ObservationField
	}
	return nil
}

type MultiSelect_Query_SpansQuery_Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*MultiSelect_Query_SpansQuery_Type_FieldName_
	//	*MultiSelect_Query_SpansQuery_Type_FieldValue_
	Value isMultiSelect_Query_SpansQuery_Type_Value `protobuf_oneof:"value"`
}

func (x *MultiSelect_Query_SpansQuery_Type) Reset() {
	*x = MultiSelect_Query_SpansQuery_Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_Query_SpansQuery_Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_Query_SpansQuery_Type) ProtoMessage() {}

func (x *MultiSelect_Query_SpansQuery_Type) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_Query_SpansQuery_Type.ProtoReflect.Descriptor instead.
func (*MultiSelect_Query_SpansQuery_Type) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 6, 1, 0}
}

func (m *MultiSelect_Query_SpansQuery_Type) GetValue() isMultiSelect_Query_SpansQuery_Type_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *MultiSelect_Query_SpansQuery_Type) GetFieldName() *MultiSelect_Query_SpansQuery_Type_FieldName {
	if x, ok := x.GetValue().(*MultiSelect_Query_SpansQuery_Type_FieldName_); ok {
		return x.FieldName
	}
	return nil
}

func (x *MultiSelect_Query_SpansQuery_Type) GetFieldValue() *MultiSelect_Query_SpansQuery_Type_FieldValue {
	if x, ok := x.GetValue().(*MultiSelect_Query_SpansQuery_Type_FieldValue_); ok {
		return x.FieldValue
	}
	return nil
}

type isMultiSelect_Query_SpansQuery_Type_Value interface {
	isMultiSelect_Query_SpansQuery_Type_Value()
}

type MultiSelect_Query_SpansQuery_Type_FieldName_ struct {
	FieldName *MultiSelect_Query_SpansQuery_Type_FieldName `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3,oneof"`
}

type MultiSelect_Query_SpansQuery_Type_FieldValue_ struct {
	FieldValue *MultiSelect_Query_SpansQuery_Type_FieldValue `protobuf:"bytes,2,opt,name=field_value,json=fieldValue,proto3,oneof"`
}

func (*MultiSelect_Query_SpansQuery_Type_FieldName_) isMultiSelect_Query_SpansQuery_Type_Value() {}

func (*MultiSelect_Query_SpansQuery_Type_FieldValue_) isMultiSelect_Query_SpansQuery_Type_Value() {}

type MultiSelect_Query_SpansQuery_Type_FieldName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpanRegex *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=span_regex,json=spanRegex,proto3" json:"span_regex,omitempty"`
}

func (x *MultiSelect_Query_SpansQuery_Type_FieldName) Reset() {
	*x = MultiSelect_Query_SpansQuery_Type_FieldName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_Query_SpansQuery_Type_FieldName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_Query_SpansQuery_Type_FieldName) ProtoMessage() {}

func (x *MultiSelect_Query_SpansQuery_Type_FieldName) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_Query_SpansQuery_Type_FieldName.ProtoReflect.Descriptor instead.
func (*MultiSelect_Query_SpansQuery_Type_FieldName) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 6, 1, 0, 0}
}

func (x *MultiSelect_Query_SpansQuery_Type_FieldName) GetSpanRegex() *wrapperspb.StringValue {
	if x != nil {
		return x.SpanRegex
	}
	return nil
}

type MultiSelect_Query_SpansQuery_Type_FieldValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *SpanField `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MultiSelect_Query_SpansQuery_Type_FieldValue) Reset() {
	*x = MultiSelect_Query_SpansQuery_Type_FieldValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_Query_SpansQuery_Type_FieldValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_Query_SpansQuery_Type_FieldValue) ProtoMessage() {}

func (x *MultiSelect_Query_SpansQuery_Type_FieldValue) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_Query_SpansQuery_Type_FieldValue.ProtoReflect.Descriptor instead.
func (*MultiSelect_Query_SpansQuery_Type_FieldValue) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 6, 1, 0, 1}
}

func (x *MultiSelect_Query_SpansQuery_Type_FieldValue) GetValue() *SpanField {
	if x != nil {
		return x.Value
	}
	return nil
}

type MultiSelect_Query_MetricsQuery_Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*MultiSelect_Query_MetricsQuery_Type_MetricName_
	//	*MultiSelect_Query_MetricsQuery_Type_LabelName_
	//	*MultiSelect_Query_MetricsQuery_Type_LabelValue_
	Value isMultiSelect_Query_MetricsQuery_Type_Value `protobuf_oneof:"value"`
}

func (x *MultiSelect_Query_MetricsQuery_Type) Reset() {
	*x = MultiSelect_Query_MetricsQuery_Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_Query_MetricsQuery_Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_Query_MetricsQuery_Type) ProtoMessage() {}

func (x *MultiSelect_Query_MetricsQuery_Type) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_Query_MetricsQuery_Type.ProtoReflect.Descriptor instead.
func (*MultiSelect_Query_MetricsQuery_Type) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 6, 2, 0}
}

func (m *MultiSelect_Query_MetricsQuery_Type) GetValue() isMultiSelect_Query_MetricsQuery_Type_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *MultiSelect_Query_MetricsQuery_Type) GetMetricName() *MultiSelect_Query_MetricsQuery_Type_MetricName {
	if x, ok := x.GetValue().(*MultiSelect_Query_MetricsQuery_Type_MetricName_); ok {
		return x.MetricName
	}
	return nil
}

func (x *MultiSelect_Query_MetricsQuery_Type) GetLabelName() *MultiSelect_Query_MetricsQuery_Type_LabelName {
	if x, ok := x.GetValue().(*MultiSelect_Query_MetricsQuery_Type_LabelName_); ok {
		return x.LabelName
	}
	return nil
}

func (x *MultiSelect_Query_MetricsQuery_Type) GetLabelValue() *MultiSelect_Query_MetricsQuery_Type_LabelValue {
	if x, ok := x.GetValue().(*MultiSelect_Query_MetricsQuery_Type_LabelValue_); ok {
		return x.LabelValue
	}
	return nil
}

type isMultiSelect_Query_MetricsQuery_Type_Value interface {
	isMultiSelect_Query_MetricsQuery_Type_Value()
}

type MultiSelect_Query_MetricsQuery_Type_MetricName_ struct {
	MetricName *MultiSelect_Query_MetricsQuery_Type_MetricName `protobuf:"bytes,1,opt,name=metric_name,json=metricName,proto3,oneof"`
}

type MultiSelect_Query_MetricsQuery_Type_LabelName_ struct {
	LabelName *MultiSelect_Query_MetricsQuery_Type_LabelName `protobuf:"bytes,2,opt,name=label_name,json=labelName,proto3,oneof"`
}

type MultiSelect_Query_MetricsQuery_Type_LabelValue_ struct {
	LabelValue *MultiSelect_Query_MetricsQuery_Type_LabelValue `protobuf:"bytes,3,opt,name=label_value,json=labelValue,proto3,oneof"`
}

func (*MultiSelect_Query_MetricsQuery_Type_MetricName_) isMultiSelect_Query_MetricsQuery_Type_Value() {
}

func (*MultiSelect_Query_MetricsQuery_Type_LabelName_) isMultiSelect_Query_MetricsQuery_Type_Value() {
}

func (*MultiSelect_Query_MetricsQuery_Type_LabelValue_) isMultiSelect_Query_MetricsQuery_Type_Value() {
}

type MultiSelect_Query_MetricsQuery_StringOrVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*MultiSelect_Query_MetricsQuery_StringOrVariable_StringValue
	//	*MultiSelect_Query_MetricsQuery_StringOrVariable_VariableName
	Value isMultiSelect_Query_MetricsQuery_StringOrVariable_Value `protobuf_oneof:"value"`
}

func (x *MultiSelect_Query_MetricsQuery_StringOrVariable) Reset() {
	*x = MultiSelect_Query_MetricsQuery_StringOrVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_Query_MetricsQuery_StringOrVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_Query_MetricsQuery_StringOrVariable) ProtoMessage() {}

func (x *MultiSelect_Query_MetricsQuery_StringOrVariable) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_Query_MetricsQuery_StringOrVariable.ProtoReflect.Descriptor instead.
func (*MultiSelect_Query_MetricsQuery_StringOrVariable) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 6, 2, 1}
}

func (m *MultiSelect_Query_MetricsQuery_StringOrVariable) GetValue() isMultiSelect_Query_MetricsQuery_StringOrVariable_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *MultiSelect_Query_MetricsQuery_StringOrVariable) GetStringValue() *wrapperspb.StringValue {
	if x, ok := x.GetValue().(*MultiSelect_Query_MetricsQuery_StringOrVariable_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *MultiSelect_Query_MetricsQuery_StringOrVariable) GetVariableName() *wrapperspb.StringValue {
	if x, ok := x.GetValue().(*MultiSelect_Query_MetricsQuery_StringOrVariable_VariableName); ok {
		return x.VariableName
	}
	return nil
}

type isMultiSelect_Query_MetricsQuery_StringOrVariable_Value interface {
	isMultiSelect_Query_MetricsQuery_StringOrVariable_Value()
}

type MultiSelect_Query_MetricsQuery_StringOrVariable_StringValue struct {
	StringValue *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type MultiSelect_Query_MetricsQuery_StringOrVariable_VariableName struct {
	VariableName *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=variable_name,json=variableName,proto3,oneof"`
}

func (*MultiSelect_Query_MetricsQuery_StringOrVariable_StringValue) isMultiSelect_Query_MetricsQuery_StringOrVariable_Value() {
}

func (*MultiSelect_Query_MetricsQuery_StringOrVariable_VariableName) isMultiSelect_Query_MetricsQuery_StringOrVariable_Value() {
}

type MultiSelect_Query_MetricsQuery_MetricsLabelFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metric   *MultiSelect_Query_MetricsQuery_StringOrVariable `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty"`
	Label    *MultiSelect_Query_MetricsQuery_StringOrVariable `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Operator *MultiSelect_Query_MetricsQuery_Operator         `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *MultiSelect_Query_MetricsQuery_MetricsLabelFilter) Reset() {
	*x = MultiSelect_Query_MetricsQuery_MetricsLabelFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_Query_MetricsQuery_MetricsLabelFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_Query_MetricsQuery_MetricsLabelFilter) ProtoMessage() {}

func (x *MultiSelect_Query_MetricsQuery_MetricsLabelFilter) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_Query_MetricsQuery_MetricsLabelFilter.ProtoReflect.Descriptor instead.
func (*MultiSelect_Query_MetricsQuery_MetricsLabelFilter) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 6, 2, 2}
}

func (x *MultiSelect_Query_MetricsQuery_MetricsLabelFilter) GetMetric() *MultiSelect_Query_MetricsQuery_StringOrVariable {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *MultiSelect_Query_MetricsQuery_MetricsLabelFilter) GetLabel() *MultiSelect_Query_MetricsQuery_StringOrVariable {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *MultiSelect_Query_MetricsQuery_MetricsLabelFilter) GetOperator() *MultiSelect_Query_MetricsQuery_Operator {
	if x != nil {
		return x.Operator
	}
	return nil
}

type MultiSelect_Query_MetricsQuery_Operator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*MultiSelect_Query_MetricsQuery_Operator_Equals
	//	*MultiSelect_Query_MetricsQuery_Operator_NotEquals
	Value isMultiSelect_Query_MetricsQuery_Operator_Value `protobuf_oneof:"value"`
}

func (x *MultiSelect_Query_MetricsQuery_Operator) Reset() {
	*x = MultiSelect_Query_MetricsQuery_Operator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_Query_MetricsQuery_Operator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_Query_MetricsQuery_Operator) ProtoMessage() {}

func (x *MultiSelect_Query_MetricsQuery_Operator) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_Query_MetricsQuery_Operator.ProtoReflect.Descriptor instead.
func (*MultiSelect_Query_MetricsQuery_Operator) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 6, 2, 3}
}

func (m *MultiSelect_Query_MetricsQuery_Operator) GetValue() isMultiSelect_Query_MetricsQuery_Operator_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *MultiSelect_Query_MetricsQuery_Operator) GetEquals() *MultiSelect_Query_MetricsQuery_Equals {
	if x, ok := x.GetValue().(*MultiSelect_Query_MetricsQuery_Operator_Equals); ok {
		return x.Equals
	}
	return nil
}

func (x *MultiSelect_Query_MetricsQuery_Operator) GetNotEquals() *MultiSelect_Query_MetricsQuery_NotEquals {
	if x, ok := x.GetValue().(*MultiSelect_Query_MetricsQuery_Operator_NotEquals); ok {
		return x.NotEquals
	}
	return nil
}

type isMultiSelect_Query_MetricsQuery_Operator_Value interface {
	isMultiSelect_Query_MetricsQuery_Operator_Value()
}

type MultiSelect_Query_MetricsQuery_Operator_Equals struct {
	Equals *MultiSelect_Query_MetricsQuery_Equals `protobuf:"bytes,1,opt,name=equals,proto3,oneof"`
}

type MultiSelect_Query_MetricsQuery_Operator_NotEquals struct {
	NotEquals *MultiSelect_Query_MetricsQuery_NotEquals `protobuf:"bytes,2,opt,name=not_equals,json=notEquals,proto3,oneof"`
}

func (*MultiSelect_Query_MetricsQuery_Operator_Equals) isMultiSelect_Query_MetricsQuery_Operator_Value() {
}

func (*MultiSelect_Query_MetricsQuery_Operator_NotEquals) isMultiSelect_Query_MetricsQuery_Operator_Value() {
}

type MultiSelect_Query_MetricsQuery_Equals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selection *MultiSelect_Query_MetricsQuery_Selection `protobuf:"bytes,1,opt,name=selection,proto3" json:"selection,omitempty"`
}

func (x *MultiSelect_Query_MetricsQuery_Equals) Reset() {
	*x = MultiSelect_Query_MetricsQuery_Equals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_Query_MetricsQuery_Equals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_Query_MetricsQuery_Equals) ProtoMessage() {}

func (x *MultiSelect_Query_MetricsQuery_Equals) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_Query_MetricsQuery_Equals.ProtoReflect.Descriptor instead.
func (*MultiSelect_Query_MetricsQuery_Equals) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 6, 2, 4}
}

func (x *MultiSelect_Query_MetricsQuery_Equals) GetSelection() *MultiSelect_Query_MetricsQuery_Selection {
	if x != nil {
		return x.Selection
	}
	return nil
}

type MultiSelect_Query_MetricsQuery_NotEquals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selection *MultiSelect_Query_MetricsQuery_Selection `protobuf:"bytes,1,opt,name=selection,proto3" json:"selection,omitempty"`
}

func (x *MultiSelect_Query_MetricsQuery_NotEquals) Reset() {
	*x = MultiSelect_Query_MetricsQuery_NotEquals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_Query_MetricsQuery_NotEquals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_Query_MetricsQuery_NotEquals) ProtoMessage() {}

func (x *MultiSelect_Query_MetricsQuery_NotEquals) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_Query_MetricsQuery_NotEquals.ProtoReflect.Descriptor instead.
func (*MultiSelect_Query_MetricsQuery_NotEquals) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 6, 2, 5}
}

func (x *MultiSelect_Query_MetricsQuery_NotEquals) GetSelection() *MultiSelect_Query_MetricsQuery_Selection {
	if x != nil {
		return x.Selection
	}
	return nil
}

type MultiSelect_Query_MetricsQuery_Selection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*MultiSelect_Query_MetricsQuery_Selection_List
	Value isMultiSelect_Query_MetricsQuery_Selection_Value `protobuf_oneof:"value"`
}

func (x *MultiSelect_Query_MetricsQuery_Selection) Reset() {
	*x = MultiSelect_Query_MetricsQuery_Selection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_Query_MetricsQuery_Selection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_Query_MetricsQuery_Selection) ProtoMessage() {}

func (x *MultiSelect_Query_MetricsQuery_Selection) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_Query_MetricsQuery_Selection.ProtoReflect.Descriptor instead.
func (*MultiSelect_Query_MetricsQuery_Selection) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 6, 2, 6}
}

func (m *MultiSelect_Query_MetricsQuery_Selection) GetValue() isMultiSelect_Query_MetricsQuery_Selection_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *MultiSelect_Query_MetricsQuery_Selection) GetList() *MultiSelect_Query_MetricsQuery_Selection_ListSelection {
	if x, ok := x.GetValue().(*MultiSelect_Query_MetricsQuery_Selection_List); ok {
		return x.List
	}
	return nil
}

type isMultiSelect_Query_MetricsQuery_Selection_Value interface {
	isMultiSelect_Query_MetricsQuery_Selection_Value()
}

type MultiSelect_Query_MetricsQuery_Selection_List struct {
	List *MultiSelect_Query_MetricsQuery_Selection_ListSelection `protobuf:"bytes,1,opt,name=list,proto3,oneof"`
}

func (*MultiSelect_Query_MetricsQuery_Selection_List) isMultiSelect_Query_MetricsQuery_Selection_Value() {
}

type MultiSelect_Query_MetricsQuery_Type_MetricName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricRegex *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=metric_regex,json=metricRegex,proto3" json:"metric_regex,omitempty"`
}

func (x *MultiSelect_Query_MetricsQuery_Type_MetricName) Reset() {
	*x = MultiSelect_Query_MetricsQuery_Type_MetricName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_Query_MetricsQuery_Type_MetricName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_Query_MetricsQuery_Type_MetricName) ProtoMessage() {}

func (x *MultiSelect_Query_MetricsQuery_Type_MetricName) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_Query_MetricsQuery_Type_MetricName.ProtoReflect.Descriptor instead.
func (*MultiSelect_Query_MetricsQuery_Type_MetricName) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 6, 2, 0, 0}
}

func (x *MultiSelect_Query_MetricsQuery_Type_MetricName) GetMetricRegex() *wrapperspb.StringValue {
	if x != nil {
		return x.MetricRegex
	}
	return nil
}

type MultiSelect_Query_MetricsQuery_Type_LabelName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricRegex *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=metric_regex,json=metricRegex,proto3" json:"metric_regex,omitempty"`
}

func (x *MultiSelect_Query_MetricsQuery_Type_LabelName) Reset() {
	*x = MultiSelect_Query_MetricsQuery_Type_LabelName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_Query_MetricsQuery_Type_LabelName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_Query_MetricsQuery_Type_LabelName) ProtoMessage() {}

func (x *MultiSelect_Query_MetricsQuery_Type_LabelName) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_Query_MetricsQuery_Type_LabelName.ProtoReflect.Descriptor instead.
func (*MultiSelect_Query_MetricsQuery_Type_LabelName) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 6, 2, 0, 1}
}

func (x *MultiSelect_Query_MetricsQuery_Type_LabelName) GetMetricRegex() *wrapperspb.StringValue {
	if x != nil {
		return x.MetricRegex
	}
	return nil
}

type MultiSelect_Query_MetricsQuery_Type_LabelValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricName   *MultiSelect_Query_MetricsQuery_StringOrVariable     `protobuf:"bytes,1,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	LabelName    *MultiSelect_Query_MetricsQuery_StringOrVariable     `protobuf:"bytes,2,opt,name=label_name,json=labelName,proto3" json:"label_name,omitempty"`
	LabelFilters []*MultiSelect_Query_MetricsQuery_MetricsLabelFilter `protobuf:"bytes,3,rep,name=label_filters,json=labelFilters,proto3" json:"label_filters,omitempty"`
}

func (x *MultiSelect_Query_MetricsQuery_Type_LabelValue) Reset() {
	*x = MultiSelect_Query_MetricsQuery_Type_LabelValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_Query_MetricsQuery_Type_LabelValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_Query_MetricsQuery_Type_LabelValue) ProtoMessage() {}

func (x *MultiSelect_Query_MetricsQuery_Type_LabelValue) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_Query_MetricsQuery_Type_LabelValue.ProtoReflect.Descriptor instead.
func (*MultiSelect_Query_MetricsQuery_Type_LabelValue) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 6, 2, 0, 2}
}

func (x *MultiSelect_Query_MetricsQuery_Type_LabelValue) GetMetricName() *MultiSelect_Query_MetricsQuery_StringOrVariable {
	if x != nil {
		return x.MetricName
	}
	return nil
}

func (x *MultiSelect_Query_MetricsQuery_Type_LabelValue) GetLabelName() *MultiSelect_Query_MetricsQuery_StringOrVariable {
	if x != nil {
		return x.LabelName
	}
	return nil
}

func (x *MultiSelect_Query_MetricsQuery_Type_LabelValue) GetLabelFilters() []*MultiSelect_Query_MetricsQuery_MetricsLabelFilter {
	if x != nil {
		return x.LabelFilters
	}
	return nil
}

type MultiSelect_Query_MetricsQuery_Selection_ListSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*MultiSelect_Query_MetricsQuery_StringOrVariable `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *MultiSelect_Query_MetricsQuery_Selection_ListSelection) Reset() {
	*x = MultiSelect_Query_MetricsQuery_Selection_ListSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_Query_MetricsQuery_Selection_ListSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_Query_MetricsQuery_Selection_ListSelection) ProtoMessage() {}

func (x *MultiSelect_Query_MetricsQuery_Selection_ListSelection) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_Query_MetricsQuery_Selection_ListSelection.ProtoReflect.Descriptor instead.
func (*MultiSelect_Query_MetricsQuery_Selection_ListSelection) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 6, 2, 6, 0}
}

func (x *MultiSelect_Query_MetricsQuery_Selection_ListSelection) GetValues() []*MultiSelect_Query_MetricsQuery_StringOrVariable {
	if x != nil {
		return x.Values
	}
	return nil
}

type MultiSelect_Selection_AllSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MultiSelect_Selection_AllSelection) Reset() {
	*x = MultiSelect_Selection_AllSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_Selection_AllSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_Selection_AllSelection) ProtoMessage() {}

func (x *MultiSelect_Selection_AllSelection) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_Selection_AllSelection.ProtoReflect.Descriptor instead.
func (*MultiSelect_Selection_AllSelection) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 8, 0}
}

type MultiSelect_Selection_ListSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*wrapperspb.StringValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	Labels []*wrapperspb.StringValue `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *MultiSelect_Selection_ListSelection) Reset() {
	*x = MultiSelect_Selection_ListSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSelect_Selection_ListSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSelect_Selection_ListSelection) ProtoMessage() {}

func (x *MultiSelect_Selection_ListSelection) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSelect_Selection_ListSelection.ProtoReflect.Descriptor instead.
func (*MultiSelect_Selection_ListSelection) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP(), []int{2, 8, 1}
}

func (x *MultiSelect_Selection_ListSelection) GetValues() []*wrapperspb.StringValue {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *MultiSelect_Selection_ListSelection) GetLabels() []*wrapperspb.StringValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

var File_com_coralogixapis_dashboards_v1_ast_variable_proto protoreflect.FileDescriptor

var file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDesc = []byte{
	0x0a, 0x32, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x1a, 0x3e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3c, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x73, 0x70, 0x61, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb4, 0x04, 0x0a, 0x08, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x58, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xbd, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x07,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3e, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf4, 0x31, 0x0a, 0x0b, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x6c, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x76,
	0x0a, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xff, 0x03, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x5e, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x73, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x67, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x6a, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x70, 0x61,
	0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09,
	0x73, 0x70, 0x61, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x54, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xab, 0x01, 0x0a, 0x0e, 0x4c, 0x6f, 0x67,
	0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x65, 0x0a, 0x11, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x10, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x86, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0b,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x1a,
	0x5a, 0x0a, 0x0f, 0x53, 0x70, 0x61, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x4a, 0x0a, 0x12, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x34, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0xc2, 0x02, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x6b, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x12, 0x78, 0x0a, 0x15, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x13, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xcd, 0x1c, 0x0a,
	0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x61, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x09,
	0x6c, 0x6f, 0x67, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x6a, 0x0a, 0x0d, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x64, 0x0a, 0x0b, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x0a, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x9c, 0x04, 0x0a, 0x09,
	0x4c, 0x6f, 0x67, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x59, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4c, 0x6f, 0x67, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x1a, 0xb3, 0x03, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x70, 0x0a,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x73, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x6f, 0x67,
	0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x46, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x39, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x67, 0x65, 0x78, 0x1a, 0x73, 0x0a, 0x0a,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x65, 0x0a, 0x11, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x10, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x84, 0x04, 0x0a, 0x0a, 0x53,
	0x70, 0x61, 0x6e, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x5a, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x53, 0x70, 0x61, 0x6e, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x99, 0x03, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x71,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x73,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x74, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53,
	0x70, 0x61, 0x6e, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x48, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x67,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x52, 0x65, 0x67, 0x65,
	0x78, 0x1a, 0x55, 0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0xdf, 0x11, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x5c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x1a, 0x89, 0x07, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x76, 0x0a, 0x0b, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x73, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x76, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x4d,
	0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x67, 0x65, 0x78, 0x1a, 0x4c, 0x0a,
	0x09, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x67, 0x65, 0x78, 0x1a, 0xf5, 0x02, 0x0a, 0x0a,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x75, 0x0a, 0x0b, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x54, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x73, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4f, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x09, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7b, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xa3, 0x01, 0x0a,
	0x10, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x41, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0xd8, 0x02, 0x0a, 0x12, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x6c, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x6a, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4f, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x68, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0xe9, 0x01,
	0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x64, 0x0a, 0x06, 0x65, 0x71,
	0x75, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x06, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73,
	0x12, 0x6e, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x74, 0x45, 0x71, 0x75,
	0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x75, 0x0a, 0x06, 0x45, 0x71, 0x75,
	0x61, 0x6c, 0x73, 0x12, 0x6b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x78, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x6b, 0x0a,
	0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x86, 0x02, 0x0a, 0x09, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x71, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x7d, 0x0a, 0x0d, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x93, 0x01, 0x0a,
	0x13, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65,
	0x67, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65,
	0x67, 0x65, 0x78, 0x12, 0x3d, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x67,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x67,
	0x65, 0x78, 0x1a, 0xde, 0x02, 0x0a, 0x09, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5b, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x5e, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x0e, 0x0a,
	0x0c, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x7b, 0x0a,
	0x0d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x9f, 0x02, 0x0a, 0x18, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x7e, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x57, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x82, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45,
	0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4e,
	0x47, 0x4c, 0x45, 0x10, 0x03, 0x22, 0x86, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x46,
	0x52, 0x45, 0x53, 0x48, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x52,
	0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f,
	0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x53, 0x48, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x4c, 0x4f, 0x41,
	0x44, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x53,
	0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x2a, 0xa7,
	0x01, 0x0a, 0x13, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a,
	0x21, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescOnce sync.Once
	file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescData = file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDesc
)

func file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescData)
	})
	return file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDescData
}

var file_com_coralogixapis_dashboards_v1_ast_variable_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_com_coralogixapis_dashboards_v1_ast_variable_proto_goTypes = []any{
	(VariableDisplayType)(0),                                       // 0: com.coralogixapis.dashboards.v1.ast.VariableDisplayType
	(MultiSelect_RefreshStrategy)(0),                               // 1: com.coralogixapis.dashboards.v1.ast.MultiSelect.RefreshStrategy
	(MultiSelect_VariableSelectionOptions_SelectionType)(0),        // 2: com.coralogixapis.dashboards.v1.ast.MultiSelect.VariableSelectionOptions.SelectionType
	(*Variable)(nil),                                               // 3: com.coralogixapis.dashboards.v1.ast.Variable
	(*Constant)(nil),                                               // 4: com.coralogixapis.dashboards.v1.ast.Constant
	(*MultiSelect)(nil),                                            // 5: com.coralogixapis.dashboards.v1.ast.MultiSelect
	(*Variable_Definition)(nil),                                    // 6: com.coralogixapis.dashboards.v1.ast.Variable.Definition
	(*MultiSelect_Source)(nil),                                     // 7: com.coralogixapis.dashboards.v1.ast.MultiSelect.Source
	(*MultiSelect_LogsPathSource)(nil),                             // 8: com.coralogixapis.dashboards.v1.ast.MultiSelect.LogsPathSource
	(*MultiSelect_MetricLabelSource)(nil),                          // 9: com.coralogixapis.dashboards.v1.ast.MultiSelect.MetricLabelSource
	(*MultiSelect_SpanFieldSource)(nil),                            // 10: com.coralogixapis.dashboards.v1.ast.MultiSelect.SpanFieldSource
	(*MultiSelect_ConstantListSource)(nil),                         // 11: com.coralogixapis.dashboards.v1.ast.MultiSelect.ConstantListSource
	(*MultiSelect_QuerySource)(nil),                                // 12: com.coralogixapis.dashboards.v1.ast.MultiSelect.QuerySource
	(*MultiSelect_Query)(nil),                                      // 13: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query
	(*MultiSelect_ValueDisplayOptions)(nil),                        // 14: com.coralogixapis.dashboards.v1.ast.MultiSelect.ValueDisplayOptions
	(*MultiSelect_Selection)(nil),                                  // 15: com.coralogixapis.dashboards.v1.ast.MultiSelect.Selection
	(*MultiSelect_VariableSelectionOptions)(nil),                   // 16: com.coralogixapis.dashboards.v1.ast.MultiSelect.VariableSelectionOptions
	(*MultiSelect_Query_LogsQuery)(nil),                            // 17: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.LogsQuery
	(*MultiSelect_Query_SpansQuery)(nil),                           // 18: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.SpansQuery
	(*MultiSelect_Query_MetricsQuery)(nil),                         // 19: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery
	(*MultiSelect_Query_LogsQuery_Type)(nil),                       // 20: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.LogsQuery.Type
	(*MultiSelect_Query_LogsQuery_Type_FieldName)(nil),             // 21: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.LogsQuery.Type.FieldName
	(*MultiSelect_Query_LogsQuery_Type_FieldValue)(nil),            // 22: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.LogsQuery.Type.FieldValue
	(*MultiSelect_Query_SpansQuery_Type)(nil),                      // 23: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.SpansQuery.Type
	(*MultiSelect_Query_SpansQuery_Type_FieldName)(nil),            // 24: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.SpansQuery.Type.FieldName
	(*MultiSelect_Query_SpansQuery_Type_FieldValue)(nil),           // 25: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.SpansQuery.Type.FieldValue
	(*MultiSelect_Query_MetricsQuery_Type)(nil),                    // 26: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Type
	(*MultiSelect_Query_MetricsQuery_StringOrVariable)(nil),        // 27: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.StringOrVariable
	(*MultiSelect_Query_MetricsQuery_MetricsLabelFilter)(nil),      // 28: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.MetricsLabelFilter
	(*MultiSelect_Query_MetricsQuery_Operator)(nil),                // 29: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Operator
	(*MultiSelect_Query_MetricsQuery_Equals)(nil),                  // 30: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Equals
	(*MultiSelect_Query_MetricsQuery_NotEquals)(nil),               // 31: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.NotEquals
	(*MultiSelect_Query_MetricsQuery_Selection)(nil),               // 32: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Selection
	(*MultiSelect_Query_MetricsQuery_Type_MetricName)(nil),         // 33: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Type.MetricName
	(*MultiSelect_Query_MetricsQuery_Type_LabelName)(nil),          // 34: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Type.LabelName
	(*MultiSelect_Query_MetricsQuery_Type_LabelValue)(nil),         // 35: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Type.LabelValue
	(*MultiSelect_Query_MetricsQuery_Selection_ListSelection)(nil), // 36: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Selection.ListSelection
	(*MultiSelect_Selection_AllSelection)(nil),                     // 37: com.coralogixapis.dashboards.v1.ast.MultiSelect.Selection.AllSelection
	(*MultiSelect_Selection_ListSelection)(nil),                    // 38: com.coralogixapis.dashboards.v1.ast.MultiSelect.Selection.ListSelection
	(*wrapperspb.StringValue)(nil),                                 // 39: google.protobuf.StringValue
	(OrderDirection)(0),                                            // 40: com.coralogixapis.dashboards.v1.common.OrderDirection
	(*ObservationField)(nil),                                       // 41: com.coralogixapis.dashboards.v1.common.ObservationField
	(*SpanField)(nil),                                              // 42: com.coralogixapis.dashboards.v1.common.SpanField
}
var file_com_coralogixapis_dashboards_v1_ast_variable_proto_depIdxs = []int32{
	39, // 0: com.coralogixapis.dashboards.v1.ast.Variable.name:type_name -> google.protobuf.StringValue
	6,  // 1: com.coralogixapis.dashboards.v1.ast.Variable.definition:type_name -> com.coralogixapis.dashboards.v1.ast.Variable.Definition
	39, // 2: com.coralogixapis.dashboards.v1.ast.Variable.display_name:type_name -> google.protobuf.StringValue
	39, // 3: com.coralogixapis.dashboards.v1.ast.Variable.description:type_name -> google.protobuf.StringValue
	0,  // 4: com.coralogixapis.dashboards.v1.ast.Variable.display_type:type_name -> com.coralogixapis.dashboards.v1.ast.VariableDisplayType
	39, // 5: com.coralogixapis.dashboards.v1.ast.Constant.value:type_name -> google.protobuf.StringValue
	39, // 6: com.coralogixapis.dashboards.v1.ast.MultiSelect.selected:type_name -> google.protobuf.StringValue
	7,  // 7: com.coralogixapis.dashboards.v1.ast.MultiSelect.source:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Source
	15, // 8: com.coralogixapis.dashboards.v1.ast.MultiSelect.selection:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Selection
	40, // 9: com.coralogixapis.dashboards.v1.ast.MultiSelect.values_order_direction:type_name -> com.coralogixapis.dashboards.v1.common.OrderDirection
	16, // 10: com.coralogixapis.dashboards.v1.ast.MultiSelect.selection_options:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.VariableSelectionOptions
	4,  // 11: com.coralogixapis.dashboards.v1.ast.Variable.Definition.constant:type_name -> com.coralogixapis.dashboards.v1.ast.Constant
	5,  // 12: com.coralogixapis.dashboards.v1.ast.Variable.Definition.multi_select:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect
	8,  // 13: com.coralogixapis.dashboards.v1.ast.MultiSelect.Source.logs_path:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.LogsPathSource
	9,  // 14: com.coralogixapis.dashboards.v1.ast.MultiSelect.Source.metric_label:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.MetricLabelSource
	11, // 15: com.coralogixapis.dashboards.v1.ast.MultiSelect.Source.constant_list:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.ConstantListSource
	10, // 16: com.coralogixapis.dashboards.v1.ast.MultiSelect.Source.span_field:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.SpanFieldSource
	12, // 17: com.coralogixapis.dashboards.v1.ast.MultiSelect.Source.query:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.QuerySource
	39, // 18: com.coralogixapis.dashboards.v1.ast.MultiSelect.LogsPathSource.value:type_name -> google.protobuf.StringValue
	41, // 19: com.coralogixapis.dashboards.v1.ast.MultiSelect.LogsPathSource.observation_field:type_name -> com.coralogixapis.dashboards.v1.common.ObservationField
	39, // 20: com.coralogixapis.dashboards.v1.ast.MultiSelect.MetricLabelSource.metric_name:type_name -> google.protobuf.StringValue
	39, // 21: com.coralogixapis.dashboards.v1.ast.MultiSelect.MetricLabelSource.label:type_name -> google.protobuf.StringValue
	42, // 22: com.coralogixapis.dashboards.v1.ast.MultiSelect.SpanFieldSource.value:type_name -> com.coralogixapis.dashboards.v1.common.SpanField
	39, // 23: com.coralogixapis.dashboards.v1.ast.MultiSelect.ConstantListSource.values:type_name -> google.protobuf.StringValue
	13, // 24: com.coralogixapis.dashboards.v1.ast.MultiSelect.QuerySource.query:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Query
	1,  // 25: com.coralogixapis.dashboards.v1.ast.MultiSelect.QuerySource.refresh_strategy:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.RefreshStrategy
	14, // 26: com.coralogixapis.dashboards.v1.ast.MultiSelect.QuerySource.value_display_options:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.ValueDisplayOptions
	17, // 27: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.logs_query:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.LogsQuery
	19, // 28: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.metrics_query:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery
	18, // 29: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.spans_query:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.SpansQuery
	39, // 30: com.coralogixapis.dashboards.v1.ast.MultiSelect.ValueDisplayOptions.value_regex:type_name -> google.protobuf.StringValue
	39, // 31: com.coralogixapis.dashboards.v1.ast.MultiSelect.ValueDisplayOptions.label_regex:type_name -> google.protobuf.StringValue
	37, // 32: com.coralogixapis.dashboards.v1.ast.MultiSelect.Selection.all:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Selection.AllSelection
	38, // 33: com.coralogixapis.dashboards.v1.ast.MultiSelect.Selection.list:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Selection.ListSelection
	2,  // 34: com.coralogixapis.dashboards.v1.ast.MultiSelect.VariableSelectionOptions.selection_type:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.VariableSelectionOptions.SelectionType
	20, // 35: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.LogsQuery.type:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.LogsQuery.Type
	23, // 36: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.SpansQuery.type:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.SpansQuery.Type
	26, // 37: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.type:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Type
	21, // 38: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.LogsQuery.Type.field_name:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.LogsQuery.Type.FieldName
	22, // 39: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.LogsQuery.Type.field_value:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.LogsQuery.Type.FieldValue
	39, // 40: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.LogsQuery.Type.FieldName.log_regex:type_name -> google.protobuf.StringValue
	41, // 41: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.LogsQuery.Type.FieldValue.observation_field:type_name -> com.coralogixapis.dashboards.v1.common.ObservationField
	24, // 42: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.SpansQuery.Type.field_name:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.SpansQuery.Type.FieldName
	25, // 43: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.SpansQuery.Type.field_value:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.SpansQuery.Type.FieldValue
	39, // 44: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.SpansQuery.Type.FieldName.span_regex:type_name -> google.protobuf.StringValue
	42, // 45: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.SpansQuery.Type.FieldValue.value:type_name -> com.coralogixapis.dashboards.v1.common.SpanField
	33, // 46: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Type.metric_name:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Type.MetricName
	34, // 47: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Type.label_name:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Type.LabelName
	35, // 48: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Type.label_value:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Type.LabelValue
	39, // 49: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.StringOrVariable.string_value:type_name -> google.protobuf.StringValue
	39, // 50: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.StringOrVariable.variable_name:type_name -> google.protobuf.StringValue
	27, // 51: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.MetricsLabelFilter.metric:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.StringOrVariable
	27, // 52: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.MetricsLabelFilter.label:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.StringOrVariable
	29, // 53: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.MetricsLabelFilter.operator:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Operator
	30, // 54: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Operator.equals:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Equals
	31, // 55: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Operator.not_equals:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.NotEquals
	32, // 56: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Equals.selection:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Selection
	32, // 57: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.NotEquals.selection:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Selection
	36, // 58: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Selection.list:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Selection.ListSelection
	39, // 59: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Type.MetricName.metric_regex:type_name -> google.protobuf.StringValue
	39, // 60: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Type.LabelName.metric_regex:type_name -> google.protobuf.StringValue
	27, // 61: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Type.LabelValue.metric_name:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.StringOrVariable
	27, // 62: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Type.LabelValue.label_name:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.StringOrVariable
	28, // 63: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Type.LabelValue.label_filters:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.MetricsLabelFilter
	27, // 64: com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.Selection.ListSelection.values:type_name -> com.coralogixapis.dashboards.v1.ast.MultiSelect.Query.MetricsQuery.StringOrVariable
	39, // 65: com.coralogixapis.dashboards.v1.ast.MultiSelect.Selection.ListSelection.values:type_name -> google.protobuf.StringValue
	39, // 66: com.coralogixapis.dashboards.v1.ast.MultiSelect.Selection.ListSelection.labels:type_name -> google.protobuf.StringValue
	67, // [67:67] is the sub-list for method output_type
	67, // [67:67] is the sub-list for method input_type
	67, // [67:67] is the sub-list for extension type_name
	67, // [67:67] is the sub-list for extension extendee
	0,  // [0:67] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_dashboards_v1_ast_variable_proto_init() }
func file_com_coralogixapis_dashboards_v1_ast_variable_proto_init() {
	if File_com_coralogixapis_dashboards_v1_ast_variable_proto != nil {
		return
	}
	file_com_coralogixapis_dashboards_v1_common_observation_field_proto_init()
	file_com_coralogixapis_dashboards_v1_common_order_direction_proto_init()
	file_com_coralogixapis_dashboards_v1_common_span_field_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Variable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Constant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Variable_Definition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_LogsPathSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_MetricLabelSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_SpanFieldSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_ConstantListSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_QuerySource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_ValueDisplayOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_Selection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_VariableSelectionOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_Query_LogsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_Query_SpansQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_Query_MetricsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_Query_LogsQuery_Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_Query_LogsQuery_Type_FieldName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_Query_LogsQuery_Type_FieldValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_Query_SpansQuery_Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_Query_SpansQuery_Type_FieldName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_Query_SpansQuery_Type_FieldValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_Query_MetricsQuery_Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_Query_MetricsQuery_StringOrVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_Query_MetricsQuery_MetricsLabelFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_Query_MetricsQuery_Operator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_Query_MetricsQuery_Equals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_Query_MetricsQuery_NotEquals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_Query_MetricsQuery_Selection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_Query_MetricsQuery_Type_MetricName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_Query_MetricsQuery_Type_LabelName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_Query_MetricsQuery_Type_LabelValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_Query_MetricsQuery_Selection_ListSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_Selection_AllSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSelect_Selection_ListSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[3].OneofWrappers = []any{
		(*Variable_Definition_Constant)(nil),
		(*Variable_Definition_MultiSelect)(nil),
	}
	file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[4].OneofWrappers = []any{
		(*MultiSelect_Source_LogsPath)(nil),
		(*MultiSelect_Source_MetricLabel)(nil),
		(*MultiSelect_Source_ConstantList)(nil),
		(*MultiSelect_Source_SpanField)(nil),
		(*MultiSelect_Source_Query)(nil),
	}
	file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[10].OneofWrappers = []any{
		(*MultiSelect_Query_LogsQuery_)(nil),
		(*MultiSelect_Query_MetricsQuery_)(nil),
		(*MultiSelect_Query_SpansQuery_)(nil),
	}
	file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[12].OneofWrappers = []any{
		(*MultiSelect_Selection_All)(nil),
		(*MultiSelect_Selection_List)(nil),
	}
	file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[17].OneofWrappers = []any{
		(*MultiSelect_Query_LogsQuery_Type_FieldName_)(nil),
		(*MultiSelect_Query_LogsQuery_Type_FieldValue_)(nil),
	}
	file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[20].OneofWrappers = []any{
		(*MultiSelect_Query_SpansQuery_Type_FieldName_)(nil),
		(*MultiSelect_Query_SpansQuery_Type_FieldValue_)(nil),
	}
	file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[23].OneofWrappers = []any{
		(*MultiSelect_Query_MetricsQuery_Type_MetricName_)(nil),
		(*MultiSelect_Query_MetricsQuery_Type_LabelName_)(nil),
		(*MultiSelect_Query_MetricsQuery_Type_LabelValue_)(nil),
	}
	file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[24].OneofWrappers = []any{
		(*MultiSelect_Query_MetricsQuery_StringOrVariable_StringValue)(nil),
		(*MultiSelect_Query_MetricsQuery_StringOrVariable_VariableName)(nil),
	}
	file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[26].OneofWrappers = []any{
		(*MultiSelect_Query_MetricsQuery_Operator_Equals)(nil),
		(*MultiSelect_Query_MetricsQuery_Operator_NotEquals)(nil),
	}
	file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes[29].OneofWrappers = []any{
		(*MultiSelect_Query_MetricsQuery_Selection_List)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogixapis_dashboards_v1_ast_variable_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_dashboards_v1_ast_variable_proto_depIdxs,
		EnumInfos:         file_com_coralogixapis_dashboards_v1_ast_variable_proto_enumTypes,
		MessageInfos:      file_com_coralogixapis_dashboards_v1_ast_variable_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_dashboards_v1_ast_variable_proto = out.File
	file_com_coralogixapis_dashboards_v1_ast_variable_proto_rawDesc = nil
	file_com_coralogixapis_dashboards_v1_ast_variable_proto_goTypes = nil
	file_com_coralogixapis_dashboards_v1_ast_variable_proto_depIdxs = nil
}
