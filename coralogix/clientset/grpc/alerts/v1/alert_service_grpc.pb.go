// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: com/coralogix/alerts/v1/alert_service.proto

package __

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlertServiceClient is the client API for AlertService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertServiceClient interface {
	GetAlert(ctx context.Context, in *GetAlertRequest, opts ...grpc.CallOption) (*GetAlertResponse, error)
	GetAlerts(ctx context.Context, in *GetAlertsRequest, opts ...grpc.CallOption) (*GetAlertsResponse, error)
	GetAlertByUniqueId(ctx context.Context, in *GetAlertByUniqueIdRequest, opts ...grpc.CallOption) (*GetAlertByUniqueIdResponse, error)
	GetAlertModelMapping(ctx context.Context, in *GetAlertModelMappingRequest, opts ...grpc.CallOption) (*GetAlertModelMappingResponse, error)
	CreateAlert(ctx context.Context, in *CreateAlertRequest, opts ...grpc.CallOption) (*CreateAlertResponse, error)
	UpdateAlert(ctx context.Context, in *UpdateAlertRequest, opts ...grpc.CallOption) (*UpdateAlertResponse, error)
	UpdateAlertByUniqueId(ctx context.Context, in *UpdateAlertByUniqueIdRequest, opts ...grpc.CallOption) (*UpdateAlertByUniqueIdResponse, error)
	DeleteAlert(ctx context.Context, in *DeleteAlertRequest, opts ...grpc.CallOption) (*DeleteAlertResponse, error)
	DeleteAlertByUniqueId(ctx context.Context, in *DeleteAlertByUniqueIdRequest, opts ...grpc.CallOption) (*DeleteAlertByUniqueIdResponse, error)
	GetAlertEvents(ctx context.Context, in *GetAlertEventsRequest, opts ...grpc.CallOption) (*GetAlertEventsResponse, error)
	ValidateAlert(ctx context.Context, in *ValidateAlertRequest, opts ...grpc.CallOption) (*ValidateAlertResponse, error)
	GetAlertEventsCountBySeverity(ctx context.Context, in *GetAlertEventsCountBySeverityRequest, opts ...grpc.CallOption) (*GetAlertEventsCountBySeverityResponse, error)
}

type alertServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertServiceClient(cc grpc.ClientConnInterface) AlertServiceClient {
	return &alertServiceClient{cc}
}

func (c *alertServiceClient) GetAlert(ctx context.Context, in *GetAlertRequest, opts ...grpc.CallOption) (*GetAlertResponse, error) {
	out := new(GetAlertResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.alerts.v1.AlertService/GetAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetAlerts(ctx context.Context, in *GetAlertsRequest, opts ...grpc.CallOption) (*GetAlertsResponse, error) {
	out := new(GetAlertsResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.alerts.v1.AlertService/GetAlerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetAlertByUniqueId(ctx context.Context, in *GetAlertByUniqueIdRequest, opts ...grpc.CallOption) (*GetAlertByUniqueIdResponse, error) {
	out := new(GetAlertByUniqueIdResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.alerts.v1.AlertService/GetAlertByUniqueId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetAlertModelMapping(ctx context.Context, in *GetAlertModelMappingRequest, opts ...grpc.CallOption) (*GetAlertModelMappingResponse, error) {
	out := new(GetAlertModelMappingResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.alerts.v1.AlertService/GetAlertModelMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) CreateAlert(ctx context.Context, in *CreateAlertRequest, opts ...grpc.CallOption) (*CreateAlertResponse, error) {
	out := new(CreateAlertResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.alerts.v1.AlertService/CreateAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) UpdateAlert(ctx context.Context, in *UpdateAlertRequest, opts ...grpc.CallOption) (*UpdateAlertResponse, error) {
	out := new(UpdateAlertResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.alerts.v1.AlertService/UpdateAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) UpdateAlertByUniqueId(ctx context.Context, in *UpdateAlertByUniqueIdRequest, opts ...grpc.CallOption) (*UpdateAlertByUniqueIdResponse, error) {
	out := new(UpdateAlertByUniqueIdResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.alerts.v1.AlertService/UpdateAlertByUniqueId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) DeleteAlert(ctx context.Context, in *DeleteAlertRequest, opts ...grpc.CallOption) (*DeleteAlertResponse, error) {
	out := new(DeleteAlertResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.alerts.v1.AlertService/DeleteAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) DeleteAlertByUniqueId(ctx context.Context, in *DeleteAlertByUniqueIdRequest, opts ...grpc.CallOption) (*DeleteAlertByUniqueIdResponse, error) {
	out := new(DeleteAlertByUniqueIdResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.alerts.v1.AlertService/DeleteAlertByUniqueId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetAlertEvents(ctx context.Context, in *GetAlertEventsRequest, opts ...grpc.CallOption) (*GetAlertEventsResponse, error) {
	out := new(GetAlertEventsResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.alerts.v1.AlertService/GetAlertEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) ValidateAlert(ctx context.Context, in *ValidateAlertRequest, opts ...grpc.CallOption) (*ValidateAlertResponse, error) {
	out := new(ValidateAlertResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.alerts.v1.AlertService/ValidateAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetAlertEventsCountBySeverity(ctx context.Context, in *GetAlertEventsCountBySeverityRequest, opts ...grpc.CallOption) (*GetAlertEventsCountBySeverityResponse, error) {
	out := new(GetAlertEventsCountBySeverityResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.alerts.v1.AlertService/GetAlertEventsCountBySeverity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertServiceServer is the server API for AlertService service.
// All implementations must embed UnimplementedAlertServiceServer
// for forward compatibility
type AlertServiceServer interface {
	GetAlert(context.Context, *GetAlertRequest) (*GetAlertResponse, error)
	GetAlerts(context.Context, *GetAlertsRequest) (*GetAlertsResponse, error)
	GetAlertByUniqueId(context.Context, *GetAlertByUniqueIdRequest) (*GetAlertByUniqueIdResponse, error)
	GetAlertModelMapping(context.Context, *GetAlertModelMappingRequest) (*GetAlertModelMappingResponse, error)
	CreateAlert(context.Context, *CreateAlertRequest) (*CreateAlertResponse, error)
	UpdateAlert(context.Context, *UpdateAlertRequest) (*UpdateAlertResponse, error)
	UpdateAlertByUniqueId(context.Context, *UpdateAlertByUniqueIdRequest) (*UpdateAlertByUniqueIdResponse, error)
	DeleteAlert(context.Context, *DeleteAlertRequest) (*DeleteAlertResponse, error)
	DeleteAlertByUniqueId(context.Context, *DeleteAlertByUniqueIdRequest) (*DeleteAlertByUniqueIdResponse, error)
	GetAlertEvents(context.Context, *GetAlertEventsRequest) (*GetAlertEventsResponse, error)
	ValidateAlert(context.Context, *ValidateAlertRequest) (*ValidateAlertResponse, error)
	GetAlertEventsCountBySeverity(context.Context, *GetAlertEventsCountBySeverityRequest) (*GetAlertEventsCountBySeverityResponse, error)
	mustEmbedUnimplementedAlertServiceServer()
}

// UnimplementedAlertServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAlertServiceServer struct {
}

func (UnimplementedAlertServiceServer) GetAlert(context.Context, *GetAlertRequest) (*GetAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlert not implemented")
}
func (UnimplementedAlertServiceServer) GetAlerts(context.Context, *GetAlertsRequest) (*GetAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlerts not implemented")
}
func (UnimplementedAlertServiceServer) GetAlertByUniqueId(context.Context, *GetAlertByUniqueIdRequest) (*GetAlertByUniqueIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertByUniqueId not implemented")
}
func (UnimplementedAlertServiceServer) GetAlertModelMapping(context.Context, *GetAlertModelMappingRequest) (*GetAlertModelMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertModelMapping not implemented")
}
func (UnimplementedAlertServiceServer) CreateAlert(context.Context, *CreateAlertRequest) (*CreateAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlert not implemented")
}
func (UnimplementedAlertServiceServer) UpdateAlert(context.Context, *UpdateAlertRequest) (*UpdateAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlert not implemented")
}
func (UnimplementedAlertServiceServer) UpdateAlertByUniqueId(context.Context, *UpdateAlertByUniqueIdRequest) (*UpdateAlertByUniqueIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlertByUniqueId not implemented")
}
func (UnimplementedAlertServiceServer) DeleteAlert(context.Context, *DeleteAlertRequest) (*DeleteAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlert not implemented")
}
func (UnimplementedAlertServiceServer) DeleteAlertByUniqueId(context.Context, *DeleteAlertByUniqueIdRequest) (*DeleteAlertByUniqueIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlertByUniqueId not implemented")
}
func (UnimplementedAlertServiceServer) GetAlertEvents(context.Context, *GetAlertEventsRequest) (*GetAlertEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertEvents not implemented")
}
func (UnimplementedAlertServiceServer) ValidateAlert(context.Context, *ValidateAlertRequest) (*ValidateAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAlert not implemented")
}
func (UnimplementedAlertServiceServer) GetAlertEventsCountBySeverity(context.Context, *GetAlertEventsCountBySeverityRequest) (*GetAlertEventsCountBySeverityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertEventsCountBySeverity not implemented")
}
func (UnimplementedAlertServiceServer) mustEmbedUnimplementedAlertServiceServer() {}

// UnsafeAlertServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertServiceServer will
// result in compilation errors.
type UnsafeAlertServiceServer interface {
	mustEmbedUnimplementedAlertServiceServer()
}

func RegisterAlertServiceServer(s grpc.ServiceRegistrar, srv AlertServiceServer) {
	s.RegisterService(&AlertService_ServiceDesc, srv)
}

func _AlertService_GetAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).GetAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.alerts.v1.AlertService/GetAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).GetAlert(ctx, req.(*GetAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_GetAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).GetAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.alerts.v1.AlertService/GetAlerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).GetAlerts(ctx, req.(*GetAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_GetAlertByUniqueId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlertByUniqueIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).GetAlertByUniqueId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.alerts.v1.AlertService/GetAlertByUniqueId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).GetAlertByUniqueId(ctx, req.(*GetAlertByUniqueIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_GetAlertModelMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlertModelMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).GetAlertModelMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.alerts.v1.AlertService/GetAlertModelMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).GetAlertModelMapping(ctx, req.(*GetAlertModelMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_CreateAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).CreateAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.alerts.v1.AlertService/CreateAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).CreateAlert(ctx, req.(*CreateAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_UpdateAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).UpdateAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.alerts.v1.AlertService/UpdateAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).UpdateAlert(ctx, req.(*UpdateAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_UpdateAlertByUniqueId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlertByUniqueIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).UpdateAlertByUniqueId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.alerts.v1.AlertService/UpdateAlertByUniqueId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).UpdateAlertByUniqueId(ctx, req.(*UpdateAlertByUniqueIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_DeleteAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).DeleteAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.alerts.v1.AlertService/DeleteAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).DeleteAlert(ctx, req.(*DeleteAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_DeleteAlertByUniqueId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlertByUniqueIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).DeleteAlertByUniqueId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.alerts.v1.AlertService/DeleteAlertByUniqueId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).DeleteAlertByUniqueId(ctx, req.(*DeleteAlertByUniqueIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_GetAlertEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlertEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).GetAlertEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.alerts.v1.AlertService/GetAlertEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).GetAlertEvents(ctx, req.(*GetAlertEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_ValidateAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).ValidateAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.alerts.v1.AlertService/ValidateAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).ValidateAlert(ctx, req.(*ValidateAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_GetAlertEventsCountBySeverity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlertEventsCountBySeverityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).GetAlertEventsCountBySeverity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.alerts.v1.AlertService/GetAlertEventsCountBySeverity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).GetAlertEventsCountBySeverity(ctx, req.(*GetAlertEventsCountBySeverityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlertService_ServiceDesc is the grpc.ServiceDesc for AlertService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlertService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.alerts.v1.AlertService",
	HandlerType: (*AlertServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAlert",
			Handler:    _AlertService_GetAlert_Handler,
		},
		{
			MethodName: "GetAlerts",
			Handler:    _AlertService_GetAlerts_Handler,
		},
		{
			MethodName: "GetAlertByUniqueId",
			Handler:    _AlertService_GetAlertByUniqueId_Handler,
		},
		{
			MethodName: "GetAlertModelMapping",
			Handler:    _AlertService_GetAlertModelMapping_Handler,
		},
		{
			MethodName: "CreateAlert",
			Handler:    _AlertService_CreateAlert_Handler,
		},
		{
			MethodName: "UpdateAlert",
			Handler:    _AlertService_UpdateAlert_Handler,
		},
		{
			MethodName: "UpdateAlertByUniqueId",
			Handler:    _AlertService_UpdateAlertByUniqueId_Handler,
		},
		{
			MethodName: "DeleteAlert",
			Handler:    _AlertService_DeleteAlert_Handler,
		},
		{
			MethodName: "DeleteAlertByUniqueId",
			Handler:    _AlertService_DeleteAlertByUniqueId_Handler,
		},
		{
			MethodName: "GetAlertEvents",
			Handler:    _AlertService_GetAlertEvents_Handler,
		},
		{
			MethodName: "ValidateAlert",
			Handler:    _AlertService_ValidateAlert_Handler,
		},
		{
			MethodName: "GetAlertEventsCountBySeverity",
			Handler:    _AlertService_GetAlertEventsCountBySeverity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/alerts/v1/alert_service.proto",
}
