// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: com/coralogixapis/alerts/v3/alert_def.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// Represents An Existing or Created Alert Definition
type AlertDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertDefProperties *AlertDefProperties     `protobuf:"bytes,1,opt,name=alert_def_properties,json=alertDefProperties,proto3" json:"alert_def_properties,omitempty"`
	Id                 *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"` // This is the Alert Definition's Persistent ID (does not change on replace) , AKA UniqueIdentifier
	CreatedTime        *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	UpdatedTime        *timestamppb.Timestamp  `protobuf:"bytes,4,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
}

func (x *AlertDef) Reset() {
	*x = AlertDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_alerts_v3_alert_def_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertDef) ProtoMessage() {}

func (x *AlertDef) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_alerts_v3_alert_def_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertDef.ProtoReflect.Descriptor instead.
func (*AlertDef) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_alerts_v3_alert_def_proto_rawDescGZIP(), []int{0}
}

func (x *AlertDef) GetAlertDefProperties() *AlertDefProperties {
	if x != nil {
		return x.AlertDefProperties
	}
	return nil
}

func (x *AlertDef) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AlertDef) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *AlertDef) GetUpdatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedTime
	}
	return nil
}

//*
// Represents The non generated alert definition properties (the ones that are set by the user)
type AlertDefProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Enabled     *wrapperspb.BoolValue   `protobuf:"bytes,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Priority    AlertDefPriority        `protobuf:"varint,4,opt,name=priority,proto3,enum=com.coralogixapis.alerts.v3.AlertDefPriority" json:"priority,omitempty"`
	// Types that are assignable to Schedule:
	//	*AlertDefProperties_ActiveOn
	Schedule     isAlertDefProperties_Schedule `protobuf_oneof:"schedule"`
	AlertDefType AlertDefType                  `protobuf:"varint,6,opt,name=alert_def_type,json=alertDefType,proto3,enum=com.coralogixapis.alerts.v3.AlertDefType" json:"alert_def_type,omitempty"`
	// Types that are assignable to TypeDefinition:
	//	*AlertDefProperties_LogsImmediate
	//	*AlertDefProperties_LogsMoreThan
	//	*AlertDefProperties_LogsLessThan
	//	*AlertDefProperties_LogsMoreThanUsual
	//	*AlertDefProperties_LogsRatioMoreThan
	//	*AlertDefProperties_LogsRatioLessThan
	//	*AlertDefProperties_LogsNewValue
	//	*AlertDefProperties_LogsUniqueCount
	//	*AlertDefProperties_LogsTimeRelativeMoreThan
	//	*AlertDefProperties_LogsTimeRelativeLessThan
	//	*AlertDefProperties_MetricMoreThan
	//	*AlertDefProperties_MetricLessThan
	//	*AlertDefProperties_MetricMoreThanUsual
	//	*AlertDefProperties_TracingImmediate
	//	*AlertDefProperties_TracingMoreThan
	//	*AlertDefProperties_Flow
	//	*AlertDefProperties_MetricLessThanUsual
	//	*AlertDefProperties_MetricMoreThanOrEquals
	//	*AlertDefProperties_MetricLessThanOrEquals
	TypeDefinition    isAlertDefProperties_TypeDefinition `protobuf_oneof:"type_definition"`
	GroupBy           []*wrapperspb.StringValue           `protobuf:"bytes,7,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	IncidentsSettings *AlertDefIncidentSettings           `protobuf:"bytes,8,opt,name=incidents_settings,json=incidentsSettings,proto3" json:"incidents_settings,omitempty"`
	NotificationGroup *AlertDefNotificationGroup          `protobuf:"bytes,9,opt,name=notification_group,json=notificationGroup,proto3" json:"notification_group,omitempty"`
	Labels            map[string]string                   `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AlertDefProperties) Reset() {
	*x = AlertDefProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_alerts_v3_alert_def_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertDefProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertDefProperties) ProtoMessage() {}

func (x *AlertDefProperties) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_alerts_v3_alert_def_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertDefProperties.ProtoReflect.Descriptor instead.
func (*AlertDefProperties) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_alerts_v3_alert_def_proto_rawDescGZIP(), []int{1}
}

func (x *AlertDefProperties) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *AlertDefProperties) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *AlertDefProperties) GetEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *AlertDefProperties) GetPriority() AlertDefPriority {
	if x != nil {
		return x.Priority
	}
	return AlertDefPriority_ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED
}

func (m *AlertDefProperties) GetSchedule() isAlertDefProperties_Schedule {
	if m != nil {
		return m.Schedule
	}
	return nil
}

func (x *AlertDefProperties) GetActiveOn() *ActivitySchedule {
	if x, ok := x.GetSchedule().(*AlertDefProperties_ActiveOn); ok {
		return x.ActiveOn
	}
	return nil
}

func (x *AlertDefProperties) GetAlertDefType() AlertDefType {
	if x != nil {
		return x.AlertDefType
	}
	return AlertDefType_ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED
}

func (m *AlertDefProperties) GetTypeDefinition() isAlertDefProperties_TypeDefinition {
	if m != nil {
		return m.TypeDefinition
	}
	return nil
}

func (x *AlertDefProperties) GetLogsImmediate() *LogsImmediateTypeDefinition {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_LogsImmediate); ok {
		return x.LogsImmediate
	}
	return nil
}

func (x *AlertDefProperties) GetLogsMoreThan() *LogsMoreThanTypeDefinition {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_LogsMoreThan); ok {
		return x.LogsMoreThan
	}
	return nil
}

func (x *AlertDefProperties) GetLogsLessThan() *LogsLessThanTypeDefinition {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_LogsLessThan); ok {
		return x.LogsLessThan
	}
	return nil
}

func (x *AlertDefProperties) GetLogsMoreThanUsual() *LogsMoreThanUsualTypeDefinition {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_LogsMoreThanUsual); ok {
		return x.LogsMoreThanUsual
	}
	return nil
}

func (x *AlertDefProperties) GetLogsRatioMoreThan() *LogsRatioMoreThanTypeDefinition {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_LogsRatioMoreThan); ok {
		return x.LogsRatioMoreThan
	}
	return nil
}

func (x *AlertDefProperties) GetLogsRatioLessThan() *LogsRatioLessThanTypeDefinition {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_LogsRatioLessThan); ok {
		return x.LogsRatioLessThan
	}
	return nil
}

func (x *AlertDefProperties) GetLogsNewValue() *LogsNewValueTypeDefinition {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_LogsNewValue); ok {
		return x.LogsNewValue
	}
	return nil
}

func (x *AlertDefProperties) GetLogsUniqueCount() *LogsUniqueCountTypeDefinition {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_LogsUniqueCount); ok {
		return x.LogsUniqueCount
	}
	return nil
}

func (x *AlertDefProperties) GetLogsTimeRelativeMoreThan() *LogsTimeRelativeMoreThanTypeDefinition {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_LogsTimeRelativeMoreThan); ok {
		return x.LogsTimeRelativeMoreThan
	}
	return nil
}

func (x *AlertDefProperties) GetLogsTimeRelativeLessThan() *LogsTimeRelativeLessThanTypeDefinition {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_LogsTimeRelativeLessThan); ok {
		return x.LogsTimeRelativeLessThan
	}
	return nil
}

func (x *AlertDefProperties) GetMetricMoreThan() *MetricMoreThanTypeDefinition {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_MetricMoreThan); ok {
		return x.MetricMoreThan
	}
	return nil
}

func (x *AlertDefProperties) GetMetricLessThan() *MetricLessThanTypeDefinition {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_MetricLessThan); ok {
		return x.MetricLessThan
	}
	return nil
}

func (x *AlertDefProperties) GetMetricMoreThanUsual() *MetricMoreThanUsualTypeDefinition {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_MetricMoreThanUsual); ok {
		return x.MetricMoreThanUsual
	}
	return nil
}

func (x *AlertDefProperties) GetTracingImmediate() *TracingImmediateTypeDefinition {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_TracingImmediate); ok {
		return x.TracingImmediate
	}
	return nil
}

func (x *AlertDefProperties) GetTracingMoreThan() *TracingMoreThanTypeDefinition {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_TracingMoreThan); ok {
		return x.TracingMoreThan
	}
	return nil
}

func (x *AlertDefProperties) GetFlow() *FlowTypeDefinition {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_Flow); ok {
		return x.Flow
	}
	return nil
}

func (x *AlertDefProperties) GetMetricLessThanUsual() *MetricLessThanUsualTypeDefinition {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_MetricLessThanUsual); ok {
		return x.MetricLessThanUsual
	}
	return nil
}

func (x *AlertDefProperties) GetMetricMoreThanOrEquals() *MetricMoreThanOrEqualsTypeDefinition {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_MetricMoreThanOrEquals); ok {
		return x.MetricMoreThanOrEquals
	}
	return nil
}

func (x *AlertDefProperties) GetMetricLessThanOrEquals() *MetricLessThanOrEqualsTypeDefinition {
	if x, ok := x.GetTypeDefinition().(*AlertDefProperties_MetricLessThanOrEquals); ok {
		return x.MetricLessThanOrEquals
	}
	return nil
}

func (x *AlertDefProperties) GetGroupBy() []*wrapperspb.StringValue {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *AlertDefProperties) GetIncidentsSettings() *AlertDefIncidentSettings {
	if x != nil {
		return x.IncidentsSettings
	}
	return nil
}

func (x *AlertDefProperties) GetNotificationGroup() *AlertDefNotificationGroup {
	if x != nil {
		return x.NotificationGroup
	}
	return nil
}

func (x *AlertDefProperties) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type isAlertDefProperties_Schedule interface {
	isAlertDefProperties_Schedule()
}

type AlertDefProperties_ActiveOn struct {
	ActiveOn *ActivitySchedule `protobuf:"bytes,5,opt,name=active_on,json=activeOn,proto3,oneof"`
}

func (*AlertDefProperties_ActiveOn) isAlertDefProperties_Schedule() {}

type isAlertDefProperties_TypeDefinition interface {
	isAlertDefProperties_TypeDefinition()
}

type AlertDefProperties_LogsImmediate struct {
	LogsImmediate *LogsImmediateTypeDefinition `protobuf:"bytes,100,opt,name=logs_immediate,json=logsImmediate,proto3,oneof"`
}

type AlertDefProperties_LogsMoreThan struct {
	LogsMoreThan *LogsMoreThanTypeDefinition `protobuf:"bytes,101,opt,name=logs_more_than,json=logsMoreThan,proto3,oneof"`
}

type AlertDefProperties_LogsLessThan struct {
	LogsLessThan *LogsLessThanTypeDefinition `protobuf:"bytes,102,opt,name=logs_less_than,json=logsLessThan,proto3,oneof"`
}

type AlertDefProperties_LogsMoreThanUsual struct {
	LogsMoreThanUsual *LogsMoreThanUsualTypeDefinition `protobuf:"bytes,103,opt,name=logs_more_than_usual,json=logsMoreThanUsual,proto3,oneof"`
}

type AlertDefProperties_LogsRatioMoreThan struct {
	LogsRatioMoreThan *LogsRatioMoreThanTypeDefinition `protobuf:"bytes,104,opt,name=logs_ratio_more_than,json=logsRatioMoreThan,proto3,oneof"`
}

type AlertDefProperties_LogsRatioLessThan struct {
	LogsRatioLessThan *LogsRatioLessThanTypeDefinition `protobuf:"bytes,105,opt,name=logs_ratio_less_than,json=logsRatioLessThan,proto3,oneof"`
}

type AlertDefProperties_LogsNewValue struct {
	LogsNewValue *LogsNewValueTypeDefinition `protobuf:"bytes,106,opt,name=logs_new_value,json=logsNewValue,proto3,oneof"`
}

type AlertDefProperties_LogsUniqueCount struct {
	LogsUniqueCount *LogsUniqueCountTypeDefinition `protobuf:"bytes,107,opt,name=logs_unique_count,json=logsUniqueCount,proto3,oneof"`
}

type AlertDefProperties_LogsTimeRelativeMoreThan struct {
	LogsTimeRelativeMoreThan *LogsTimeRelativeMoreThanTypeDefinition `protobuf:"bytes,108,opt,name=logs_time_relative_more_than,json=logsTimeRelativeMoreThan,proto3,oneof"`
}

type AlertDefProperties_LogsTimeRelativeLessThan struct {
	LogsTimeRelativeLessThan *LogsTimeRelativeLessThanTypeDefinition `protobuf:"bytes,109,opt,name=logs_time_relative_less_than,json=logsTimeRelativeLessThan,proto3,oneof"`
}

type AlertDefProperties_MetricMoreThan struct {
	MetricMoreThan *MetricMoreThanTypeDefinition `protobuf:"bytes,112,opt,name=metric_more_than,json=metricMoreThan,proto3,oneof"`
}

type AlertDefProperties_MetricLessThan struct {
	MetricLessThan *MetricLessThanTypeDefinition `protobuf:"bytes,113,opt,name=metric_less_than,json=metricLessThan,proto3,oneof"`
}

type AlertDefProperties_MetricMoreThanUsual struct {
	MetricMoreThanUsual *MetricMoreThanUsualTypeDefinition `protobuf:"bytes,114,opt,name=metric_more_than_usual,json=metricMoreThanUsual,proto3,oneof"`
}

type AlertDefProperties_TracingImmediate struct {
	TracingImmediate *TracingImmediateTypeDefinition `protobuf:"bytes,115,opt,name=tracing_immediate,json=tracingImmediate,proto3,oneof"`
}

type AlertDefProperties_TracingMoreThan struct {
	TracingMoreThan *TracingMoreThanTypeDefinition `protobuf:"bytes,116,opt,name=tracing_more_than,json=tracingMoreThan,proto3,oneof"`
}

type AlertDefProperties_Flow struct {
	Flow *FlowTypeDefinition `protobuf:"bytes,117,opt,name=flow,proto3,oneof"`
}

type AlertDefProperties_MetricLessThanUsual struct {
	MetricLessThanUsual *MetricLessThanUsualTypeDefinition `protobuf:"bytes,118,opt,name=metric_less_than_usual,json=metricLessThanUsual,proto3,oneof"`
}

type AlertDefProperties_MetricMoreThanOrEquals struct {
	MetricMoreThanOrEquals *MetricMoreThanOrEqualsTypeDefinition `protobuf:"bytes,119,opt,name=metric_more_than_or_equals,json=metricMoreThanOrEquals,proto3,oneof"`
}

type AlertDefProperties_MetricLessThanOrEquals struct {
	MetricLessThanOrEquals *MetricLessThanOrEqualsTypeDefinition `protobuf:"bytes,120,opt,name=metric_less_than_or_equals,json=metricLessThanOrEquals,proto3,oneof"`
}

func (*AlertDefProperties_LogsImmediate) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_LogsMoreThan) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_LogsLessThan) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_LogsMoreThanUsual) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_LogsRatioMoreThan) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_LogsRatioLessThan) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_LogsNewValue) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_LogsUniqueCount) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_LogsTimeRelativeMoreThan) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_LogsTimeRelativeLessThan) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_MetricMoreThan) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_MetricLessThan) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_MetricMoreThanUsual) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_TracingImmediate) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_TracingMoreThan) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_Flow) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_MetricLessThanUsual) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_MetricMoreThanOrEquals) isAlertDefProperties_TypeDefinition() {}

func (*AlertDefProperties_MetricLessThanOrEquals) isAlertDefProperties_TypeDefinition() {}

var File_com_coralogixapis_alerts_v3_alert_def_proto protoreflect.FileDescriptor

var file_com_coralogixapis_alerts_v3_alert_def_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64,
	0x65, 0x66, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x3e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33,
	0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x63, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33,
	0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x63, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x6d, 0x6f,
	0x72, 0x65, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x63, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x2f, 0x6c, 0x6f,
	0x67, 0x73, 0x5f, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x69, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x61,
	0x6e, 0x5f, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x66, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x5f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x66, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f,
	0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x6c, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x64, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2f, 0x6c,
	0x6f, 0x67, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x65, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33,
	0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x76, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65,
	0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2f,
	0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x76, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x68, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x66, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65,
	0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x5f, 0x65, 0x71, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x66, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x61,
	0x6e, 0x5f, 0x65, 0x71, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x63, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65,
	0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x63, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x69, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76,
	0x33, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x74,
	0x68, 0x61, 0x6e, 0x5f, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x69, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x5f, 0x75,
	0x73, 0x75, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x65, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65,
	0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x65, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x2f, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68,
	0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x55, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x30, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x34, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x99, 0x02, 0x0a, 0x08, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x44, 0x65, 0x66, 0x12, 0x61, 0x0a, 0x14, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65,
	0x66, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33,
	0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x12, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x66, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x89, 0x17, 0x0a, 0x12, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x66,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x49, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e,
	0x76, 0x33, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x66, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x4c, 0x0a,
	0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76,
	0x33, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x61, 0x0a, 0x0e,
	0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e,
	0x76, 0x33, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01,
	0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x73, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x12,
	0x5f, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x61,
	0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x54, 0x68,
	0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x01, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x61, 0x6e,
	0x12, 0x5f, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x68,
	0x61, 0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x4c, 0x65, 0x73, 0x73, 0x54,
	0x68, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x01, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x73, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61,
	0x6e, 0x12, 0x6f, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x74,
	0x68, 0x61, 0x6e, 0x5f, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x6f,
	0x67, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x61, 0x6e, 0x55, 0x73, 0x75, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52,
	0x11, 0x6c, 0x6f, 0x67, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x61, 0x6e, 0x55, 0x73, 0x75,
	0x61, 0x6c, 0x12, 0x6f, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x4c,
	0x6f, 0x67, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4d, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x61, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01,
	0x52, 0x11, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4d, 0x6f, 0x72, 0x65, 0x54,
	0x68, 0x61, 0x6e, 0x12, 0x6f, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x5f, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x18, 0x69, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e,
	0x4c, 0x6f, 0x67, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x01, 0x52, 0x11, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4c, 0x65, 0x73, 0x73,
	0x54, 0x68, 0x61, 0x6e, 0x12, 0x5f, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x6e, 0x65, 0x77,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x4e,
	0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x73, 0x4e, 0x65, 0x77,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x68, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x4c,
	0x6f, 0x67, 0x73, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0f,
	0x6c, 0x6f, 0x67, 0x73, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x85, 0x01, 0x0a, 0x1c, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x61, 0x6e,
	0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x61, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x18, 0x6c,
	0x6f, 0x67, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d,
	0x6f, 0x72, 0x65, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x85, 0x01, 0x0a, 0x1c, 0x6c, 0x6f, 0x67, 0x73,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x6f, 0x67,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x73,
	0x73, 0x54, 0x68, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x18, 0x6c, 0x6f, 0x67, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x12,
	0x65, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x74,
	0x68, 0x61, 0x6e, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x6f,
	0x72, 0x65, 0x54, 0x68, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x6f,
	0x72, 0x65, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x65, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0e, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x75, 0x0a,
	0x16, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x61,
	0x6e, 0x5f, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4d, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x61, 0x6e, 0x55, 0x73, 0x75, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52,
	0x13, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x61, 0x6e, 0x55,
	0x73, 0x75, 0x61, 0x6c, 0x12, 0x6a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x10,
	0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65,
	0x12, 0x68, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x72, 0x65,
	0x5f, 0x74, 0x68, 0x61, 0x6e, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x45, 0x0a, 0x04, 0x66, 0x6c,
	0x6f, 0x77, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x04, 0x66, 0x6c, 0x6f,
	0x77, 0x12, 0x75, 0x0a, 0x16, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6c, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x68, 0x61, 0x6e, 0x5f, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x18, 0x76, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x55, 0x73,
	0x75, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x01, 0x52, 0x13, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x65, 0x73, 0x73, 0x54,
	0x68, 0x61, 0x6e, 0x55, 0x73, 0x75, 0x61, 0x6c, 0x12, 0x7f, 0x0a, 0x1a, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x5f, 0x6f, 0x72, 0x5f,
	0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x4d, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x61, 0x6e, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x01, 0x52, 0x16, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x61,
	0x6e, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x7f, 0x0a, 0x1a, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x5f, 0x6f, 0x72,
	0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61,
	0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x01, 0x52, 0x16, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68,
	0x61, 0x6e, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x12, 0x64, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x44, 0x65, 0x66, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x65, 0x0a, 0x12, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73,
	0x2e, 0x76, 0x33, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x66, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x11, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x53, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x11, 0x0a, 0x0f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogixapis_alerts_v3_alert_def_proto_rawDescOnce sync.Once
	file_com_coralogixapis_alerts_v3_alert_def_proto_rawDescData = file_com_coralogixapis_alerts_v3_alert_def_proto_rawDesc
)

func file_com_coralogixapis_alerts_v3_alert_def_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_alerts_v3_alert_def_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_alerts_v3_alert_def_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_alerts_v3_alert_def_proto_rawDescData)
	})
	return file_com_coralogixapis_alerts_v3_alert_def_proto_rawDescData
}

var file_com_coralogixapis_alerts_v3_alert_def_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_com_coralogixapis_alerts_v3_alert_def_proto_goTypes = []interface{}{
	(*AlertDef)(nil),                               // 0: com.coralogixapis.alerts.v3.AlertDef
	(*AlertDefProperties)(nil),                     // 1: com.coralogixapis.alerts.v3.AlertDefProperties
	nil,                                            // 2: com.coralogixapis.alerts.v3.AlertDefProperties.LabelsEntry
	(*wrapperspb.StringValue)(nil),                 // 3: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),                  // 4: google.protobuf.Timestamp
	(*wrapperspb.BoolValue)(nil),                   // 5: google.protobuf.BoolValue
	(AlertDefPriority)(0),                          // 6: com.coralogixapis.alerts.v3.AlertDefPriority
	(*ActivitySchedule)(nil),                       // 7: com.coralogixapis.alerts.v3.ActivitySchedule
	(AlertDefType)(0),                              // 8: com.coralogixapis.alerts.v3.AlertDefType
	(*LogsImmediateTypeDefinition)(nil),            // 9: com.coralogixapis.alerts.v3.LogsImmediateTypeDefinition
	(*LogsMoreThanTypeDefinition)(nil),             // 10: com.coralogixapis.alerts.v3.LogsMoreThanTypeDefinition
	(*LogsLessThanTypeDefinition)(nil),             // 11: com.coralogixapis.alerts.v3.LogsLessThanTypeDefinition
	(*LogsMoreThanUsualTypeDefinition)(nil),        // 12: com.coralogixapis.alerts.v3.LogsMoreThanUsualTypeDefinition
	(*LogsRatioMoreThanTypeDefinition)(nil),        // 13: com.coralogixapis.alerts.v3.LogsRatioMoreThanTypeDefinition
	(*LogsRatioLessThanTypeDefinition)(nil),        // 14: com.coralogixapis.alerts.v3.LogsRatioLessThanTypeDefinition
	(*LogsNewValueTypeDefinition)(nil),             // 15: com.coralogixapis.alerts.v3.LogsNewValueTypeDefinition
	(*LogsUniqueCountTypeDefinition)(nil),          // 16: com.coralogixapis.alerts.v3.LogsUniqueCountTypeDefinition
	(*LogsTimeRelativeMoreThanTypeDefinition)(nil), // 17: com.coralogixapis.alerts.v3.LogsTimeRelativeMoreThanTypeDefinition
	(*LogsTimeRelativeLessThanTypeDefinition)(nil), // 18: com.coralogixapis.alerts.v3.LogsTimeRelativeLessThanTypeDefinition
	(*MetricMoreThanTypeDefinition)(nil),           // 19: com.coralogixapis.alerts.v3.MetricMoreThanTypeDefinition
	(*MetricLessThanTypeDefinition)(nil),           // 20: com.coralogixapis.alerts.v3.MetricLessThanTypeDefinition
	(*MetricMoreThanUsualTypeDefinition)(nil),      // 21: com.coralogixapis.alerts.v3.MetricMoreThanUsualTypeDefinition
	(*TracingImmediateTypeDefinition)(nil),         // 22: com.coralogixapis.alerts.v3.TracingImmediateTypeDefinition
	(*TracingMoreThanTypeDefinition)(nil),          // 23: com.coralogixapis.alerts.v3.TracingMoreThanTypeDefinition
	(*FlowTypeDefinition)(nil),                     // 24: com.coralogixapis.alerts.v3.FlowTypeDefinition
	(*MetricLessThanUsualTypeDefinition)(nil),      // 25: com.coralogixapis.alerts.v3.MetricLessThanUsualTypeDefinition
	(*MetricMoreThanOrEqualsTypeDefinition)(nil),   // 26: com.coralogixapis.alerts.v3.MetricMoreThanOrEqualsTypeDefinition
	(*MetricLessThanOrEqualsTypeDefinition)(nil),   // 27: com.coralogixapis.alerts.v3.MetricLessThanOrEqualsTypeDefinition
	(*AlertDefIncidentSettings)(nil),               // 28: com.coralogixapis.alerts.v3.AlertDefIncidentSettings
	(*AlertDefNotificationGroup)(nil),              // 29: com.coralogixapis.alerts.v3.AlertDefNotificationGroup
}
var file_com_coralogixapis_alerts_v3_alert_def_proto_depIdxs = []int32{
	1,  // 0: com.coralogixapis.alerts.v3.AlertDef.alert_def_properties:type_name -> com.coralogixapis.alerts.v3.AlertDefProperties
	3,  // 1: com.coralogixapis.alerts.v3.AlertDef.id:type_name -> google.protobuf.StringValue
	4,  // 2: com.coralogixapis.alerts.v3.AlertDef.created_time:type_name -> google.protobuf.Timestamp
	4,  // 3: com.coralogixapis.alerts.v3.AlertDef.updated_time:type_name -> google.protobuf.Timestamp
	3,  // 4: com.coralogixapis.alerts.v3.AlertDefProperties.name:type_name -> google.protobuf.StringValue
	3,  // 5: com.coralogixapis.alerts.v3.AlertDefProperties.description:type_name -> google.protobuf.StringValue
	5,  // 6: com.coralogixapis.alerts.v3.AlertDefProperties.enabled:type_name -> google.protobuf.BoolValue
	6,  // 7: com.coralogixapis.alerts.v3.AlertDefProperties.priority:type_name -> com.coralogixapis.alerts.v3.AlertDefPriority
	7,  // 8: com.coralogixapis.alerts.v3.AlertDefProperties.active_on:type_name -> com.coralogixapis.alerts.v3.ActivitySchedule
	8,  // 9: com.coralogixapis.alerts.v3.AlertDefProperties.alert_def_type:type_name -> com.coralogixapis.alerts.v3.AlertDefType
	9,  // 10: com.coralogixapis.alerts.v3.AlertDefProperties.logs_immediate:type_name -> com.coralogixapis.alerts.v3.LogsImmediateTypeDefinition
	10, // 11: com.coralogixapis.alerts.v3.AlertDefProperties.logs_more_than:type_name -> com.coralogixapis.alerts.v3.LogsMoreThanTypeDefinition
	11, // 12: com.coralogixapis.alerts.v3.AlertDefProperties.logs_less_than:type_name -> com.coralogixapis.alerts.v3.LogsLessThanTypeDefinition
	12, // 13: com.coralogixapis.alerts.v3.AlertDefProperties.logs_more_than_usual:type_name -> com.coralogixapis.alerts.v3.LogsMoreThanUsualTypeDefinition
	13, // 14: com.coralogixapis.alerts.v3.AlertDefProperties.logs_ratio_more_than:type_name -> com.coralogixapis.alerts.v3.LogsRatioMoreThanTypeDefinition
	14, // 15: com.coralogixapis.alerts.v3.AlertDefProperties.logs_ratio_less_than:type_name -> com.coralogixapis.alerts.v3.LogsRatioLessThanTypeDefinition
	15, // 16: com.coralogixapis.alerts.v3.AlertDefProperties.logs_new_value:type_name -> com.coralogixapis.alerts.v3.LogsNewValueTypeDefinition
	16, // 17: com.coralogixapis.alerts.v3.AlertDefProperties.logs_unique_count:type_name -> com.coralogixapis.alerts.v3.LogsUniqueCountTypeDefinition
	17, // 18: com.coralogixapis.alerts.v3.AlertDefProperties.logs_time_relative_more_than:type_name -> com.coralogixapis.alerts.v3.LogsTimeRelativeMoreThanTypeDefinition
	18, // 19: com.coralogixapis.alerts.v3.AlertDefProperties.logs_time_relative_less_than:type_name -> com.coralogixapis.alerts.v3.LogsTimeRelativeLessThanTypeDefinition
	19, // 20: com.coralogixapis.alerts.v3.AlertDefProperties.metric_more_than:type_name -> com.coralogixapis.alerts.v3.MetricMoreThanTypeDefinition
	20, // 21: com.coralogixapis.alerts.v3.AlertDefProperties.metric_less_than:type_name -> com.coralogixapis.alerts.v3.MetricLessThanTypeDefinition
	21, // 22: com.coralogixapis.alerts.v3.AlertDefProperties.metric_more_than_usual:type_name -> com.coralogixapis.alerts.v3.MetricMoreThanUsualTypeDefinition
	22, // 23: com.coralogixapis.alerts.v3.AlertDefProperties.tracing_immediate:type_name -> com.coralogixapis.alerts.v3.TracingImmediateTypeDefinition
	23, // 24: com.coralogixapis.alerts.v3.AlertDefProperties.tracing_more_than:type_name -> com.coralogixapis.alerts.v3.TracingMoreThanTypeDefinition
	24, // 25: com.coralogixapis.alerts.v3.AlertDefProperties.flow:type_name -> com.coralogixapis.alerts.v3.FlowTypeDefinition
	25, // 26: com.coralogixapis.alerts.v3.AlertDefProperties.metric_less_than_usual:type_name -> com.coralogixapis.alerts.v3.MetricLessThanUsualTypeDefinition
	26, // 27: com.coralogixapis.alerts.v3.AlertDefProperties.metric_more_than_or_equals:type_name -> com.coralogixapis.alerts.v3.MetricMoreThanOrEqualsTypeDefinition
	27, // 28: com.coralogixapis.alerts.v3.AlertDefProperties.metric_less_than_or_equals:type_name -> com.coralogixapis.alerts.v3.MetricLessThanOrEqualsTypeDefinition
	3,  // 29: com.coralogixapis.alerts.v3.AlertDefProperties.group_by:type_name -> google.protobuf.StringValue
	28, // 30: com.coralogixapis.alerts.v3.AlertDefProperties.incidents_settings:type_name -> com.coralogixapis.alerts.v3.AlertDefIncidentSettings
	29, // 31: com.coralogixapis.alerts.v3.AlertDefProperties.notification_group:type_name -> com.coralogixapis.alerts.v3.AlertDefNotificationGroup
	2,  // 32: com.coralogixapis.alerts.v3.AlertDefProperties.labels:type_name -> com.coralogixapis.alerts.v3.AlertDefProperties.LabelsEntry
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_alerts_v3_alert_def_proto_init() }
func file_com_coralogixapis_alerts_v3_alert_def_proto_init() {
	if File_com_coralogixapis_alerts_v3_alert_def_proto != nil {
		return
	}
	file_com_coralogixapis_alerts_v3_alert_def_scheduling_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_notification_group_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_standard_logs_immediate_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_standard_logs_more_than_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_standard_logs_less_than_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_standard_logs_more_than_usual_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_ratio_logs_ratio_more_than_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_ratio_logs_ratio_less_than_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_new_value_logs_new_value_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_unique_count_unique_count_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_time_relative_logs_time_relative_more_than_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_time_relative_logs_time_relative_less_than_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_metric_metric_more_than_eq_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_metric_metric_less_than_eq_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_metric_metric_less_than_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_metric_metric_more_than_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_metric_metric_more_than_usual_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_metric_metric_less_than_usual_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_tracing_tracing_immediate_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_tracing_tracing_more_than_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_definition_flow_flow_type_definition_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_type_proto_init()
	file_com_coralogixapis_alerts_v3_alert_def_priority_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_com_coralogixapis_alerts_v3_alert_def_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_alerts_v3_alert_def_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertDefProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_com_coralogixapis_alerts_v3_alert_def_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*AlertDefProperties_ActiveOn)(nil),
		(*AlertDefProperties_LogsImmediate)(nil),
		(*AlertDefProperties_LogsMoreThan)(nil),
		(*AlertDefProperties_LogsLessThan)(nil),
		(*AlertDefProperties_LogsMoreThanUsual)(nil),
		(*AlertDefProperties_LogsRatioMoreThan)(nil),
		(*AlertDefProperties_LogsRatioLessThan)(nil),
		(*AlertDefProperties_LogsNewValue)(nil),
		(*AlertDefProperties_LogsUniqueCount)(nil),
		(*AlertDefProperties_LogsTimeRelativeMoreThan)(nil),
		(*AlertDefProperties_LogsTimeRelativeLessThan)(nil),
		(*AlertDefProperties_MetricMoreThan)(nil),
		(*AlertDefProperties_MetricLessThan)(nil),
		(*AlertDefProperties_MetricMoreThanUsual)(nil),
		(*AlertDefProperties_TracingImmediate)(nil),
		(*AlertDefProperties_TracingMoreThan)(nil),
		(*AlertDefProperties_Flow)(nil),
		(*AlertDefProperties_MetricLessThanUsual)(nil),
		(*AlertDefProperties_MetricMoreThanOrEquals)(nil),
		(*AlertDefProperties_MetricLessThanOrEquals)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_alerts_v3_alert_def_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogixapis_alerts_v3_alert_def_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_alerts_v3_alert_def_proto_depIdxs,
		MessageInfos:      file_com_coralogixapis_alerts_v3_alert_def_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_alerts_v3_alert_def_proto = out.File
	file_com_coralogixapis_alerts_v3_alert_def_proto_rawDesc = nil
	file_com_coralogixapis_alerts_v3_alert_def_proto_goTypes = nil
	file_com_coralogixapis_alerts_v3_alert_def_proto_depIdxs = nil
}
