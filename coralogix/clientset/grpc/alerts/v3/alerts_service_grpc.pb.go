// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: com/coralogixapis/alerts/v3/alerts_service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlertsServiceClient is the client API for AlertsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertsServiceClient interface {
	GetAlert(ctx context.Context, in *GetAlertRequest, opts ...grpc.CallOption) (*GetAlertResponse, error)
	CreateAlert(ctx context.Context, in *CreateAlertRequest, opts ...grpc.CallOption) (*CreateAlertResponse, error)
	ReplaceAlert(ctx context.Context, in *ReplaceAlertRequest, opts ...grpc.CallOption) (*ReplaceAlertResponse, error)
	BatchGetAlert(ctx context.Context, in *BatchGetAlertRequest, opts ...grpc.CallOption) (*BatchGetAlertResponse, error)
	ListAlerts(ctx context.Context, in *ListAlertsRequest, opts ...grpc.CallOption) (*ListAlertsResponse, error)
	DeleteAlert(ctx context.Context, in *DeleteAlertRequest, opts ...grpc.CallOption) (*DeleteAlertResponse, error)
	AtomicBatchExecuteAlert(ctx context.Context, in *AtomicBatchExecuteAlertRequest, opts ...grpc.CallOption) (*AtomicBatchExecuteAlertResponse, error)
	GetLimits(ctx context.Context, in *GetLimitsRequest, opts ...grpc.CallOption) (*GetLimitsResponse, error)
	ValidateAlert(ctx context.Context, in *ValidateAlertRequest, opts ...grpc.CallOption) (*ValidateAlertResponse, error)
	SetActive(ctx context.Context, in *SetActiveRequest, opts ...grpc.CallOption) (*SetActiveResponse, error)
}

type alertsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertsServiceClient(cc grpc.ClientConnInterface) AlertsServiceClient {
	return &alertsServiceClient{cc}
}

func (c *alertsServiceClient) GetAlert(ctx context.Context, in *GetAlertRequest, opts ...grpc.CallOption) (*GetAlertResponse, error) {
	out := new(GetAlertResponse)
	err := c.cc.Invoke(ctx, "/com.coralogixapis.alerts.v3.AlertsService/GetAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertsServiceClient) CreateAlert(ctx context.Context, in *CreateAlertRequest, opts ...grpc.CallOption) (*CreateAlertResponse, error) {
	out := new(CreateAlertResponse)
	err := c.cc.Invoke(ctx, "/com.coralogixapis.alerts.v3.AlertsService/CreateAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertsServiceClient) ReplaceAlert(ctx context.Context, in *ReplaceAlertRequest, opts ...grpc.CallOption) (*ReplaceAlertResponse, error) {
	out := new(ReplaceAlertResponse)
	err := c.cc.Invoke(ctx, "/com.coralogixapis.alerts.v3.AlertsService/ReplaceAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertsServiceClient) BatchGetAlert(ctx context.Context, in *BatchGetAlertRequest, opts ...grpc.CallOption) (*BatchGetAlertResponse, error) {
	out := new(BatchGetAlertResponse)
	err := c.cc.Invoke(ctx, "/com.coralogixapis.alerts.v3.AlertsService/BatchGetAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertsServiceClient) ListAlerts(ctx context.Context, in *ListAlertsRequest, opts ...grpc.CallOption) (*ListAlertsResponse, error) {
	out := new(ListAlertsResponse)
	err := c.cc.Invoke(ctx, "/com.coralogixapis.alerts.v3.AlertsService/ListAlerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertsServiceClient) DeleteAlert(ctx context.Context, in *DeleteAlertRequest, opts ...grpc.CallOption) (*DeleteAlertResponse, error) {
	out := new(DeleteAlertResponse)
	err := c.cc.Invoke(ctx, "/com.coralogixapis.alerts.v3.AlertsService/DeleteAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertsServiceClient) AtomicBatchExecuteAlert(ctx context.Context, in *AtomicBatchExecuteAlertRequest, opts ...grpc.CallOption) (*AtomicBatchExecuteAlertResponse, error) {
	out := new(AtomicBatchExecuteAlertResponse)
	err := c.cc.Invoke(ctx, "/com.coralogixapis.alerts.v3.AlertsService/AtomicBatchExecuteAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertsServiceClient) GetLimits(ctx context.Context, in *GetLimitsRequest, opts ...grpc.CallOption) (*GetLimitsResponse, error) {
	out := new(GetLimitsResponse)
	err := c.cc.Invoke(ctx, "/com.coralogixapis.alerts.v3.AlertsService/GetLimits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertsServiceClient) ValidateAlert(ctx context.Context, in *ValidateAlertRequest, opts ...grpc.CallOption) (*ValidateAlertResponse, error) {
	out := new(ValidateAlertResponse)
	err := c.cc.Invoke(ctx, "/com.coralogixapis.alerts.v3.AlertsService/ValidateAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertsServiceClient) SetActive(ctx context.Context, in *SetActiveRequest, opts ...grpc.CallOption) (*SetActiveResponse, error) {
	out := new(SetActiveResponse)
	err := c.cc.Invoke(ctx, "/com.coralogixapis.alerts.v3.AlertsService/SetActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertsServiceServer is the server API for AlertsService service.
// All implementations must embed UnimplementedAlertsServiceServer
// for forward compatibility
type AlertsServiceServer interface {
	GetAlert(context.Context, *GetAlertRequest) (*GetAlertResponse, error)
	CreateAlert(context.Context, *CreateAlertRequest) (*CreateAlertResponse, error)
	ReplaceAlert(context.Context, *ReplaceAlertRequest) (*ReplaceAlertResponse, error)
	BatchGetAlert(context.Context, *BatchGetAlertRequest) (*BatchGetAlertResponse, error)
	ListAlerts(context.Context, *ListAlertsRequest) (*ListAlertsResponse, error)
	DeleteAlert(context.Context, *DeleteAlertRequest) (*DeleteAlertResponse, error)
	AtomicBatchExecuteAlert(context.Context, *AtomicBatchExecuteAlertRequest) (*AtomicBatchExecuteAlertResponse, error)
	GetLimits(context.Context, *GetLimitsRequest) (*GetLimitsResponse, error)
	ValidateAlert(context.Context, *ValidateAlertRequest) (*ValidateAlertResponse, error)
	SetActive(context.Context, *SetActiveRequest) (*SetActiveResponse, error)
	mustEmbedUnimplementedAlertsServiceServer()
}

// UnimplementedAlertsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAlertsServiceServer struct {
}

func (UnimplementedAlertsServiceServer) GetAlert(context.Context, *GetAlertRequest) (*GetAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlert not implemented")
}
func (UnimplementedAlertsServiceServer) CreateAlert(context.Context, *CreateAlertRequest) (*CreateAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlert not implemented")
}
func (UnimplementedAlertsServiceServer) ReplaceAlert(context.Context, *ReplaceAlertRequest) (*ReplaceAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceAlert not implemented")
}
func (UnimplementedAlertsServiceServer) BatchGetAlert(context.Context, *BatchGetAlertRequest) (*BatchGetAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetAlert not implemented")
}
func (UnimplementedAlertsServiceServer) ListAlerts(context.Context, *ListAlertsRequest) (*ListAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlerts not implemented")
}
func (UnimplementedAlertsServiceServer) DeleteAlert(context.Context, *DeleteAlertRequest) (*DeleteAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlert not implemented")
}
func (UnimplementedAlertsServiceServer) AtomicBatchExecuteAlert(context.Context, *AtomicBatchExecuteAlertRequest) (*AtomicBatchExecuteAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AtomicBatchExecuteAlert not implemented")
}
func (UnimplementedAlertsServiceServer) GetLimits(context.Context, *GetLimitsRequest) (*GetLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLimits not implemented")
}
func (UnimplementedAlertsServiceServer) ValidateAlert(context.Context, *ValidateAlertRequest) (*ValidateAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAlert not implemented")
}
func (UnimplementedAlertsServiceServer) SetActive(context.Context, *SetActiveRequest) (*SetActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActive not implemented")
}
func (UnimplementedAlertsServiceServer) mustEmbedUnimplementedAlertsServiceServer() {}

// UnsafeAlertsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertsServiceServer will
// result in compilation errors.
type UnsafeAlertsServiceServer interface {
	mustEmbedUnimplementedAlertsServiceServer()
}

func RegisterAlertsServiceServer(s grpc.ServiceRegistrar, srv AlertsServiceServer) {
	s.RegisterService(&AlertsService_ServiceDesc, srv)
}

func _AlertsService_GetAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertsServiceServer).GetAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogixapis.alerts.v3.AlertsService/GetAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertsServiceServer).GetAlert(ctx, req.(*GetAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertsService_CreateAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertsServiceServer).CreateAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogixapis.alerts.v3.AlertsService/CreateAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertsServiceServer).CreateAlert(ctx, req.(*CreateAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertsService_ReplaceAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertsServiceServer).ReplaceAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogixapis.alerts.v3.AlertsService/ReplaceAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertsServiceServer).ReplaceAlert(ctx, req.(*ReplaceAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertsService_BatchGetAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertsServiceServer).BatchGetAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogixapis.alerts.v3.AlertsService/BatchGetAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertsServiceServer).BatchGetAlert(ctx, req.(*BatchGetAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertsService_ListAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertsServiceServer).ListAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogixapis.alerts.v3.AlertsService/ListAlerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertsServiceServer).ListAlerts(ctx, req.(*ListAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertsService_DeleteAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertsServiceServer).DeleteAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogixapis.alerts.v3.AlertsService/DeleteAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertsServiceServer).DeleteAlert(ctx, req.(*DeleteAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertsService_AtomicBatchExecuteAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AtomicBatchExecuteAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertsServiceServer).AtomicBatchExecuteAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogixapis.alerts.v3.AlertsService/AtomicBatchExecuteAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertsServiceServer).AtomicBatchExecuteAlert(ctx, req.(*AtomicBatchExecuteAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertsService_GetLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertsServiceServer).GetLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogixapis.alerts.v3.AlertsService/GetLimits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertsServiceServer).GetLimits(ctx, req.(*GetLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertsService_ValidateAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertsServiceServer).ValidateAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogixapis.alerts.v3.AlertsService/ValidateAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertsServiceServer).ValidateAlert(ctx, req.(*ValidateAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertsService_SetActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertsServiceServer).SetActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogixapis.alerts.v3.AlertsService/SetActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertsServiceServer).SetActive(ctx, req.(*SetActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlertsService_ServiceDesc is the grpc.ServiceDesc for AlertsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlertsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogixapis.alerts.v3.AlertsService",
	HandlerType: (*AlertsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAlert",
			Handler:    _AlertsService_GetAlert_Handler,
		},
		{
			MethodName: "CreateAlert",
			Handler:    _AlertsService_CreateAlert_Handler,
		},
		{
			MethodName: "ReplaceAlert",
			Handler:    _AlertsService_ReplaceAlert_Handler,
		},
		{
			MethodName: "BatchGetAlert",
			Handler:    _AlertsService_BatchGetAlert_Handler,
		},
		{
			MethodName: "ListAlerts",
			Handler:    _AlertsService_ListAlerts_Handler,
		},
		{
			MethodName: "DeleteAlert",
			Handler:    _AlertsService_DeleteAlert_Handler,
		},
		{
			MethodName: "AtomicBatchExecuteAlert",
			Handler:    _AlertsService_AtomicBatchExecuteAlert_Handler,
		},
		{
			MethodName: "GetLimits",
			Handler:    _AlertsService_GetLimits_Handler,
		},
		{
			MethodName: "ValidateAlert",
			Handler:    _AlertsService_ValidateAlert_Handler,
		},
		{
			MethodName: "SetActive",
			Handler:    _AlertsService_SetActive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogixapis/alerts/v3/alerts_service.proto",
}
