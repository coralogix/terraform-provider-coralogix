// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: com/coralogix/archive/v1/retentions_service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RetentionsServiceClient is the client API for RetentionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RetentionsServiceClient interface {
	GetRetentions(ctx context.Context, in *GetRetentionsRequest, opts ...grpc.CallOption) (*GetRetentionsResponse, error)
	UpdateRetentions(ctx context.Context, in *UpdateRetentionsRequest, opts ...grpc.CallOption) (*UpdateRetentionsResponse, error)
	ActivateRetentions(ctx context.Context, in *ActivateRetentionsRequest, opts ...grpc.CallOption) (*ActivateRetentionsResponse, error)
	GetRetentionsEnabled(ctx context.Context, in *GetRetentionsEnabledRequest, opts ...grpc.CallOption) (*GetRetentionsEnabledResponse, error)
}

type retentionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRetentionsServiceClient(cc grpc.ClientConnInterface) RetentionsServiceClient {
	return &retentionsServiceClient{cc}
}

func (c *retentionsServiceClient) GetRetentions(ctx context.Context, in *GetRetentionsRequest, opts ...grpc.CallOption) (*GetRetentionsResponse, error) {
	out := new(GetRetentionsResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.archive.v1.RetentionsService/GetRetentions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retentionsServiceClient) UpdateRetentions(ctx context.Context, in *UpdateRetentionsRequest, opts ...grpc.CallOption) (*UpdateRetentionsResponse, error) {
	out := new(UpdateRetentionsResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.archive.v1.RetentionsService/UpdateRetentions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retentionsServiceClient) ActivateRetentions(ctx context.Context, in *ActivateRetentionsRequest, opts ...grpc.CallOption) (*ActivateRetentionsResponse, error) {
	out := new(ActivateRetentionsResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.archive.v1.RetentionsService/ActivateRetentions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retentionsServiceClient) GetRetentionsEnabled(ctx context.Context, in *GetRetentionsEnabledRequest, opts ...grpc.CallOption) (*GetRetentionsEnabledResponse, error) {
	out := new(GetRetentionsEnabledResponse)
	err := c.cc.Invoke(ctx, "/com.coralogix.archive.v1.RetentionsService/GetRetentionsEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RetentionsServiceServer is the server API for RetentionsService service.
// All implementations must embed UnimplementedRetentionsServiceServer
// for forward compatibility
type RetentionsServiceServer interface {
	GetRetentions(context.Context, *GetRetentionsRequest) (*GetRetentionsResponse, error)
	UpdateRetentions(context.Context, *UpdateRetentionsRequest) (*UpdateRetentionsResponse, error)
	ActivateRetentions(context.Context, *ActivateRetentionsRequest) (*ActivateRetentionsResponse, error)
	GetRetentionsEnabled(context.Context, *GetRetentionsEnabledRequest) (*GetRetentionsEnabledResponse, error)
	mustEmbedUnimplementedRetentionsServiceServer()
}

// UnimplementedRetentionsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRetentionsServiceServer struct {
}

func (UnimplementedRetentionsServiceServer) GetRetentions(context.Context, *GetRetentionsRequest) (*GetRetentionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRetentions not implemented")
}
func (UnimplementedRetentionsServiceServer) UpdateRetentions(context.Context, *UpdateRetentionsRequest) (*UpdateRetentionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRetentions not implemented")
}
func (UnimplementedRetentionsServiceServer) ActivateRetentions(context.Context, *ActivateRetentionsRequest) (*ActivateRetentionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateRetentions not implemented")
}
func (UnimplementedRetentionsServiceServer) GetRetentionsEnabled(context.Context, *GetRetentionsEnabledRequest) (*GetRetentionsEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRetentionsEnabled not implemented")
}
func (UnimplementedRetentionsServiceServer) mustEmbedUnimplementedRetentionsServiceServer() {}

// UnsafeRetentionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RetentionsServiceServer will
// result in compilation errors.
type UnsafeRetentionsServiceServer interface {
	mustEmbedUnimplementedRetentionsServiceServer()
}

func RegisterRetentionsServiceServer(s grpc.ServiceRegistrar, srv RetentionsServiceServer) {
	s.RegisterService(&RetentionsService_ServiceDesc, srv)
}

func _RetentionsService_GetRetentions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRetentionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetentionsServiceServer).GetRetentions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.archive.v1.RetentionsService/GetRetentions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetentionsServiceServer).GetRetentions(ctx, req.(*GetRetentionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RetentionsService_UpdateRetentions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRetentionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetentionsServiceServer).UpdateRetentions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.archive.v1.RetentionsService/UpdateRetentions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetentionsServiceServer).UpdateRetentions(ctx, req.(*UpdateRetentionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RetentionsService_ActivateRetentions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateRetentionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetentionsServiceServer).ActivateRetentions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.archive.v1.RetentionsService/ActivateRetentions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetentionsServiceServer).ActivateRetentions(ctx, req.(*ActivateRetentionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RetentionsService_GetRetentionsEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRetentionsEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetentionsServiceServer).GetRetentionsEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogix.archive.v1.RetentionsService/GetRetentionsEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetentionsServiceServer).GetRetentionsEnabled(ctx, req.(*GetRetentionsEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RetentionsService_ServiceDesc is the grpc.ServiceDesc for RetentionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RetentionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.archive.v1.RetentionsService",
	HandlerType: (*RetentionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRetentions",
			Handler:    _RetentionsService_GetRetentions_Handler,
		},
		{
			MethodName: "UpdateRetentions",
			Handler:    _RetentionsService_UpdateRetentions_Handler,
		},
		{
			MethodName: "ActivateRetentions",
			Handler:    _RetentionsService_ActivateRetentions_Handler,
		},
		{
			MethodName: "GetRetentionsEnabled",
			Handler:    _RetentionsService_GetRetentionsEnabled_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/archive/v1/retentions_service.proto",
}
