// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: com/coralogixapis/dashboards/v1/ast/widgets/gauge.proto

package __

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Gauge_Aggregation int32

const (
	Gauge_AGGREGATION_UNSPECIFIED Gauge_Aggregation = 0
	Gauge_AGGREGATION_LAST        Gauge_Aggregation = 1
	Gauge_AGGREGATION_MIN         Gauge_Aggregation = 2
	Gauge_AGGREGATION_MAX         Gauge_Aggregation = 3
	Gauge_AGGREGATION_AVG         Gauge_Aggregation = 4
	Gauge_AGGREGATION_SUM         Gauge_Aggregation = 5
)

// Enum value maps for Gauge_Aggregation.
var (
	Gauge_Aggregation_name = map[int32]string{
		0: "AGGREGATION_UNSPECIFIED",
		1: "AGGREGATION_LAST",
		2: "AGGREGATION_MIN",
		3: "AGGREGATION_MAX",
		4: "AGGREGATION_AVG",
		5: "AGGREGATION_SUM",
	}
	Gauge_Aggregation_value = map[string]int32{
		"AGGREGATION_UNSPECIFIED": 0,
		"AGGREGATION_LAST":        1,
		"AGGREGATION_MIN":         2,
		"AGGREGATION_MAX":         3,
		"AGGREGATION_AVG":         4,
		"AGGREGATION_SUM":         5,
	}
)

func (x Gauge_Aggregation) Enum() *Gauge_Aggregation {
	p := new(Gauge_Aggregation)
	*p = x
	return p
}

func (x Gauge_Aggregation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gauge_Aggregation) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_enumTypes[0].Descriptor()
}

func (Gauge_Aggregation) Type() protoreflect.EnumType {
	return &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_enumTypes[0]
}

func (x Gauge_Aggregation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gauge_Aggregation.Descriptor instead.
func (Gauge_Aggregation) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescGZIP(), []int{0, 0}
}

type Gauge_Unit int32

const (
	Gauge_UNIT_UNSPECIFIED  Gauge_Unit = 0
	Gauge_UNIT_NUMBER       Gauge_Unit = 1
	Gauge_UNIT_PERCENT      Gauge_Unit = 2
	Gauge_UNIT_MICROSECONDS Gauge_Unit = 3
	Gauge_UNIT_MILLISECONDS Gauge_Unit = 4
	Gauge_UNIT_SECONDS      Gauge_Unit = 5
	Gauge_UNIT_BYTES        Gauge_Unit = 6
	Gauge_UNIT_KBYTES       Gauge_Unit = 7
	Gauge_UNIT_MBYTES       Gauge_Unit = 8
	Gauge_UNIT_GBYTES       Gauge_Unit = 9
	Gauge_UNIT_BYTES_IEC    Gauge_Unit = 10
	Gauge_UNIT_KIBYTES      Gauge_Unit = 11
	Gauge_UNIT_MIBYTES      Gauge_Unit = 12
	Gauge_UNIT_GIBYTES      Gauge_Unit = 13
	Gauge_UNIT_EUR_CENTS    Gauge_Unit = 14
	Gauge_UNIT_EUR          Gauge_Unit = 15
	Gauge_UNIT_USD_CENTS    Gauge_Unit = 16
	Gauge_UNIT_USD          Gauge_Unit = 17
)

// Enum value maps for Gauge_Unit.
var (
	Gauge_Unit_name = map[int32]string{
		0:  "UNIT_UNSPECIFIED",
		1:  "UNIT_NUMBER",
		2:  "UNIT_PERCENT",
		3:  "UNIT_MICROSECONDS",
		4:  "UNIT_MILLISECONDS",
		5:  "UNIT_SECONDS",
		6:  "UNIT_BYTES",
		7:  "UNIT_KBYTES",
		8:  "UNIT_MBYTES",
		9:  "UNIT_GBYTES",
		10: "UNIT_BYTES_IEC",
		11: "UNIT_KIBYTES",
		12: "UNIT_MIBYTES",
		13: "UNIT_GIBYTES",
		14: "UNIT_EUR_CENTS",
		15: "UNIT_EUR",
		16: "UNIT_USD_CENTS",
		17: "UNIT_USD",
	}
	Gauge_Unit_value = map[string]int32{
		"UNIT_UNSPECIFIED":  0,
		"UNIT_NUMBER":       1,
		"UNIT_PERCENT":      2,
		"UNIT_MICROSECONDS": 3,
		"UNIT_MILLISECONDS": 4,
		"UNIT_SECONDS":      5,
		"UNIT_BYTES":        6,
		"UNIT_KBYTES":       7,
		"UNIT_MBYTES":       8,
		"UNIT_GBYTES":       9,
		"UNIT_BYTES_IEC":    10,
		"UNIT_KIBYTES":      11,
		"UNIT_MIBYTES":      12,
		"UNIT_GIBYTES":      13,
		"UNIT_EUR_CENTS":    14,
		"UNIT_EUR":          15,
		"UNIT_USD_CENTS":    16,
		"UNIT_USD":          17,
	}
)

func (x Gauge_Unit) Enum() *Gauge_Unit {
	p := new(Gauge_Unit)
	*p = x
	return p
}

func (x Gauge_Unit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gauge_Unit) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_enumTypes[1].Descriptor()
}

func (Gauge_Unit) Type() protoreflect.EnumType {
	return &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_enumTypes[1]
}

func (x Gauge_Unit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gauge_Unit.Descriptor instead.
func (Gauge_Unit) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescGZIP(), []int{0, 1}
}

type Gauge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query        *Gauge_Query            `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Min          *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=min,proto3" json:"min,omitempty"`
	Max          *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=max,proto3" json:"max,omitempty"`
	ShowInnerArc *wrapperspb.BoolValue   `protobuf:"bytes,4,opt,name=show_inner_arc,json=showInnerArc,proto3" json:"show_inner_arc,omitempty"`
	ShowOuterArc *wrapperspb.BoolValue   `protobuf:"bytes,5,opt,name=show_outer_arc,json=showOuterArc,proto3" json:"show_outer_arc,omitempty"`
	Unit         Gauge_Unit              `protobuf:"varint,6,opt,name=unit,proto3,enum=com.coralogixapis.dashboards.v1.ast.widgets.Gauge_Unit" json:"unit,omitempty"`
	Thresholds   []*Gauge_Threshold      `protobuf:"bytes,7,rep,name=thresholds,proto3" json:"thresholds,omitempty"`
}

func (x *Gauge) Reset() {
	*x = Gauge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gauge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gauge) ProtoMessage() {}

func (x *Gauge) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gauge.ProtoReflect.Descriptor instead.
func (*Gauge) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescGZIP(), []int{0}
}

func (x *Gauge) GetQuery() *Gauge_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *Gauge) GetMin() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Gauge) GetMax() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Gauge) GetShowInnerArc() *wrapperspb.BoolValue {
	if x != nil {
		return x.ShowInnerArc
	}
	return nil
}

func (x *Gauge) GetShowOuterArc() *wrapperspb.BoolValue {
	if x != nil {
		return x.ShowOuterArc
	}
	return nil
}

func (x *Gauge) GetUnit() Gauge_Unit {
	if x != nil {
		return x.Unit
	}
	return Gauge_UNIT_UNSPECIFIED
}

func (x *Gauge) GetThresholds() []*Gauge_Threshold {
	if x != nil {
		return x.Thresholds
	}
	return nil
}

type Gauge_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Gauge_Query_Metrics
	//	*Gauge_Query_Logs
	//	*Gauge_Query_Spans
	//	*Gauge_Query_Dataprime
	Value isGauge_Query_Value `protobuf_oneof:"value"`
}

func (x *Gauge_Query) Reset() {
	*x = Gauge_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gauge_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gauge_Query) ProtoMessage() {}

func (x *Gauge_Query) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gauge_Query.ProtoReflect.Descriptor instead.
func (*Gauge_Query) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Gauge_Query) GetValue() isGauge_Query_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Gauge_Query) GetMetrics() *Gauge_MetricsQuery {
	if x, ok := x.GetValue().(*Gauge_Query_Metrics); ok {
		return x.Metrics
	}
	return nil
}

func (x *Gauge_Query) GetLogs() *Gauge_LogsQuery {
	if x, ok := x.GetValue().(*Gauge_Query_Logs); ok {
		return x.Logs
	}
	return nil
}

func (x *Gauge_Query) GetSpans() *Gauge_SpansQuery {
	if x, ok := x.GetValue().(*Gauge_Query_Spans); ok {
		return x.Spans
	}
	return nil
}

func (x *Gauge_Query) GetDataprime() *Gauge_DataprimeQuery {
	if x, ok := x.GetValue().(*Gauge_Query_Dataprime); ok {
		return x.Dataprime
	}
	return nil
}

type isGauge_Query_Value interface {
	isGauge_Query_Value()
}

type Gauge_Query_Metrics struct {
	Metrics *Gauge_MetricsQuery `protobuf:"bytes,1,opt,name=metrics,proto3,oneof"`
}

type Gauge_Query_Logs struct {
	Logs *Gauge_LogsQuery `protobuf:"bytes,2,opt,name=logs,proto3,oneof"`
}

type Gauge_Query_Spans struct {
	Spans *Gauge_SpansQuery `protobuf:"bytes,3,opt,name=spans,proto3,oneof"`
}

type Gauge_Query_Dataprime struct {
	Dataprime *Gauge_DataprimeQuery `protobuf:"bytes,4,opt,name=dataprime,proto3,oneof"`
}

func (*Gauge_Query_Metrics) isGauge_Query_Value() {}

func (*Gauge_Query_Logs) isGauge_Query_Value() {}

func (*Gauge_Query_Spans) isGauge_Query_Value() {}

func (*Gauge_Query_Dataprime) isGauge_Query_Value() {}

type Gauge_MetricsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PromqlQuery *PromQlQuery                `protobuf:"bytes,1,opt,name=promql_query,json=promqlQuery,proto3" json:"promql_query,omitempty"`
	Aggregation Gauge_Aggregation       `protobuf:"varint,2,opt,name=aggregation,proto3,enum=com.coralogixapis.dashboards.v1.ast.widgets.Gauge_Aggregation" json:"aggregation,omitempty"`
	Filters     []*Filter_MetricsFilter `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *Gauge_MetricsQuery) Reset() {
	*x = Gauge_MetricsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gauge_MetricsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gauge_MetricsQuery) ProtoMessage() {}

func (x *Gauge_MetricsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gauge_MetricsQuery.ProtoReflect.Descriptor instead.
func (*Gauge_MetricsQuery) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Gauge_MetricsQuery) GetPromqlQuery() *PromQlQuery {
	if x != nil {
		return x.PromqlQuery
	}
	return nil
}

func (x *Gauge_MetricsQuery) GetAggregation() Gauge_Aggregation {
	if x != nil {
		return x.Aggregation
	}
	return Gauge_AGGREGATION_UNSPECIFIED
}

func (x *Gauge_MetricsQuery) GetFilters() []*Filter_MetricsFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type Gauge_LogsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LuceneQuery     *LuceneQuery      `protobuf:"bytes,1,opt,name=lucene_query,json=luceneQuery,proto3" json:"lucene_query,omitempty"`
	LogsAggregation *LogsAggregation  `protobuf:"bytes,2,opt,name=logs_aggregation,json=logsAggregation,proto3" json:"logs_aggregation,omitempty"`
	Aggregation     Gauge_Aggregation `protobuf:"varint,3,opt,name=aggregation,proto3,enum=com.coralogixapis.dashboards.v1.ast.widgets.Gauge_Aggregation" json:"aggregation,omitempty"`
	Filters         []*Filter_LogsFilter `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *Gauge_LogsQuery) Reset() {
	*x = Gauge_LogsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gauge_LogsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gauge_LogsQuery) ProtoMessage() {}

func (x *Gauge_LogsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gauge_LogsQuery.ProtoReflect.Descriptor instead.
func (*Gauge_LogsQuery) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Gauge_LogsQuery) GetLuceneQuery() *LuceneQuery {
	if x != nil {
		return x.LuceneQuery
	}
	return nil
}

func (x *Gauge_LogsQuery) GetLogsAggregation() *LogsAggregation {
	if x != nil {
		return x.LogsAggregation
	}
	return nil
}

func (x *Gauge_LogsQuery) GetAggregation() Gauge_Aggregation {
	if x != nil {
		return x.Aggregation
	}
	return Gauge_AGGREGATION_UNSPECIFIED
}

func (x *Gauge_LogsQuery) GetFilters() []*Filter_LogsFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type Gauge_SpansQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LuceneQuery      *LuceneQuery      `protobuf:"bytes,1,opt,name=lucene_query,json=luceneQuery,proto3" json:"lucene_query,omitempty"`
	SpansAggregation *SpansAggregation `protobuf:"bytes,2,opt,name=spans_aggregation,json=spansAggregation,proto3" json:"spans_aggregation,omitempty"`
	Aggregation      Gauge_Aggregation `protobuf:"varint,3,opt,name=aggregation,proto3,enum=com.coralogixapis.dashboards.v1.ast.widgets.Gauge_Aggregation" json:"aggregation,omitempty"`
	Filters          []*Filter_SpansFilter `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *Gauge_SpansQuery) Reset() {
	*x = Gauge_SpansQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gauge_SpansQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gauge_SpansQuery) ProtoMessage() {}

func (x *Gauge_SpansQuery) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gauge_SpansQuery.ProtoReflect.Descriptor instead.
func (*Gauge_SpansQuery) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Gauge_SpansQuery) GetLuceneQuery() *LuceneQuery {
	if x != nil {
		return x.LuceneQuery
	}
	return nil
}

func (x *Gauge_SpansQuery) GetSpansAggregation() *SpansAggregation {
	if x != nil {
		return x.SpansAggregation
	}
	return nil
}

func (x *Gauge_SpansQuery) GetAggregation() Gauge_Aggregation {
	if x != nil {
		return x.Aggregation
	}
	return Gauge_AGGREGATION_UNSPECIFIED
}

func (x *Gauge_SpansQuery) GetFilters() []*Filter_SpansFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type Gauge_DataprimeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataprimeQuery *DataprimeQuery  `protobuf:"bytes,1,opt,name=dataprime_query,json=dataprimeQuery,proto3" json:"dataprime_query,omitempty"`
	Filters        []*Filter_Source `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *Gauge_DataprimeQuery) Reset() {
	*x = Gauge_DataprimeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gauge_DataprimeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gauge_DataprimeQuery) ProtoMessage() {}

func (x *Gauge_DataprimeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gauge_DataprimeQuery.ProtoReflect.Descriptor instead.
func (*Gauge_DataprimeQuery) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Gauge_DataprimeQuery) GetDataprimeQuery() *DataprimeQuery {
	if x != nil {
		return x.DataprimeQuery
	}
	return nil
}

func (x *Gauge_DataprimeQuery) GetFilters() []*Filter_Source {
	if x != nil {
		return x.Filters
	}
	return nil
}

type Gauge_Threshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From  *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Color *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *Gauge_Threshold) Reset() {
	*x = Gauge_Threshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gauge_Threshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gauge_Threshold) ProtoMessage() {}

func (x *Gauge_Threshold) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gauge_Threshold.ProtoReflect.Descriptor instead.
func (*Gauge_Threshold) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Gauge_Threshold) GetFrom() *wrapperspb.DoubleValue {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Gauge_Threshold) GetColor() *wrapperspb.StringValue {
	if x != nil {
		return x.Color
	}
	return nil
}

var File_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto protoreflect.FileDescriptor

var file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDesc = []byte{
	0x0a, 0x37, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x73, 0x74, 0x2f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x67, 0x61,
	0x75, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2b, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x77,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x1a, 0x30, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73, 0x74, 0x2f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x40, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73, 0x74, 0x2f, 0x77, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3d, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc8, 0x15,
	0x0a, 0x05, 0x47, 0x61, 0x75, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x77, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x73, 0x2e, 0x47, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x68, 0x6f,
	0x77, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x41, 0x72, 0x63, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73,
	0x68, 0x6f, 0x77, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x72, 0x63, 0x12, 0x4b, 0x0a, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x47, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x5c, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x47, 0x61, 0x75, 0x67, 0x65,
	0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x1a, 0xfb, 0x02, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x5b, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e,
	0x47, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x52, 0x0a,
	0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x47, 0x61, 0x75, 0x67, 0x65, 0x2e,
	0x4c, 0x6f, 0x67, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x6f, 0x67,
	0x73, 0x12, 0x55, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x47,
	0x61, 0x75, 0x67, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x12, 0x61, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x47, 0x61, 0x75, 0x67, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0xa9, 0x02, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x62, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x51, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x6d, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x60, 0x0a, 0x0b, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x47, 0x61, 0x75,
	0x67, 0x65, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x1a, 0x87, 0x03, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x62,
	0x0a, 0x0c, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0b, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x62, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x47, 0x61, 0x75, 0x67, 0x65, 0x2e,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x8c, 0x03, 0x0a, 0x0a, 0x53,
	0x70, 0x61, 0x6e, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x62, 0x0a, 0x0c, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x0b, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x65, 0x0a,
	0x11, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x47, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xbf, 0x01, 0x0a, 0x0e, 0x44, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x5f, 0x0a, 0x0f,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4c, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x71, 0x0a, 0x09, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x94,
	0x01, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x17, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41,
	0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x56, 0x47, 0x10, 0x04,
	0x12, 0x13, 0x0a, 0x0f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x55, 0x4d, 0x10, 0x05, 0x22, 0xd0, 0x02, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x14,
	0x0a, 0x10, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4d,
	0x42, 0x45, 0x52, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x50, 0x45,
	0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x53, 0x45, 0x43, 0x4f,
	0x4e, 0x44, 0x53, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x53, 0x45,
	0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x4b, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x4d, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x47, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e,
	0x49, 0x54, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x5f, 0x49, 0x45, 0x43, 0x10, 0x0a, 0x12, 0x10,
	0x0a, 0x0c, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4b, 0x49, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x0b,
	0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x49, 0x42, 0x59, 0x54, 0x45, 0x53,
	0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x47, 0x49, 0x42, 0x59, 0x54,
	0x45, 0x53, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x45, 0x55, 0x52,
	0x5f, 0x43, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x45, 0x55, 0x52, 0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55,
	0x53, 0x44, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x10, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e,
	0x49, 0x54, 0x5f, 0x55, 0x53, 0x44, 0x10, 0x11, 0x42, 0x2d, 0x5a, 0x2b, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73, 0x74, 0x2f,
	0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescOnce sync.Once
	file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescData = file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDesc
)

func file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescData)
	})
	return file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDescData
}

var file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_goTypes = []interface{}{
	(Gauge_Aggregation)(0),         // 0: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Aggregation
	(Gauge_Unit)(0),                // 1: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Unit
	(*Gauge)(nil),                  // 2: com.coralogixapis.dashboards.v1.ast.widgets.Gauge
	(*Gauge_Query)(nil),            // 3: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Query
	(*Gauge_MetricsQuery)(nil),     // 4: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.MetricsQuery
	(*Gauge_LogsQuery)(nil),        // 5: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.LogsQuery
	(*Gauge_SpansQuery)(nil),       // 6: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.SpansQuery
	(*Gauge_DataprimeQuery)(nil),   // 7: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.DataprimeQuery
	(*Gauge_Threshold)(nil),        // 8: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Threshold
	(*wrapperspb.DoubleValue)(nil), // 9: google.protobuf.DoubleValue
	(*wrapperspb.BoolValue)(nil),   // 10: google.protobuf.BoolValue
	(*PromQlQuery)(nil),            // 11: com.coralogixapis.dashboards.v1.ast.widgets.common.PromQlQuery
	(*Filter_MetricsFilter)(nil),   // 12: com.coralogixapis.dashboards.v1.ast.Filter.MetricsFilter
	(*LuceneQuery)(nil),            // 13: com.coralogixapis.dashboards.v1.ast.widgets.common.LuceneQuery
	(*LogsAggregation)(nil),        // 14: com.coralogixapis.dashboards.v1.common.LogsAggregation
	(*Filter_LogsFilter)(nil),      // 15: com.coralogixapis.dashboards.v1.ast.Filter.LogsFilter
	(*SpansAggregation)(nil),       // 16: com.coralogixapis.dashboards.v1.common.SpansAggregation
	(*Filter_SpansFilter)(nil),     // 17: com.coralogixapis.dashboards.v1.ast.Filter.SpansFilter
	(*DataprimeQuery)(nil),         // 18: com.coralogixapis.dashboards.v1.common.DataprimeQuery
	(*Filter_Source)(nil),          // 19: com.coralogixapis.dashboards.v1.ast.Filter.Source
	(*wrapperspb.StringValue)(nil), // 20: google.protobuf.StringValue
}
var file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_depIdxs = []int32{
	3,  // 0: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.query:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Query
	9,  // 1: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.min:type_name -> google.protobuf.DoubleValue
	9,  // 2: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.max:type_name -> google.protobuf.DoubleValue
	10, // 3: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.show_inner_arc:type_name -> google.protobuf.BoolValue
	10, // 4: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.show_outer_arc:type_name -> google.protobuf.BoolValue
	1,  // 5: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.unit:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Unit
	8,  // 6: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.thresholds:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Threshold
	4,  // 7: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Query.metrics:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.Gauge.MetricsQuery
	5,  // 8: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Query.logs:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.Gauge.LogsQuery
	6,  // 9: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Query.spans:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.Gauge.SpansQuery
	7,  // 10: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Query.dataprime:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.Gauge.DataprimeQuery
	11, // 11: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.MetricsQuery.promql_query:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.common.PromQlQuery
	0,  // 12: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.MetricsQuery.aggregation:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Aggregation
	12, // 13: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.MetricsQuery.filters:type_name -> com.coralogixapis.dashboards.v1.ast.Filter.MetricsFilter
	13, // 14: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.LogsQuery.lucene_query:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.common.LuceneQuery
	14, // 15: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.LogsQuery.logs_aggregation:type_name -> com.coralogixapis.dashboards.v1.common.LogsAggregation
	0,  // 16: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.LogsQuery.aggregation:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Aggregation
	15, // 17: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.LogsQuery.filters:type_name -> com.coralogixapis.dashboards.v1.ast.Filter.LogsFilter
	13, // 18: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.SpansQuery.lucene_query:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.common.LuceneQuery
	16, // 19: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.SpansQuery.spans_aggregation:type_name -> com.coralogixapis.dashboards.v1.common.SpansAggregation
	0,  // 20: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.SpansQuery.aggregation:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Aggregation
	17, // 21: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.SpansQuery.filters:type_name -> com.coralogixapis.dashboards.v1.ast.Filter.SpansFilter
	18, // 22: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.DataprimeQuery.dataprime_query:type_name -> com.coralogixapis.dashboards.v1.common.DataprimeQuery
	19, // 23: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.DataprimeQuery.filters:type_name -> com.coralogixapis.dashboards.v1.ast.Filter.Source
	9,  // 24: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Threshold.from:type_name -> google.protobuf.DoubleValue
	20, // 25: com.coralogixapis.dashboards.v1.ast.widgets.Gauge.Threshold.color:type_name -> google.protobuf.StringValue
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_init() }
func file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_init() {
	if File_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gauge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gauge_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gauge_MetricsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gauge_LogsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gauge_SpansQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gauge_DataprimeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gauge_Threshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Gauge_Query_Metrics)(nil),
		(*Gauge_Query_Logs)(nil),
		(*Gauge_Query_Spans)(nil),
		(*Gauge_Query_Dataprime)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_depIdxs,
		EnumInfos:         file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_enumTypes,
		MessageInfos:      file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto = out.File
	file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_rawDesc = nil
	file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_goTypes = nil
	file_com_coralogixapis_dashboards_v1_ast_widgets_gauge_proto_depIdxs = nil
}
