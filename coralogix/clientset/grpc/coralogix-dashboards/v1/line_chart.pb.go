// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: com/coralogixapis/dashboards/v1/ast/widgets/line_chart.proto

package v1

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LineChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query              *LineChart_Query        `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Legend             *Legend                 `protobuf:"bytes,2,opt,name=legend,proto3" json:"legend,omitempty"`
	SeriesNameTemplate *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=series_name_template,json=seriesNameTemplate,proto3" json:"series_name_template,omitempty"`
}

func (x *LineChart) Reset() {
	*x = LineChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineChart) ProtoMessage() {}

func (x *LineChart) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineChart.ProtoReflect.Descriptor instead.
func (*LineChart) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDescGZIP(), []int{0}
}

func (x *LineChart) GetQuery() *LineChart_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *LineChart) GetLegend() *Legend {
	if x != nil {
		return x.Legend
	}
	return nil
}

func (x *LineChart) GetSeriesNameTemplate() *wrapperspb.StringValue {
	if x != nil {
		return x.SeriesNameTemplate
	}
	return nil
}

type LineChart_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*LineChart_Query_Logs
	//	*LineChart_Query_Metrics
	Value isLineChart_Query_Value `protobuf_oneof:"value"`
}

func (x *LineChart_Query) Reset() {
	*x = LineChart_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineChart_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineChart_Query) ProtoMessage() {}

func (x *LineChart_Query) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineChart_Query.ProtoReflect.Descriptor instead.
func (*LineChart_Query) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDescGZIP(), []int{0, 0}
}

func (m *LineChart_Query) GetValue() isLineChart_Query_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *LineChart_Query) GetLogs() *LineChart_LogsQuery {
	if x, ok := x.GetValue().(*LineChart_Query_Logs); ok {
		return x.Logs
	}
	return nil
}

func (x *LineChart_Query) GetMetrics() *LineChart_MetricsQuery {
	if x, ok := x.GetValue().(*LineChart_Query_Metrics); ok {
		return x.Metrics
	}
	return nil
}

type isLineChart_Query_Value interface {
	isLineChart_Query_Value()
}

type LineChart_Query_Logs struct {
	Logs *LineChart_LogsQuery `protobuf:"bytes,1,opt,name=logs,proto3,oneof"`
}

type LineChart_Query_Metrics struct {
	Metrics *LineChart_MetricsQuery `protobuf:"bytes,2,opt,name=metrics,proto3,oneof"`
}

func (*LineChart_Query_Logs) isLineChart_Query_Value() {}

func (*LineChart_Query_Metrics) isLineChart_Query_Value() {}

type LineChart_LogsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LuceneQuery  *LuceneQuery              `protobuf:"bytes,1,opt,name=lucene_query,json=luceneQuery,proto3" json:"lucene_query,omitempty"`
	GroupBy      []*wrapperspb.StringValue `protobuf:"bytes,2,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	Aggregations []*LogsAggregation        `protobuf:"bytes,3,rep,name=aggregations,proto3" json:"aggregations,omitempty"`
}

func (x *LineChart_LogsQuery) Reset() {
	*x = LineChart_LogsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineChart_LogsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineChart_LogsQuery) ProtoMessage() {}

func (x *LineChart_LogsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineChart_LogsQuery.ProtoReflect.Descriptor instead.
func (*LineChart_LogsQuery) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDescGZIP(), []int{0, 1}
}

func (x *LineChart_LogsQuery) GetLuceneQuery() *LuceneQuery {
	if x != nil {
		return x.LuceneQuery
	}
	return nil
}

func (x *LineChart_LogsQuery) GetGroupBy() []*wrapperspb.StringValue {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *LineChart_LogsQuery) GetAggregations() []*LogsAggregation {
	if x != nil {
		return x.Aggregations
	}
	return nil
}

type LineChart_MetricsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PromqlQuery *PromQlQuery `protobuf:"bytes,1,opt,name=promql_query,json=promqlQuery,proto3" json:"promql_query,omitempty"`
}

func (x *LineChart_MetricsQuery) Reset() {
	*x = LineChart_MetricsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineChart_MetricsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineChart_MetricsQuery) ProtoMessage() {}

func (x *LineChart_MetricsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineChart_MetricsQuery.ProtoReflect.Descriptor instead.
func (*LineChart_MetricsQuery) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDescGZIP(), []int{0, 2}
}

func (x *LineChart_MetricsQuery) GetPromqlQuery() *PromQlQuery {
	if x != nil {
		return x.PromqlQuery
	}
	return nil
}

var File_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto protoreflect.FileDescriptor

var file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDesc = []byte{
	0x0a, 0x3c, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x73, 0x74, 0x2f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2b,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x1a, 0x3f, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73, 0x74,
	0x2f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x40, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73,
	0x74, 0x2f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3d,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcb, 0x06,
	0x0a, 0x09, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x52, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x52, 0x0a, 0x06, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x52, 0x06, 0x6c, 0x65, 0x67,
	0x65, 0x6e, 0x64, 0x12, 0x4e, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x12, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x1a, 0xc9, 0x01, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x56, 0x0a,
	0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x5f, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x77, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x85, 0x02, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x62, 0x0a,
	0x0c, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x0b, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x37, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x5b, 0x0a, 0x0c, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x72, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x62, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x71,
	0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x51, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x04, 0x5a, 0x02, 0x2e,
	0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDescOnce sync.Once
	file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDescData = file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDesc
)

func file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDescData)
	})
	return file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDescData
}

var file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_goTypes = []interface{}{
	(*LineChart)(nil),              // 0: com.coralogixapis.dashboards.v1.ast.widgets.LineChart
	(*LineChart_Query)(nil),        // 1: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.Query
	(*LineChart_LogsQuery)(nil),    // 2: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.LogsQuery
	(*LineChart_MetricsQuery)(nil), // 3: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.MetricsQuery
	(*Legend)(nil),                 // 4: com.coralogixapis.dashboards.v1.ast.widgets.common.Legend
	(*wrapperspb.StringValue)(nil), // 5: google.protobuf.StringValue
	(*LuceneQuery)(nil),            // 6: com.coralogixapis.dashboards.v1.ast.widgets.common.LuceneQuery
	(*LogsAggregation)(nil),        // 7: com.coralogixapis.dashboards.v1.common.LogsAggregation
	(*PromQlQuery)(nil),            // 8: com.coralogixapis.dashboards.v1.ast.widgets.common.PromQlQuery
}
var file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_depIdxs = []int32{
	1, // 0: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.query:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.LineChart.Query
	4, // 1: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.legend:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.common.Legend
	5, // 2: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.series_name_template:type_name -> google.protobuf.StringValue
	2, // 3: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.Query.logs:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.LineChart.LogsQuery
	3, // 4: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.Query.metrics:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.LineChart.MetricsQuery
	6, // 5: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.LogsQuery.lucene_query:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.common.LuceneQuery
	5, // 6: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.LogsQuery.group_by:type_name -> google.protobuf.StringValue
	7, // 7: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.LogsQuery.aggregations:type_name -> com.coralogixapis.dashboards.v1.common.LogsAggregation
	8, // 8: com.coralogixapis.dashboards.v1.ast.widgets.LineChart.MetricsQuery.promql_query:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.common.PromQlQuery
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_init() }
func file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_init() {
	if File_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto != nil {
		return
	}
	file_com_coralogixapis_dashboards_v1_ast_widgets_common_legend_proto_init()
	file_com_coralogixapis_dashboards_v1_ast_widgets_common_queries_proto_init()
	file_com_coralogixapis_dashboards_v1_common_logs_aggregation_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LineChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LineChart_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LineChart_LogsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LineChart_MetricsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*LineChart_Query_Logs)(nil),
		(*LineChart_Query_Metrics)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_depIdxs,
		MessageInfos:      file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto = out.File
	file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_rawDesc = nil
	file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_goTypes = nil
	file_com_coralogixapis_dashboards_v1_ast_widgets_line_chart_proto_depIdxs = nil
}
