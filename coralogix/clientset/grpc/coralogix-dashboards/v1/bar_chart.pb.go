// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: com/coralogixapis/dashboards/v1/ast/widgets/bar_chart.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BarChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query             *BarChart_Query           `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	MaxBarsPerChart   *wrapperspb.Int32Value    `protobuf:"bytes,2,opt,name=max_bars_per_chart,json=maxBarsPerChart,proto3" json:"max_bars_per_chart,omitempty"`
	GroupNameTemplate *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=group_name_template,json=groupNameTemplate,proto3" json:"group_name_template,omitempty"`
	StackDefinition   *BarChart_StackDefinition `protobuf:"bytes,4,opt,name=stack_definition,json=stackDefinition,proto3" json:"stack_definition,omitempty"`
	ScaleType         ScaleType                 `protobuf:"varint,5,opt,name=scale_type,json=scaleType,proto3,enum=com.coralogixapis.dashboards.v1.ast.widgets.common.ScaleType" json:"scale_type,omitempty"`
	ColorsBy          *BarChart_ColorsBy        `protobuf:"bytes,6,opt,name=colors_by,json=colorsBy,proto3" json:"colors_by,omitempty"`
	XAxis             *BarChart_XAxis           `protobuf:"bytes,7,opt,name=x_axis,json=xAxis,proto3" json:"x_axis,omitempty"`
	Unit              Unit                      `protobuf:"varint,8,opt,name=unit,proto3,enum=com.coralogixapis.dashboards.v1.ast.widgets.common.Unit" json:"unit,omitempty"`
}

func (x *BarChart) Reset() {
	*x = BarChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BarChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarChart) ProtoMessage() {}

func (x *BarChart) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarChart.ProtoReflect.Descriptor instead.
func (*BarChart) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_rawDescGZIP(), []int{0}
}

func (x *BarChart) GetQuery() *BarChart_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *BarChart) GetMaxBarsPerChart() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxBarsPerChart
	}
	return nil
}

func (x *BarChart) GetGroupNameTemplate() *wrapperspb.StringValue {
	if x != nil {
		return x.GroupNameTemplate
	}
	return nil
}

func (x *BarChart) GetStackDefinition() *BarChart_StackDefinition {
	if x != nil {
		return x.StackDefinition
	}
	return nil
}

func (x *BarChart) GetScaleType() ScaleType {
	if x != nil {
		return x.ScaleType
	}
	return ScaleType_SCALE_TYPE_UNSPECIFIED
}

func (x *BarChart) GetColorsBy() *BarChart_ColorsBy {
	if x != nil {
		return x.ColorsBy
	}
	return nil
}

func (x *BarChart) GetXAxis() *BarChart_XAxis {
	if x != nil {
		return x.XAxis
	}
	return nil
}

func (x *BarChart) GetUnit() Unit {
	if x != nil {
		return x.Unit
	}
	return Unit_UNIT_UNSPECIFIED
}

type BarChart_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*BarChart_Query_Logs
	//	*BarChart_Query_Spans
	//	*BarChart_Query_Metrics
	Value isBarChart_Query_Value `protobuf_oneof:"value"`
}

func (x *BarChart_Query) Reset() {
	*x = BarChart_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BarChart_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarChart_Query) ProtoMessage() {}

func (x *BarChart_Query) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarChart_Query.ProtoReflect.Descriptor instead.
func (*BarChart_Query) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_rawDescGZIP(), []int{0, 0}
}

func (m *BarChart_Query) GetValue() isBarChart_Query_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *BarChart_Query) GetLogs() *BarChart_LogsQuery {
	if x, ok := x.GetValue().(*BarChart_Query_Logs); ok {
		return x.Logs
	}
	return nil
}

func (x *BarChart_Query) GetSpans() *BarChart_SpansQuery {
	if x, ok := x.GetValue().(*BarChart_Query_Spans); ok {
		return x.Spans
	}
	return nil
}

func (x *BarChart_Query) GetMetrics() *BarChart_MetricsQuery {
	if x, ok := x.GetValue().(*BarChart_Query_Metrics); ok {
		return x.Metrics
	}
	return nil
}

type isBarChart_Query_Value interface {
	isBarChart_Query_Value()
}

type BarChart_Query_Logs struct {
	Logs *BarChart_LogsQuery `protobuf:"bytes,1,opt,name=logs,proto3,oneof"`
}

type BarChart_Query_Spans struct {
	Spans *BarChart_SpansQuery `protobuf:"bytes,2,opt,name=spans,proto3,oneof"`
}

type BarChart_Query_Metrics struct {
	Metrics *BarChart_MetricsQuery `protobuf:"bytes,3,opt,name=metrics,proto3,oneof"`
}

func (*BarChart_Query_Logs) isBarChart_Query_Value() {}

func (*BarChart_Query_Spans) isBarChart_Query_Value() {}

func (*BarChart_Query_Metrics) isBarChart_Query_Value() {}

type BarChart_StackDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxSlicesPerBar   *wrapperspb.Int32Value  `protobuf:"bytes,1,opt,name=max_slices_per_bar,json=maxSlicesPerBar,proto3" json:"max_slices_per_bar,omitempty"`
	StackNameTemplate *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=stack_name_template,json=stackNameTemplate,proto3" json:"stack_name_template,omitempty"`
}

func (x *BarChart_StackDefinition) Reset() {
	*x = BarChart_StackDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BarChart_StackDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarChart_StackDefinition) ProtoMessage() {}

func (x *BarChart_StackDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarChart_StackDefinition.ProtoReflect.Descriptor instead.
func (*BarChart_StackDefinition) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_rawDescGZIP(), []int{0, 1}
}

func (x *BarChart_StackDefinition) GetMaxSlicesPerBar() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxSlicesPerBar
	}
	return nil
}

func (x *BarChart_StackDefinition) GetStackNameTemplate() *wrapperspb.StringValue {
	if x != nil {
		return x.StackNameTemplate
	}
	return nil
}

type BarChart_ColorsBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*BarChart_ColorsBy_Stack
	//	*BarChart_ColorsBy_GroupBy
	Value isBarChart_ColorsBy_Value `protobuf_oneof:"value"`
}

func (x *BarChart_ColorsBy) Reset() {
	*x = BarChart_ColorsBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BarChart_ColorsBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarChart_ColorsBy) ProtoMessage() {}

func (x *BarChart_ColorsBy) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarChart_ColorsBy.ProtoReflect.Descriptor instead.
func (*BarChart_ColorsBy) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_rawDescGZIP(), []int{0, 2}
}

func (m *BarChart_ColorsBy) GetValue() isBarChart_ColorsBy_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *BarChart_ColorsBy) GetStack() *BarChart_ColorsBy_ColorsByStack {
	if x, ok := x.GetValue().(*BarChart_ColorsBy_Stack); ok {
		return x.Stack
	}
	return nil
}

func (x *BarChart_ColorsBy) GetGroupBy() *BarChart_ColorsBy_ColorsByGroupBy {
	if x, ok := x.GetValue().(*BarChart_ColorsBy_GroupBy); ok {
		return x.GroupBy
	}
	return nil
}

type isBarChart_ColorsBy_Value interface {
	isBarChart_ColorsBy_Value()
}

type BarChart_ColorsBy_Stack struct {
	Stack *BarChart_ColorsBy_ColorsByStack `protobuf:"bytes,1,opt,name=stack,proto3,oneof"`
}

type BarChart_ColorsBy_GroupBy struct {
	GroupBy *BarChart_ColorsBy_ColorsByGroupBy `protobuf:"bytes,2,opt,name=group_by,json=groupBy,proto3,oneof"`
}

func (*BarChart_ColorsBy_Stack) isBarChart_ColorsBy_Value() {}

func (*BarChart_ColorsBy_GroupBy) isBarChart_ColorsBy_Value() {}

type BarChart_XAxis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*BarChart_XAxis_Value
	//	*BarChart_XAxis_Time
	Type isBarChart_XAxis_Type `protobuf_oneof:"type"`
}

func (x *BarChart_XAxis) Reset() {
	*x = BarChart_XAxis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BarChart_XAxis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarChart_XAxis) ProtoMessage() {}

func (x *BarChart_XAxis) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarChart_XAxis.ProtoReflect.Descriptor instead.
func (*BarChart_XAxis) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_rawDescGZIP(), []int{0, 3}
}

func (m *BarChart_XAxis) GetType() isBarChart_XAxis_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *BarChart_XAxis) GetValue() *BarChart_XAxis_XAxisByValue {
	if x, ok := x.GetType().(*BarChart_XAxis_Value); ok {
		return x.Value
	}
	return nil
}

func (x *BarChart_XAxis) GetTime() *BarChart_XAxis_XAxisByTime {
	if x, ok := x.GetType().(*BarChart_XAxis_Time); ok {
		return x.Time
	}
	return nil
}

type isBarChart_XAxis_Type interface {
	isBarChart_XAxis_Type()
}

type BarChart_XAxis_Value struct {
	Value *BarChart_XAxis_XAxisByValue `protobuf:"bytes,1,opt,name=value,proto3,oneof"`
}

type BarChart_XAxis_Time struct {
	Time *BarChart_XAxis_XAxisByTime `protobuf:"bytes,2,opt,name=time,proto3,oneof"`
}

func (*BarChart_XAxis_Value) isBarChart_XAxis_Type() {}

func (*BarChart_XAxis_Time) isBarChart_XAxis_Type() {}

type BarChart_LogsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LuceneQuery      *LuceneQuery              `protobuf:"bytes,1,opt,name=lucene_query,json=luceneQuery,proto3" json:"lucene_query,omitempty"`
	Aggregation      *LogsAggregation          `protobuf:"bytes,2,opt,name=aggregation,proto3" json:"aggregation,omitempty"`
	Filters          []*Filter_LogsFilter      `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	GroupNames       []*wrapperspb.StringValue `protobuf:"bytes,4,rep,name=group_names,json=groupNames,proto3" json:"group_names,omitempty"`
	StackedGroupName *wrapperspb.StringValue   `protobuf:"bytes,5,opt,name=stacked_group_name,json=stackedGroupName,proto3" json:"stacked_group_name,omitempty"`
}

func (x *BarChart_LogsQuery) Reset() {
	*x = BarChart_LogsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BarChart_LogsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarChart_LogsQuery) ProtoMessage() {}

func (x *BarChart_LogsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarChart_LogsQuery.ProtoReflect.Descriptor instead.
func (*BarChart_LogsQuery) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_rawDescGZIP(), []int{0, 4}
}

func (x *BarChart_LogsQuery) GetLuceneQuery() *LuceneQuery {
	if x != nil {
		return x.LuceneQuery
	}
	return nil
}

func (x *BarChart_LogsQuery) GetAggregation() *LogsAggregation {
	if x != nil {
		return x.Aggregation
	}
	return nil
}

func (x *BarChart_LogsQuery) GetFilters() []*Filter_LogsFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *BarChart_LogsQuery) GetGroupNames() []*wrapperspb.StringValue {
	if x != nil {
		return x.GroupNames
	}
	return nil
}

func (x *BarChart_LogsQuery) GetStackedGroupName() *wrapperspb.StringValue {
	if x != nil {
		return x.StackedGroupName
	}
	return nil
}

type BarChart_SpansQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LuceneQuery      *LuceneQuery          `protobuf:"bytes,1,opt,name=lucene_query,json=luceneQuery,proto3" json:"lucene_query,omitempty"`
	Aggregation      *SpansAggregation     `protobuf:"bytes,2,opt,name=aggregation,proto3" json:"aggregation,omitempty"`
	Filters          []*Filter_SpansFilter `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	GroupNames       []*SpanField          `protobuf:"bytes,4,rep,name=group_names,json=groupNames,proto3" json:"group_names,omitempty"`
	StackedGroupName *SpanField            `protobuf:"bytes,5,opt,name=stacked_group_name,json=stackedGroupName,proto3" json:"stacked_group_name,omitempty"`
}

func (x *BarChart_SpansQuery) Reset() {
	*x = BarChart_SpansQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BarChart_SpansQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarChart_SpansQuery) ProtoMessage() {}

func (x *BarChart_SpansQuery) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarChart_SpansQuery.ProtoReflect.Descriptor instead.
func (*BarChart_SpansQuery) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_rawDescGZIP(), []int{0, 5}
}

func (x *BarChart_SpansQuery) GetLuceneQuery() *LuceneQuery {
	if x != nil {
		return x.LuceneQuery
	}
	return nil
}

func (x *BarChart_SpansQuery) GetAggregation() *SpansAggregation {
	if x != nil {
		return x.Aggregation
	}
	return nil
}

func (x *BarChart_SpansQuery) GetFilters() []*Filter_SpansFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *BarChart_SpansQuery) GetGroupNames() []*SpanField {
	if x != nil {
		return x.GroupNames
	}
	return nil
}

func (x *BarChart_SpansQuery) GetStackedGroupName() *SpanField {
	if x != nil {
		return x.StackedGroupName
	}
	return nil
}

type BarChart_MetricsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PromqlQuery      *PromQlQuery              `protobuf:"bytes,1,opt,name=promql_query,json=promqlQuery,proto3" json:"promql_query,omitempty"`
	Filters          []*Filter_MetricsFilter   `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	GroupNames       []*wrapperspb.StringValue `protobuf:"bytes,3,rep,name=group_names,json=groupNames,proto3" json:"group_names,omitempty"`
	StackedGroupName *wrapperspb.StringValue   `protobuf:"bytes,4,opt,name=stacked_group_name,json=stackedGroupName,proto3" json:"stacked_group_name,omitempty"`
}

func (x *BarChart_MetricsQuery) Reset() {
	*x = BarChart_MetricsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BarChart_MetricsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarChart_MetricsQuery) ProtoMessage() {}

func (x *BarChart_MetricsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarChart_MetricsQuery.ProtoReflect.Descriptor instead.
func (*BarChart_MetricsQuery) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_rawDescGZIP(), []int{0, 6}
}

func (x *BarChart_MetricsQuery) GetPromqlQuery() *PromQlQuery {
	if x != nil {
		return x.PromqlQuery
	}
	return nil
}

func (x *BarChart_MetricsQuery) GetFilters() []*Filter_MetricsFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *BarChart_MetricsQuery) GetGroupNames() []*wrapperspb.StringValue {
	if x != nil {
		return x.GroupNames
	}
	return nil
}

func (x *BarChart_MetricsQuery) GetStackedGroupName() *wrapperspb.StringValue {
	if x != nil {
		return x.StackedGroupName
	}
	return nil
}

type BarChart_ColorsBy_ColorsByStack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BarChart_ColorsBy_ColorsByStack) Reset() {
	*x = BarChart_ColorsBy_ColorsByStack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BarChart_ColorsBy_ColorsByStack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarChart_ColorsBy_ColorsByStack) ProtoMessage() {}

func (x *BarChart_ColorsBy_ColorsByStack) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarChart_ColorsBy_ColorsByStack.ProtoReflect.Descriptor instead.
func (*BarChart_ColorsBy_ColorsByStack) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_rawDescGZIP(), []int{0, 2, 0}
}

type BarChart_ColorsBy_ColorsByGroupBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BarChart_ColorsBy_ColorsByGroupBy) Reset() {
	*x = BarChart_ColorsBy_ColorsByGroupBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BarChart_ColorsBy_ColorsByGroupBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarChart_ColorsBy_ColorsByGroupBy) ProtoMessage() {}

func (x *BarChart_ColorsBy_ColorsByGroupBy) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarChart_ColorsBy_ColorsByGroupBy.ProtoReflect.Descriptor instead.
func (*BarChart_ColorsBy_ColorsByGroupBy) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_rawDescGZIP(), []int{0, 2, 1}
}

type BarChart_XAxis_XAxisByValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BarChart_XAxis_XAxisByValue) Reset() {
	*x = BarChart_XAxis_XAxisByValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BarChart_XAxis_XAxisByValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarChart_XAxis_XAxisByValue) ProtoMessage() {}

func (x *BarChart_XAxis_XAxisByValue) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarChart_XAxis_XAxisByValue.ProtoReflect.Descriptor instead.
func (*BarChart_XAxis_XAxisByValue) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_rawDescGZIP(), []int{0, 3, 0}
}

type BarChart_XAxis_XAxisByTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval         *durationpb.Duration   `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	BucketsPresented *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=buckets_presented,json=bucketsPresented,proto3" json:"buckets_presented,omitempty"`
}

func (x *BarChart_XAxis_XAxisByTime) Reset() {
	*x = BarChart_XAxis_XAxisByTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BarChart_XAxis_XAxisByTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarChart_XAxis_XAxisByTime) ProtoMessage() {}

func (x *BarChart_XAxis_XAxisByTime) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarChart_XAxis_XAxisByTime.ProtoReflect.Descriptor instead.
func (*BarChart_XAxis_XAxisByTime) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (x *BarChart_XAxis_XAxisByTime) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *BarChart_XAxis_XAxisByTime) GetBucketsPresented() *wrapperspb.Int32Value {
	if x != nil {
		return x.BucketsPresented
	}
	return nil
}

var File_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto protoreflect.FileDescriptor

var file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x73, 0x74, 0x2f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x62, 0x61,
	0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2b, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x1a, 0x30, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73, 0x74, 0x2f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x40, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73,
	0x74, 0x2f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x73, 0x74, 0x2f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x73, 0x74, 0x2f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3d,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73,
	0x70, 0x61, 0x6e, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xeb, 0x17, 0x0a, 0x08, 0x42, 0x61, 0x72, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x12, 0x51, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73,
	0x2e, 0x42, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61,
	0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0f, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x72, 0x73, 0x50, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x12, 0x4c, 0x0a, 0x13, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x70,
	0x0a, 0x10, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x77,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x42, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5c, 0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5b,
	0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e,
	0x42, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x42,
	0x79, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x12, 0x52, 0x0a, 0x06, 0x78,
	0x5f, 0x61, 0x78, 0x69, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x42, 0x61, 0x72, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x2e, 0x58, 0x41, 0x78, 0x69, 0x73, 0x52, 0x05, 0x78, 0x41, 0x78, 0x69, 0x73, 0x12,
	0x4c, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x1a, 0xa1, 0x02,
	0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x55, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x77, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x73, 0x2e, 0x42, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x4c, 0x6f, 0x67,
	0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x58,
	0x0a, 0x05, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x42, 0x61, 0x72, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x42, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0xa9, 0x01, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6c, 0x69,
	0x63, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f,
	0x6d, 0x61, 0x78, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x73, 0x50, 0x65, 0x72, 0x42, 0x61, 0x72, 0x12,
	0x4c, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0x8a, 0x02,
	0x0a, 0x08, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x12, 0x64, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x42, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73,
	0x42, 0x79, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x12, 0x6b, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73,
	0x2e, 0x42, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73,
	0x42, 0x79, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x79, 0x48, 0x00, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x1a, 0x0f, 0x0a,
	0x0d, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x1a, 0x11,
	0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x79, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xf1, 0x02, 0x0a, 0x05, 0x58,
	0x41, 0x78, 0x69, 0x73, 0x12, 0x60, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x73, 0x2e, 0x42, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x58, 0x41, 0x78, 0x69, 0x73,
	0x2e, 0x58, 0x41, 0x78, 0x69, 0x73, 0x42, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5d, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x73, 0x2e, 0x42, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x58, 0x41, 0x78, 0x69,
	0x73, 0x2e, 0x58, 0x41, 0x78, 0x69, 0x73, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x0e, 0x0a, 0x0c, 0x58, 0x41, 0x78, 0x69, 0x73, 0x42, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x8e, 0x01, 0x0a, 0x0b, 0x58, 0x41, 0x78, 0x69, 0x73, 0x42,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x48, 0x0a, 0x11,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xa7,
	0x03, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x62, 0x0a, 0x0c,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x0b, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x59, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c,
	0x6f, 0x67, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a,
	0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x12,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xd4, 0x03, 0x0a, 0x0a, 0x53, 0x70, 0x61,
	0x6e, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x62, 0x0a, 0x0c, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0b,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x5a, 0x0a, 0x0b, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x0b, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x5f,
	0x0a, 0x12, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x10, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x1a,
	0xd2, 0x02, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x62, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x77, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x6d,
	0x51, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x53, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x10, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_rawDescOnce sync.Once
	file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_rawDescData = file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_rawDesc
)

func file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_rawDescData)
	})
	return file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_rawDescData
}

var file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_goTypes = []interface{}{
	(*BarChart)(nil),                          // 0: com.coralogixapis.dashboards.v1.ast.widgets.BarChart
	(*BarChart_Query)(nil),                    // 1: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.Query
	(*BarChart_StackDefinition)(nil),          // 2: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.StackDefinition
	(*BarChart_ColorsBy)(nil),                 // 3: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.ColorsBy
	(*BarChart_XAxis)(nil),                    // 4: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.XAxis
	(*BarChart_LogsQuery)(nil),                // 5: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.LogsQuery
	(*BarChart_SpansQuery)(nil),               // 6: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.SpansQuery
	(*BarChart_MetricsQuery)(nil),             // 7: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.MetricsQuery
	(*BarChart_ColorsBy_ColorsByStack)(nil),   // 8: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.ColorsBy.ColorsByStack
	(*BarChart_ColorsBy_ColorsByGroupBy)(nil), // 9: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.ColorsBy.ColorsByGroupBy
	(*BarChart_XAxis_XAxisByValue)(nil),       // 10: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.XAxis.XAxisByValue
	(*BarChart_XAxis_XAxisByTime)(nil),        // 11: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.XAxis.XAxisByTime
	(*wrapperspb.Int32Value)(nil),             // 12: google.protobuf.Int32Value
	(*wrapperspb.StringValue)(nil),            // 13: google.protobuf.StringValue
	(ScaleType)(0),                            // 14: com.coralogixapis.dashboards.v1.ast.widgets.common.ScaleType
	(Unit)(0),                                 // 15: com.coralogixapis.dashboards.v1.ast.widgets.common.Unit
	(*LuceneQuery)(nil),                       // 16: com.coralogixapis.dashboards.v1.ast.widgets.common.LuceneQuery
	(*LogsAggregation)(nil),                   // 17: com.coralogixapis.dashboards.v1.common.LogsAggregation
	(*Filter_LogsFilter)(nil),                 // 18: com.coralogixapis.dashboards.v1.ast.Filter.LogsFilter
	(*SpansAggregation)(nil),                  // 19: com.coralogixapis.dashboards.v1.common.SpansAggregation
	(*Filter_SpansFilter)(nil),                // 20: com.coralogixapis.dashboards.v1.ast.Filter.SpansFilter
	(*SpanField)(nil),                         // 21: com.coralogixapis.dashboards.v1.common.SpanField
	(*PromQlQuery)(nil),                       // 22: com.coralogixapis.dashboards.v1.ast.widgets.common.PromQlQuery
	(*Filter_MetricsFilter)(nil),              // 23: com.coralogixapis.dashboards.v1.ast.Filter.MetricsFilter
	(*durationpb.Duration)(nil),               // 24: google.protobuf.Duration
}
var file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_depIdxs = []int32{
	1,  // 0: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.query:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.BarChart.Query
	12, // 1: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.max_bars_per_chart:type_name -> google.protobuf.Int32Value
	13, // 2: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.group_name_template:type_name -> google.protobuf.StringValue
	2,  // 3: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.stack_definition:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.BarChart.StackDefinition
	14, // 4: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.scale_type:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.common.ScaleType
	3,  // 5: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.colors_by:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.BarChart.ColorsBy
	4,  // 6: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.x_axis:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.BarChart.XAxis
	15, // 7: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.unit:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.common.Unit
	5,  // 8: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.Query.logs:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.BarChart.LogsQuery
	6,  // 9: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.Query.spans:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.BarChart.SpansQuery
	7,  // 10: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.Query.metrics:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.BarChart.MetricsQuery
	12, // 11: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.StackDefinition.max_slices_per_bar:type_name -> google.protobuf.Int32Value
	13, // 12: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.StackDefinition.stack_name_template:type_name -> google.protobuf.StringValue
	8,  // 13: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.ColorsBy.stack:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.BarChart.ColorsBy.ColorsByStack
	9,  // 14: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.ColorsBy.group_by:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.BarChart.ColorsBy.ColorsByGroupBy
	10, // 15: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.XAxis.value:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.BarChart.XAxis.XAxisByValue
	11, // 16: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.XAxis.time:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.BarChart.XAxis.XAxisByTime
	16, // 17: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.LogsQuery.lucene_query:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.common.LuceneQuery
	17, // 18: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.LogsQuery.aggregation:type_name -> com.coralogixapis.dashboards.v1.common.LogsAggregation
	18, // 19: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.LogsQuery.filters:type_name -> com.coralogixapis.dashboards.v1.ast.Filter.LogsFilter
	13, // 20: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.LogsQuery.group_names:type_name -> google.protobuf.StringValue
	13, // 21: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.LogsQuery.stacked_group_name:type_name -> google.protobuf.StringValue
	16, // 22: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.SpansQuery.lucene_query:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.common.LuceneQuery
	19, // 23: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.SpansQuery.aggregation:type_name -> com.coralogixapis.dashboards.v1.common.SpansAggregation
	20, // 24: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.SpansQuery.filters:type_name -> com.coralogixapis.dashboards.v1.ast.Filter.SpansFilter
	21, // 25: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.SpansQuery.group_names:type_name -> com.coralogixapis.dashboards.v1.common.SpanField
	21, // 26: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.SpansQuery.stacked_group_name:type_name -> com.coralogixapis.dashboards.v1.common.SpanField
	22, // 27: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.MetricsQuery.promql_query:type_name -> com.coralogixapis.dashboards.v1.ast.widgets.common.PromQlQuery
	23, // 28: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.MetricsQuery.filters:type_name -> com.coralogixapis.dashboards.v1.ast.Filter.MetricsFilter
	13, // 29: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.MetricsQuery.group_names:type_name -> google.protobuf.StringValue
	13, // 30: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.MetricsQuery.stacked_group_name:type_name -> google.protobuf.StringValue
	24, // 31: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.XAxis.XAxisByTime.interval:type_name -> google.protobuf.Duration
	12, // 32: com.coralogixapis.dashboards.v1.ast.widgets.BarChart.XAxis.XAxisByTime.buckets_presented:type_name -> google.protobuf.Int32Value
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_init() }
func file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_init() {
	if File_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto != nil {
		return
	}
	file_com_coralogixapis_dashboards_v1_ast_filter_proto_init()
	file_com_coralogixapis_dashboards_v1_ast_widgets_common_queries_proto_init()
	file_com_coralogixapis_dashboards_v1_ast_widgets_common_scale_proto_init()
	file_com_coralogixapis_dashboards_v1_ast_widgets_common_units_proto_init()
	file_com_coralogixapis_dashboards_v1_common_logs_aggregation_proto_init()
	file_com_coralogixapis_dashboards_v1_common_span_field_proto_init()
	file_com_coralogixapis_dashboards_v1_common_spans_aggregation_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BarChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BarChart_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BarChart_StackDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BarChart_ColorsBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BarChart_XAxis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BarChart_LogsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BarChart_SpansQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BarChart_MetricsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BarChart_ColorsBy_ColorsByStack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BarChart_ColorsBy_ColorsByGroupBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BarChart_XAxis_XAxisByValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BarChart_XAxis_XAxisByTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*BarChart_Query_Logs)(nil),
		(*BarChart_Query_Spans)(nil),
		(*BarChart_Query_Metrics)(nil),
	}
	file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*BarChart_ColorsBy_Stack)(nil),
		(*BarChart_ColorsBy_GroupBy)(nil),
	}
	file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*BarChart_XAxis_Value)(nil),
		(*BarChart_XAxis_Time)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_depIdxs,
		MessageInfos:      file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto = out.File
	file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_rawDesc = nil
	file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_goTypes = nil
	file_com_coralogixapis_dashboards_v1_ast_widgets_bar_chart_proto_depIdxs = nil
}
