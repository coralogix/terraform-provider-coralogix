// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: com/coralogixapis/dashboards/v1/services/logs_data_source_service.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogsDataSourceServiceClient is the client API for LogsDataSourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogsDataSourceServiceClient interface {
	SearchLogsTimeSeries(ctx context.Context, in *SearchLogsTimeSeriesRequest, opts ...grpc.CallOption) (*SearchLogsTimeSeriesResponse, error)
	SearchLogsEvents(ctx context.Context, in *SearchLogsEventsRequest, opts ...grpc.CallOption) (*SearchLogsEventsResponse, error)
}

type logsDataSourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogsDataSourceServiceClient(cc grpc.ClientConnInterface) LogsDataSourceServiceClient {
	return &logsDataSourceServiceClient{cc}
}

func (c *logsDataSourceServiceClient) SearchLogsTimeSeries(ctx context.Context, in *SearchLogsTimeSeriesRequest, opts ...grpc.CallOption) (*SearchLogsTimeSeriesResponse, error) {
	out := new(SearchLogsTimeSeriesResponse)
	err := c.cc.Invoke(ctx, "/com.coralogixapis.dashboards.v1.services.LogsDataSourceService/SearchLogsTimeSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logsDataSourceServiceClient) SearchLogsEvents(ctx context.Context, in *SearchLogsEventsRequest, opts ...grpc.CallOption) (*SearchLogsEventsResponse, error) {
	out := new(SearchLogsEventsResponse)
	err := c.cc.Invoke(ctx, "/com.coralogixapis.dashboards.v1.services.LogsDataSourceService/SearchLogsEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogsDataSourceServiceServer is the server API for LogsDataSourceService service.
// All implementations must embed UnimplementedLogsDataSourceServiceServer
// for forward compatibility
type LogsDataSourceServiceServer interface {
	SearchLogsTimeSeries(context.Context, *SearchLogsTimeSeriesRequest) (*SearchLogsTimeSeriesResponse, error)
	SearchLogsEvents(context.Context, *SearchLogsEventsRequest) (*SearchLogsEventsResponse, error)
	mustEmbedUnimplementedLogsDataSourceServiceServer()
}

// UnimplementedLogsDataSourceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogsDataSourceServiceServer struct {
}

func (UnimplementedLogsDataSourceServiceServer) SearchLogsTimeSeries(context.Context, *SearchLogsTimeSeriesRequest) (*SearchLogsTimeSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLogsTimeSeries not implemented")
}
func (UnimplementedLogsDataSourceServiceServer) SearchLogsEvents(context.Context, *SearchLogsEventsRequest) (*SearchLogsEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLogsEvents not implemented")
}
func (UnimplementedLogsDataSourceServiceServer) mustEmbedUnimplementedLogsDataSourceServiceServer() {}

// UnsafeLogsDataSourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogsDataSourceServiceServer will
// result in compilation errors.
type UnsafeLogsDataSourceServiceServer interface {
	mustEmbedUnimplementedLogsDataSourceServiceServer()
}

func RegisterLogsDataSourceServiceServer(s grpc.ServiceRegistrar, srv LogsDataSourceServiceServer) {
	s.RegisterService(&LogsDataSourceService_ServiceDesc, srv)
}

func _LogsDataSourceService_SearchLogsTimeSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLogsTimeSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogsDataSourceServiceServer).SearchLogsTimeSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogixapis.dashboards.v1.services.LogsDataSourceService/SearchLogsTimeSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogsDataSourceServiceServer).SearchLogsTimeSeries(ctx, req.(*SearchLogsTimeSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogsDataSourceService_SearchLogsEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLogsEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogsDataSourceServiceServer).SearchLogsEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coralogixapis.dashboards.v1.services.LogsDataSourceService/SearchLogsEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogsDataSourceServiceServer).SearchLogsEvents(ctx, req.(*SearchLogsEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogsDataSourceService_ServiceDesc is the grpc.ServiceDesc for LogsDataSourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogsDataSourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogixapis.dashboards.v1.services.LogsDataSourceService",
	HandlerType: (*LogsDataSourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchLogsTimeSeries",
			Handler:    _LogsDataSourceService_SearchLogsTimeSeries_Handler,
		},
		{
			MethodName: "SearchLogsEvents",
			Handler:    _LogsDataSourceService_SearchLogsEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogixapis/dashboards/v1/services/logs_data_source_service.proto",
}
