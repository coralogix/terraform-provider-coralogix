// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: groups.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RuleGroupsClient is the client API for RuleGroups service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuleGroupsClient interface {
	Save(ctx context.Context, in *RecordingRuleGroup, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *DeleteRuleGroup, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RuleGroupListing, error)
	Fetch(ctx context.Context, in *FetchRuleGroup, opts ...grpc.CallOption) (*FetchRuleGroupResult, error)
}

type ruleGroupsClient struct {
	cc grpc.ClientConnInterface
}

func NewRuleGroupsClient(cc grpc.ClientConnInterface) RuleGroupsClient {
	return &ruleGroupsClient{cc}
}

func (c *ruleGroupsClient) Save(ctx context.Context, in *RecordingRuleGroup, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rule_manager.groups.RuleGroups/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleGroupsClient) Delete(ctx context.Context, in *DeleteRuleGroup, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rule_manager.groups.RuleGroups/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleGroupsClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RuleGroupListing, error) {
	out := new(RuleGroupListing)
	err := c.cc.Invoke(ctx, "/rule_manager.groups.RuleGroups/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleGroupsClient) Fetch(ctx context.Context, in *FetchRuleGroup, opts ...grpc.CallOption) (*FetchRuleGroupResult, error) {
	out := new(FetchRuleGroupResult)
	err := c.cc.Invoke(ctx, "/rule_manager.groups.RuleGroups/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuleGroupsServer is the server API for RuleGroups service.
// All implementations must embed UnimplementedRuleGroupsServer
// for forward compatibility
type RuleGroupsServer interface {
	Save(context.Context, *RecordingRuleGroup) (*emptypb.Empty, error)
	Delete(context.Context, *DeleteRuleGroup) (*emptypb.Empty, error)
	List(context.Context, *emptypb.Empty) (*RuleGroupListing, error)
	Fetch(context.Context, *FetchRuleGroup) (*FetchRuleGroupResult, error)
	mustEmbedUnimplementedRuleGroupsServer()
}

// UnimplementedRuleGroupsServer must be embedded to have forward compatible implementations.
type UnimplementedRuleGroupsServer struct {
}

func (UnimplementedRuleGroupsServer) Save(context.Context, *RecordingRuleGroup) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedRuleGroupsServer) Delete(context.Context, *DeleteRuleGroup) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRuleGroupsServer) List(context.Context, *emptypb.Empty) (*RuleGroupListing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRuleGroupsServer) Fetch(context.Context, *FetchRuleGroup) (*FetchRuleGroupResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedRuleGroupsServer) mustEmbedUnimplementedRuleGroupsServer() {}

// UnsafeRuleGroupsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuleGroupsServer will
// result in compilation errors.
type UnsafeRuleGroupsServer interface {
	mustEmbedUnimplementedRuleGroupsServer()
}

func RegisterRuleGroupsServer(s grpc.ServiceRegistrar, srv RuleGroupsServer) {
	s.RegisterService(&RuleGroups_ServiceDesc, srv)
}

func _RuleGroups_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordingRuleGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleGroupsServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_manager.groups.RuleGroups/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleGroupsServer).Save(ctx, req.(*RecordingRuleGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleGroups_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRuleGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleGroupsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_manager.groups.RuleGroups/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleGroupsServer).Delete(ctx, req.(*DeleteRuleGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleGroups_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleGroupsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_manager.groups.RuleGroups/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleGroupsServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleGroups_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRuleGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleGroupsServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_manager.groups.RuleGroups/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleGroupsServer).Fetch(ctx, req.(*FetchRuleGroup))
	}
	return interceptor(ctx, in, info, handler)
}

// RuleGroups_ServiceDesc is the grpc.ServiceDesc for RuleGroups service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuleGroups_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rule_manager.groups.RuleGroups",
	HandlerType: (*RuleGroupsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _RuleGroups_Save_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RuleGroups_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _RuleGroups_List_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _RuleGroups_Fetch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "groups.proto",
}
