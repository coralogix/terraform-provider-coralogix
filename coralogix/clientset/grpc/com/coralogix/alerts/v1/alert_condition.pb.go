// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: com/coralogix/alerts/v1/alert_condition.proto

package __

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Timeframe int32

const (
	Timeframe_TIMEFRAME_5_MIN_OR_UNSPECIFIED Timeframe = 0
	Timeframe_TIMEFRAME_1_MIN                Timeframe = 18
	Timeframe_TIMEFRAME_2_MIN                Timeframe = 19
	Timeframe_TIMEFRAME_10_MIN               Timeframe = 1
	Timeframe_TIMEFRAME_15_MIN               Timeframe = 17
	Timeframe_TIMEFRAME_20_MIN               Timeframe = 2
	Timeframe_TIMEFRAME_30_MIN               Timeframe = 3
	Timeframe_TIMEFRAME_1_H                  Timeframe = 4
	Timeframe_TIMEFRAME_2_H                  Timeframe = 5
	Timeframe_TIMEFRAME_3_H                  Timeframe = 6
	Timeframe_TIMEFRAME_4_H                  Timeframe = 7
	Timeframe_TIMEFRAME_6_H                  Timeframe = 8
	Timeframe_TIMEFRAME_12_H                 Timeframe = 9
	Timeframe_TIMEFRAME_24_H                 Timeframe = 10
	Timeframe_TIMEFRAME_36_H                 Timeframe = 20
	Timeframe_TIMEFRAME_48_H                 Timeframe = 11
	Timeframe_TIMEFRAME_72_H                 Timeframe = 12
	Timeframe_TIMEFRAME_1_W                  Timeframe = 13
	Timeframe_TIMEFRAME_1_M                  Timeframe = 14
	Timeframe_TIMEFRAME_2_M                  Timeframe = 15
	Timeframe_TIMEFRAME_3_M                  Timeframe = 16
)

// Enum value maps for Timeframe.
var (
	Timeframe_name = map[int32]string{
		0:  "TIMEFRAME_5_MIN_OR_UNSPECIFIED",
		18: "TIMEFRAME_1_MIN",
		19: "TIMEFRAME_2_MIN",
		1:  "TIMEFRAME_10_MIN",
		17: "TIMEFRAME_15_MIN",
		2:  "TIMEFRAME_20_MIN",
		3:  "TIMEFRAME_30_MIN",
		4:  "TIMEFRAME_1_H",
		5:  "TIMEFRAME_2_H",
		6:  "TIMEFRAME_3_H",
		7:  "TIMEFRAME_4_H",
		8:  "TIMEFRAME_6_H",
		9:  "TIMEFRAME_12_H",
		10: "TIMEFRAME_24_H",
		20: "TIMEFRAME_36_H",
		11: "TIMEFRAME_48_H",
		12: "TIMEFRAME_72_H",
		13: "TIMEFRAME_1_W",
		14: "TIMEFRAME_1_M",
		15: "TIMEFRAME_2_M",
		16: "TIMEFRAME_3_M",
	}
	Timeframe_value = map[string]int32{
		"TIMEFRAME_5_MIN_OR_UNSPECIFIED": 0,
		"TIMEFRAME_1_MIN":                18,
		"TIMEFRAME_2_MIN":                19,
		"TIMEFRAME_10_MIN":               1,
		"TIMEFRAME_15_MIN":               17,
		"TIMEFRAME_20_MIN":               2,
		"TIMEFRAME_30_MIN":               3,
		"TIMEFRAME_1_H":                  4,
		"TIMEFRAME_2_H":                  5,
		"TIMEFRAME_3_H":                  6,
		"TIMEFRAME_4_H":                  7,
		"TIMEFRAME_6_H":                  8,
		"TIMEFRAME_12_H":                 9,
		"TIMEFRAME_24_H":                 10,
		"TIMEFRAME_36_H":                 20,
		"TIMEFRAME_48_H":                 11,
		"TIMEFRAME_72_H":                 12,
		"TIMEFRAME_1_W":                  13,
		"TIMEFRAME_1_M":                  14,
		"TIMEFRAME_2_M":                  15,
		"TIMEFRAME_3_M":                  16,
	}
)

func (x Timeframe) Enum() *Timeframe {
	p := new(Timeframe)
	*p = x
	return p
}

func (x Timeframe) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Timeframe) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_alerts_v1_alert_condition_proto_enumTypes[0].Descriptor()
}

func (Timeframe) Type() protoreflect.EnumType {
	return &file_com_coralogix_alerts_v1_alert_condition_proto_enumTypes[0]
}

func (x Timeframe) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Timeframe.Descriptor instead.
func (Timeframe) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_alerts_v1_alert_condition_proto_rawDescGZIP(), []int{0}
}

type RelativeTimeframe int32

const (
	RelativeTimeframe_RELATIVE_TIMEFRAME_HOUR_OR_UNSPECIFIED RelativeTimeframe = 0
	RelativeTimeframe_RELATIVE_TIMEFRAME_DAY                 RelativeTimeframe = 1
	RelativeTimeframe_RELATIVE_TIMEFRAME_WEEK                RelativeTimeframe = 2
	RelativeTimeframe_RELATIVE_TIMEFRAME_MONTH               RelativeTimeframe = 3
)

// Enum value maps for RelativeTimeframe.
var (
	RelativeTimeframe_name = map[int32]string{
		0: "RELATIVE_TIMEFRAME_HOUR_OR_UNSPECIFIED",
		1: "RELATIVE_TIMEFRAME_DAY",
		2: "RELATIVE_TIMEFRAME_WEEK",
		3: "RELATIVE_TIMEFRAME_MONTH",
	}
	RelativeTimeframe_value = map[string]int32{
		"RELATIVE_TIMEFRAME_HOUR_OR_UNSPECIFIED": 0,
		"RELATIVE_TIMEFRAME_DAY":                 1,
		"RELATIVE_TIMEFRAME_WEEK":                2,
		"RELATIVE_TIMEFRAME_MONTH":               3,
	}
)

func (x RelativeTimeframe) Enum() *RelativeTimeframe {
	p := new(RelativeTimeframe)
	*p = x
	return p
}

func (x RelativeTimeframe) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelativeTimeframe) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_alerts_v1_alert_condition_proto_enumTypes[1].Descriptor()
}

func (RelativeTimeframe) Type() protoreflect.EnumType {
	return &file_com_coralogix_alerts_v1_alert_condition_proto_enumTypes[1]
}

func (x RelativeTimeframe) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelativeTimeframe.Descriptor instead.
func (RelativeTimeframe) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_alerts_v1_alert_condition_proto_rawDescGZIP(), []int{1}
}

type CleanupDeadmanDuration int32

const (
	CleanupDeadmanDuration_CLEANUP_DEADMAN_DURATION_NEVER_OR_UNSPECIFIED CleanupDeadmanDuration = 0
	CleanupDeadmanDuration_CLEANUP_DEADMAN_DURATION_5MIN                 CleanupDeadmanDuration = 1
	CleanupDeadmanDuration_CLEANUP_DEADMAN_DURATION_10MIN                CleanupDeadmanDuration = 2
	CleanupDeadmanDuration_CLEANUP_DEADMAN_DURATION_1H                   CleanupDeadmanDuration = 3
	CleanupDeadmanDuration_CLEANUP_DEADMAN_DURATION_2H                   CleanupDeadmanDuration = 4
	CleanupDeadmanDuration_CLEANUP_DEADMAN_DURATION_6H                   CleanupDeadmanDuration = 5
	CleanupDeadmanDuration_CLEANUP_DEADMAN_DURATION_12H                  CleanupDeadmanDuration = 6
	CleanupDeadmanDuration_CLEANUP_DEADMAN_DURATION_24H                  CleanupDeadmanDuration = 7
)

// Enum value maps for CleanupDeadmanDuration.
var (
	CleanupDeadmanDuration_name = map[int32]string{
		0: "CLEANUP_DEADMAN_DURATION_NEVER_OR_UNSPECIFIED",
		1: "CLEANUP_DEADMAN_DURATION_5MIN",
		2: "CLEANUP_DEADMAN_DURATION_10MIN",
		3: "CLEANUP_DEADMAN_DURATION_1H",
		4: "CLEANUP_DEADMAN_DURATION_2H",
		5: "CLEANUP_DEADMAN_DURATION_6H",
		6: "CLEANUP_DEADMAN_DURATION_12H",
		7: "CLEANUP_DEADMAN_DURATION_24H",
	}
	CleanupDeadmanDuration_value = map[string]int32{
		"CLEANUP_DEADMAN_DURATION_NEVER_OR_UNSPECIFIED": 0,
		"CLEANUP_DEADMAN_DURATION_5MIN":                 1,
		"CLEANUP_DEADMAN_DURATION_10MIN":                2,
		"CLEANUP_DEADMAN_DURATION_1H":                   3,
		"CLEANUP_DEADMAN_DURATION_2H":                   4,
		"CLEANUP_DEADMAN_DURATION_6H":                   5,
		"CLEANUP_DEADMAN_DURATION_12H":                  6,
		"CLEANUP_DEADMAN_DURATION_24H":                  7,
	}
)

func (x CleanupDeadmanDuration) Enum() *CleanupDeadmanDuration {
	p := new(CleanupDeadmanDuration)
	*p = x
	return p
}

func (x CleanupDeadmanDuration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CleanupDeadmanDuration) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_alerts_v1_alert_condition_proto_enumTypes[2].Descriptor()
}

func (CleanupDeadmanDuration) Type() protoreflect.EnumType {
	return &file_com_coralogix_alerts_v1_alert_condition_proto_enumTypes[2]
}

func (x CleanupDeadmanDuration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CleanupDeadmanDuration.Descriptor instead.
func (CleanupDeadmanDuration) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_alerts_v1_alert_condition_proto_rawDescGZIP(), []int{2}
}

type MetricAlertConditionParameters_MetricSource int32

const (
	MetricAlertConditionParameters_METRIC_SOURCE_LOGS2METRICS_OR_UNSPECIFIED MetricAlertConditionParameters_MetricSource = 0
	MetricAlertConditionParameters_METRIC_SOURCE_PROMETHEUS                  MetricAlertConditionParameters_MetricSource = 1
)

// Enum value maps for MetricAlertConditionParameters_MetricSource.
var (
	MetricAlertConditionParameters_MetricSource_name = map[int32]string{
		0: "METRIC_SOURCE_LOGS2METRICS_OR_UNSPECIFIED",
		1: "METRIC_SOURCE_PROMETHEUS",
	}
	MetricAlertConditionParameters_MetricSource_value = map[string]int32{
		"METRIC_SOURCE_LOGS2METRICS_OR_UNSPECIFIED": 0,
		"METRIC_SOURCE_PROMETHEUS":                  1,
	}
)

func (x MetricAlertConditionParameters_MetricSource) Enum() *MetricAlertConditionParameters_MetricSource {
	p := new(MetricAlertConditionParameters_MetricSource)
	*p = x
	return p
}

func (x MetricAlertConditionParameters_MetricSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricAlertConditionParameters_MetricSource) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_alerts_v1_alert_condition_proto_enumTypes[3].Descriptor()
}

func (MetricAlertConditionParameters_MetricSource) Type() protoreflect.EnumType {
	return &file_com_coralogix_alerts_v1_alert_condition_proto_enumTypes[3]
}

func (x MetricAlertConditionParameters_MetricSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricAlertConditionParameters_MetricSource.Descriptor instead.
func (MetricAlertConditionParameters_MetricSource) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_alerts_v1_alert_condition_proto_rawDescGZIP(), []int{9, 0}
}

type MetricAlertConditionParameters_ArithmeticOperator int32

const (
	MetricAlertConditionParameters_ARITHMETIC_OPERATOR_AVG_OR_UNSPECIFIED MetricAlertConditionParameters_ArithmeticOperator = 0
	MetricAlertConditionParameters_ARITHMETIC_OPERATOR_MIN                MetricAlertConditionParameters_ArithmeticOperator = 1
	MetricAlertConditionParameters_ARITHMETIC_OPERATOR_MAX                MetricAlertConditionParameters_ArithmeticOperator = 2
	MetricAlertConditionParameters_ARITHMETIC_OPERATOR_SUM                MetricAlertConditionParameters_ArithmeticOperator = 3
	MetricAlertConditionParameters_ARITHMETIC_OPERATOR_COUNT              MetricAlertConditionParameters_ArithmeticOperator = 4
	MetricAlertConditionParameters_ARITHMETIC_OPERATOR_PERCENTILE         MetricAlertConditionParameters_ArithmeticOperator = 5
)

// Enum value maps for MetricAlertConditionParameters_ArithmeticOperator.
var (
	MetricAlertConditionParameters_ArithmeticOperator_name = map[int32]string{
		0: "ARITHMETIC_OPERATOR_AVG_OR_UNSPECIFIED",
		1: "ARITHMETIC_OPERATOR_MIN",
		2: "ARITHMETIC_OPERATOR_MAX",
		3: "ARITHMETIC_OPERATOR_SUM",
		4: "ARITHMETIC_OPERATOR_COUNT",
		5: "ARITHMETIC_OPERATOR_PERCENTILE",
	}
	MetricAlertConditionParameters_ArithmeticOperator_value = map[string]int32{
		"ARITHMETIC_OPERATOR_AVG_OR_UNSPECIFIED": 0,
		"ARITHMETIC_OPERATOR_MIN":                1,
		"ARITHMETIC_OPERATOR_MAX":                2,
		"ARITHMETIC_OPERATOR_SUM":                3,
		"ARITHMETIC_OPERATOR_COUNT":              4,
		"ARITHMETIC_OPERATOR_PERCENTILE":         5,
	}
)

func (x MetricAlertConditionParameters_ArithmeticOperator) Enum() *MetricAlertConditionParameters_ArithmeticOperator {
	p := new(MetricAlertConditionParameters_ArithmeticOperator)
	*p = x
	return p
}

func (x MetricAlertConditionParameters_ArithmeticOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricAlertConditionParameters_ArithmeticOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_alerts_v1_alert_condition_proto_enumTypes[4].Descriptor()
}

func (MetricAlertConditionParameters_ArithmeticOperator) Type() protoreflect.EnumType {
	return &file_com_coralogix_alerts_v1_alert_condition_proto_enumTypes[4]
}

func (x MetricAlertConditionParameters_ArithmeticOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricAlertConditionParameters_ArithmeticOperator.Descriptor instead.
func (MetricAlertConditionParameters_ArithmeticOperator) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_alerts_v1_alert_condition_proto_rawDescGZIP(), []int{9, 1}
}

type AlertCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Condition:
	//	*AlertCondition_Immediate
	//	*AlertCondition_LessThan
	//	*AlertCondition_MoreThan
	//	*AlertCondition_MoreThanUsual
	//	*AlertCondition_NewValue
	//	*AlertCondition_Flow
	//	*AlertCondition_UniqueCount
	Condition isAlertCondition_Condition `protobuf_oneof:"condition"`
}

func (x *AlertCondition) Reset() {
	*x = AlertCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertCondition) ProtoMessage() {}

func (x *AlertCondition) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertCondition.ProtoReflect.Descriptor instead.
func (*AlertCondition) Descriptor() ([]byte, []int) {
	return file_com_coralogix_alerts_v1_alert_condition_proto_rawDescGZIP(), []int{0}
}

func (m *AlertCondition) GetCondition() isAlertCondition_Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (x *AlertCondition) GetImmediate() *ImmediateCondition {
	if x, ok := x.GetCondition().(*AlertCondition_Immediate); ok {
		return x.Immediate
	}
	return nil
}

func (x *AlertCondition) GetLessThan() *LessThanCondition {
	if x, ok := x.GetCondition().(*AlertCondition_LessThan); ok {
		return x.LessThan
	}
	return nil
}

func (x *AlertCondition) GetMoreThan() *MoreThanCondition {
	if x, ok := x.GetCondition().(*AlertCondition_MoreThan); ok {
		return x.MoreThan
	}
	return nil
}

func (x *AlertCondition) GetMoreThanUsual() *MoreThanUsualCondition {
	if x, ok := x.GetCondition().(*AlertCondition_MoreThanUsual); ok {
		return x.MoreThanUsual
	}
	return nil
}

func (x *AlertCondition) GetNewValue() *NewValueCondition {
	if x, ok := x.GetCondition().(*AlertCondition_NewValue); ok {
		return x.NewValue
	}
	return nil
}

func (x *AlertCondition) GetFlow() *FlowCondition {
	if x, ok := x.GetCondition().(*AlertCondition_Flow); ok {
		return x.Flow
	}
	return nil
}

func (x *AlertCondition) GetUniqueCount() *UniqueCountCondition {
	if x, ok := x.GetCondition().(*AlertCondition_UniqueCount); ok {
		return x.UniqueCount
	}
	return nil
}

type isAlertCondition_Condition interface {
	isAlertCondition_Condition()
}

type AlertCondition_Immediate struct {
	Immediate *ImmediateCondition `protobuf:"bytes,1,opt,name=immediate,proto3,oneof"`
}

type AlertCondition_LessThan struct {
	LessThan *LessThanCondition `protobuf:"bytes,2,opt,name=less_than,json=lessThan,proto3,oneof"`
}

type AlertCondition_MoreThan struct {
	MoreThan *MoreThanCondition `protobuf:"bytes,3,opt,name=more_than,json=moreThan,proto3,oneof"`
}

type AlertCondition_MoreThanUsual struct {
	MoreThanUsual *MoreThanUsualCondition `protobuf:"bytes,4,opt,name=more_than_usual,json=moreThanUsual,proto3,oneof"`
}

type AlertCondition_NewValue struct {
	NewValue *NewValueCondition `protobuf:"bytes,5,opt,name=new_value,json=newValue,proto3,oneof"`
}

type AlertCondition_Flow struct {
	Flow *FlowCondition `protobuf:"bytes,6,opt,name=flow,proto3,oneof"`
}

type AlertCondition_UniqueCount struct {
	UniqueCount *UniqueCountCondition `protobuf:"bytes,7,opt,name=unique_count,json=uniqueCount,proto3,oneof"`
}

func (*AlertCondition_Immediate) isAlertCondition_Condition() {}

func (*AlertCondition_LessThan) isAlertCondition_Condition() {}

func (*AlertCondition_MoreThan) isAlertCondition_Condition() {}

func (*AlertCondition_MoreThanUsual) isAlertCondition_Condition() {}

func (*AlertCondition_NewValue) isAlertCondition_Condition() {}

func (*AlertCondition_Flow) isAlertCondition_Condition() {}

func (*AlertCondition_UniqueCount) isAlertCondition_Condition() {}

type ImmediateCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImmediateCondition) Reset() {
	*x = ImmediateCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmediateCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmediateCondition) ProtoMessage() {}

func (x *ImmediateCondition) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmediateCondition.ProtoReflect.Descriptor instead.
func (*ImmediateCondition) Descriptor() ([]byte, []int) {
	return file_com_coralogix_alerts_v1_alert_condition_proto_rawDescGZIP(), []int{1}
}

type LessThanCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameters *ConditionParameters `protobuf:"bytes,1,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *LessThanCondition) Reset() {
	*x = LessThanCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LessThanCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LessThanCondition) ProtoMessage() {}

func (x *LessThanCondition) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LessThanCondition.ProtoReflect.Descriptor instead.
func (*LessThanCondition) Descriptor() ([]byte, []int) {
	return file_com_coralogix_alerts_v1_alert_condition_proto_rawDescGZIP(), []int{2}
}

func (x *LessThanCondition) GetParameters() *ConditionParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type MoreThanCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameters *ConditionParameters `protobuf:"bytes,1,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *MoreThanCondition) Reset() {
	*x = MoreThanCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoreThanCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoreThanCondition) ProtoMessage() {}

func (x *MoreThanCondition) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoreThanCondition.ProtoReflect.Descriptor instead.
func (*MoreThanCondition) Descriptor() ([]byte, []int) {
	return file_com_coralogix_alerts_v1_alert_condition_proto_rawDescGZIP(), []int{3}
}

func (x *MoreThanCondition) GetParameters() *ConditionParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type MoreThanUsualCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameters *ConditionParameters `protobuf:"bytes,1,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *MoreThanUsualCondition) Reset() {
	*x = MoreThanUsualCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoreThanUsualCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoreThanUsualCondition) ProtoMessage() {}

func (x *MoreThanUsualCondition) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoreThanUsualCondition.ProtoReflect.Descriptor instead.
func (*MoreThanUsualCondition) Descriptor() ([]byte, []int) {
	return file_com_coralogix_alerts_v1_alert_condition_proto_rawDescGZIP(), []int{4}
}

func (x *MoreThanUsualCondition) GetParameters() *ConditionParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type NewValueCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameters *ConditionParameters `protobuf:"bytes,1,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *NewValueCondition) Reset() {
	*x = NewValueCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewValueCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewValueCondition) ProtoMessage() {}

func (x *NewValueCondition) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewValueCondition.ProtoReflect.Descriptor instead.
func (*NewValueCondition) Descriptor() ([]byte, []int) {
	return file_com_coralogix_alerts_v1_alert_condition_proto_rawDescGZIP(), []int{5}
}

func (x *NewValueCondition) GetParameters() *ConditionParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type UniqueCountCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameters *ConditionParameters `protobuf:"bytes,1,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *UniqueCountCondition) Reset() {
	*x = UniqueCountCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniqueCountCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueCountCondition) ProtoMessage() {}

func (x *UniqueCountCondition) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueCountCondition.ProtoReflect.Descriptor instead.
func (*UniqueCountCondition) Descriptor() ([]byte, []int) {
	return file_com_coralogix_alerts_v1_alert_condition_proto_rawDescGZIP(), []int{6}
}

func (x *UniqueCountCondition) GetParameters() *ConditionParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type FlowCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stages []*FlowStage `protobuf:"bytes,1,rep,name=stages,proto3" json:"stages,omitempty"`
}

func (x *FlowCondition) Reset() {
	*x = FlowCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowCondition) ProtoMessage() {}

func (x *FlowCondition) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowCondition.ProtoReflect.Descriptor instead.
func (*FlowCondition) Descriptor() ([]byte, []int) {
	return file_com_coralogix_alerts_v1_alert_condition_proto_rawDescGZIP(), []int{7}
}

func (x *FlowCondition) GetStages() []*FlowStage {
	if x != nil {
		return x.Stages
	}
	return nil
}

type ConditionParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threshold                         *wrapperspb.DoubleValue               `protobuf:"bytes,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Timeframe                         Timeframe                             `protobuf:"varint,2,opt,name=timeframe,proto3,enum=com.coralogix.alerts.v1.Timeframe" json:"timeframe,omitempty"`
	GroupBy                           []*wrapperspb.StringValue             `protobuf:"bytes,3,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	MetricAlertParameters             *MetricAlertConditionParameters       `protobuf:"bytes,4,opt,name=metric_alert_parameters,json=metricAlertParameters,proto3" json:"metric_alert_parameters,omitempty"`
	MetricAlertPromqlParameters       *MetricAlertPromqlConditionParameters `protobuf:"bytes,5,opt,name=metric_alert_promql_parameters,json=metricAlertPromqlParameters,proto3" json:"metric_alert_promql_parameters,omitempty"`
	NotifyOnResolved                  *wrapperspb.BoolValue                 `protobuf:"bytes,6,opt,name=notify_on_resolved,json=notifyOnResolved,proto3" json:"notify_on_resolved,omitempty"`
	IgnoreInfinity                    *wrapperspb.BoolValue                 `protobuf:"bytes,7,opt,name=ignore_infinity,json=ignoreInfinity,proto3" json:"ignore_infinity,omitempty"`
	RelativeTimeframe                 RelativeTimeframe                     `protobuf:"varint,8,opt,name=relative_timeframe,json=relativeTimeframe,proto3,enum=com.coralogix.alerts.v1.RelativeTimeframe" json:"relative_timeframe,omitempty"`
	NotifyGroupByOnlyAlerts           *wrapperspb.BoolValue                 `protobuf:"bytes,9,opt,name=notify_group_by_only_alerts,json=notifyGroupByOnlyAlerts,proto3" json:"notify_group_by_only_alerts,omitempty"`
	NotifyPerGroupByValue             *wrapperspb.BoolValue                 `protobuf:"bytes,10,opt,name=notify_per_group_by_value,json=notifyPerGroupByValue,proto3" json:"notify_per_group_by_value,omitempty"`
	CardinalityFields                 []*wrapperspb.StringValue             `protobuf:"bytes,11,rep,name=cardinality_fields,json=cardinalityFields,proto3" json:"cardinality_fields,omitempty"`
	MaxUniqueCountValuesForGroupByKey *wrapperspb.UInt32Value               `protobuf:"bytes,12,opt,name=max_unique_count_values_for_group_by_key,json=maxUniqueCountValuesForGroupByKey,proto3" json:"max_unique_count_values_for_group_by_key,omitempty"`
	RelatedExtendedData               *RelatedExtendedData                  `protobuf:"bytes,13,opt,name=related_extended_data,json=relatedExtendedData,proto3,oneof" json:"related_extended_data,omitempty"`
}

func (x *ConditionParameters) Reset() {
	*x = ConditionParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionParameters) ProtoMessage() {}

func (x *ConditionParameters) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionParameters.ProtoReflect.Descriptor instead.
func (*ConditionParameters) Descriptor() ([]byte, []int) {
	return file_com_coralogix_alerts_v1_alert_condition_proto_rawDescGZIP(), []int{8}
}

func (x *ConditionParameters) GetThreshold() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Threshold
	}
	return nil
}

func (x *ConditionParameters) GetTimeframe() Timeframe {
	if x != nil {
		return x.Timeframe
	}
	return Timeframe_TIMEFRAME_5_MIN_OR_UNSPECIFIED
}

func (x *ConditionParameters) GetGroupBy() []*wrapperspb.StringValue {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *ConditionParameters) GetMetricAlertParameters() *MetricAlertConditionParameters {
	if x != nil {
		return x.MetricAlertParameters
	}
	return nil
}

func (x *ConditionParameters) GetMetricAlertPromqlParameters() *MetricAlertPromqlConditionParameters {
	if x != nil {
		return x.MetricAlertPromqlParameters
	}
	return nil
}

func (x *ConditionParameters) GetNotifyOnResolved() *wrapperspb.BoolValue {
	if x != nil {
		return x.NotifyOnResolved
	}
	return nil
}

func (x *ConditionParameters) GetIgnoreInfinity() *wrapperspb.BoolValue {
	if x != nil {
		return x.IgnoreInfinity
	}
	return nil
}

func (x *ConditionParameters) GetRelativeTimeframe() RelativeTimeframe {
	if x != nil {
		return x.RelativeTimeframe
	}
	return RelativeTimeframe_RELATIVE_TIMEFRAME_HOUR_OR_UNSPECIFIED
}

func (x *ConditionParameters) GetNotifyGroupByOnlyAlerts() *wrapperspb.BoolValue {
	if x != nil {
		return x.NotifyGroupByOnlyAlerts
	}
	return nil
}

func (x *ConditionParameters) GetNotifyPerGroupByValue() *wrapperspb.BoolValue {
	if x != nil {
		return x.NotifyPerGroupByValue
	}
	return nil
}

func (x *ConditionParameters) GetCardinalityFields() []*wrapperspb.StringValue {
	if x != nil {
		return x.CardinalityFields
	}
	return nil
}

func (x *ConditionParameters) GetMaxUniqueCountValuesForGroupByKey() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxUniqueCountValuesForGroupByKey
	}
	return nil
}

func (x *ConditionParameters) GetRelatedExtendedData() *RelatedExtendedData {
	if x != nil {
		return x.RelatedExtendedData
	}
	return nil
}

type MetricAlertConditionParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricField                *wrapperspb.StringValue                           `protobuf:"bytes,1,opt,name=metric_field,json=metricField,proto3" json:"metric_field,omitempty"`
	MetricSource               MetricAlertConditionParameters_MetricSource       `protobuf:"varint,2,opt,name=metric_source,json=metricSource,proto3,enum=com.coralogix.alerts.v1.MetricAlertConditionParameters_MetricSource" json:"metric_source,omitempty"`
	ArithmeticOperator         MetricAlertConditionParameters_ArithmeticOperator `protobuf:"varint,3,opt,name=arithmetic_operator,json=arithmeticOperator,proto3,enum=com.coralogix.alerts.v1.MetricAlertConditionParameters_ArithmeticOperator" json:"arithmetic_operator,omitempty"`
	ArithmeticOperatorModifier *wrapperspb.UInt32Value                           `protobuf:"bytes,4,opt,name=arithmetic_operator_modifier,json=arithmeticOperatorModifier,proto3" json:"arithmetic_operator_modifier,omitempty"`
	SampleThresholdPercentage  *wrapperspb.UInt32Value                           `protobuf:"bytes,5,opt,name=sample_threshold_percentage,json=sampleThresholdPercentage,proto3" json:"sample_threshold_percentage,omitempty"`
	NonNullPercentage          *wrapperspb.UInt32Value                           `protobuf:"bytes,6,opt,name=non_null_percentage,json=nonNullPercentage,proto3" json:"non_null_percentage,omitempty"`
	SwapNullValues             *wrapperspb.BoolValue                             `protobuf:"bytes,7,opt,name=swap_null_values,json=swapNullValues,proto3" json:"swap_null_values,omitempty"`
}

func (x *MetricAlertConditionParameters) Reset() {
	*x = MetricAlertConditionParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricAlertConditionParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricAlertConditionParameters) ProtoMessage() {}

func (x *MetricAlertConditionParameters) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricAlertConditionParameters.ProtoReflect.Descriptor instead.
func (*MetricAlertConditionParameters) Descriptor() ([]byte, []int) {
	return file_com_coralogix_alerts_v1_alert_condition_proto_rawDescGZIP(), []int{9}
}

func (x *MetricAlertConditionParameters) GetMetricField() *wrapperspb.StringValue {
	if x != nil {
		return x.MetricField
	}
	return nil
}

func (x *MetricAlertConditionParameters) GetMetricSource() MetricAlertConditionParameters_MetricSource {
	if x != nil {
		return x.MetricSource
	}
	return MetricAlertConditionParameters_METRIC_SOURCE_LOGS2METRICS_OR_UNSPECIFIED
}

func (x *MetricAlertConditionParameters) GetArithmeticOperator() MetricAlertConditionParameters_ArithmeticOperator {
	if x != nil {
		return x.ArithmeticOperator
	}
	return MetricAlertConditionParameters_ARITHMETIC_OPERATOR_AVG_OR_UNSPECIFIED
}

func (x *MetricAlertConditionParameters) GetArithmeticOperatorModifier() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ArithmeticOperatorModifier
	}
	return nil
}

func (x *MetricAlertConditionParameters) GetSampleThresholdPercentage() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SampleThresholdPercentage
	}
	return nil
}

func (x *MetricAlertConditionParameters) GetNonNullPercentage() *wrapperspb.UInt32Value {
	if x != nil {
		return x.NonNullPercentage
	}
	return nil
}

func (x *MetricAlertConditionParameters) GetSwapNullValues() *wrapperspb.BoolValue {
	if x != nil {
		return x.SwapNullValues
	}
	return nil
}

type MetricAlertPromqlConditionParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PromqlText                 *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=promql_text,json=promqlText,proto3" json:"promql_text,omitempty"`
	ArithmeticOperatorModifier *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=arithmetic_operator_modifier,json=arithmeticOperatorModifier,proto3" json:"arithmetic_operator_modifier,omitempty"`
	SampleThresholdPercentage  *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=sample_threshold_percentage,json=sampleThresholdPercentage,proto3" json:"sample_threshold_percentage,omitempty"`
	NonNullPercentage          *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=non_null_percentage,json=nonNullPercentage,proto3" json:"non_null_percentage,omitempty"`
	SwapNullValues             *wrapperspb.BoolValue   `protobuf:"bytes,5,opt,name=swap_null_values,json=swapNullValues,proto3" json:"swap_null_values,omitempty"`
}

func (x *MetricAlertPromqlConditionParameters) Reset() {
	*x = MetricAlertPromqlConditionParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricAlertPromqlConditionParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricAlertPromqlConditionParameters) ProtoMessage() {}

func (x *MetricAlertPromqlConditionParameters) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricAlertPromqlConditionParameters.ProtoReflect.Descriptor instead.
func (*MetricAlertPromqlConditionParameters) Descriptor() ([]byte, []int) {
	return file_com_coralogix_alerts_v1_alert_condition_proto_rawDescGZIP(), []int{10}
}

func (x *MetricAlertPromqlConditionParameters) GetPromqlText() *wrapperspb.StringValue {
	if x != nil {
		return x.PromqlText
	}
	return nil
}

func (x *MetricAlertPromqlConditionParameters) GetArithmeticOperatorModifier() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ArithmeticOperatorModifier
	}
	return nil
}

func (x *MetricAlertPromqlConditionParameters) GetSampleThresholdPercentage() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SampleThresholdPercentage
	}
	return nil
}

func (x *MetricAlertPromqlConditionParameters) GetNonNullPercentage() *wrapperspb.UInt32Value {
	if x != nil {
		return x.NonNullPercentage
	}
	return nil
}

func (x *MetricAlertPromqlConditionParameters) GetSwapNullValues() *wrapperspb.BoolValue {
	if x != nil {
		return x.SwapNullValues
	}
	return nil
}

type RelatedExtendedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CleanupDeadmanDuration *CleanupDeadmanDuration `protobuf:"varint,1,opt,name=cleanup_deadman_duration,json=cleanupDeadmanDuration,proto3,enum=com.coralogix.alerts.v1.CleanupDeadmanDuration,oneof" json:"cleanup_deadman_duration,omitempty"`
	ShouldTriggerDeadman   *wrapperspb.BoolValue   `protobuf:"bytes,2,opt,name=should_trigger_deadman,json=shouldTriggerDeadman,proto3,oneof" json:"should_trigger_deadman,omitempty"`
}

func (x *RelatedExtendedData) Reset() {
	*x = RelatedExtendedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedExtendedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedExtendedData) ProtoMessage() {}

func (x *RelatedExtendedData) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedExtendedData.ProtoReflect.Descriptor instead.
func (*RelatedExtendedData) Descriptor() ([]byte, []int) {
	return file_com_coralogix_alerts_v1_alert_condition_proto_rawDescGZIP(), []int{11}
}

func (x *RelatedExtendedData) GetCleanupDeadmanDuration() CleanupDeadmanDuration {
	if x != nil && x.CleanupDeadmanDuration != nil {
		return *x.CleanupDeadmanDuration
	}
	return CleanupDeadmanDuration_CLEANUP_DEADMAN_DURATION_NEVER_OR_UNSPECIFIED
}

func (x *RelatedExtendedData) GetShouldTriggerDeadman() *wrapperspb.BoolValue {
	if x != nil {
		return x.ShouldTriggerDeadman
	}
	return nil
}

var File_com_coralogix_alerts_v1_alert_condition_proto protoreflect.FileDescriptor

var file_com_coralogix_alerts_v1_alert_condition_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb8, 0x04, 0x0a, 0x0e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x09, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x49, 0x0a,
	0x09, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x72, 0x65, 0x54,
	0x68, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08,
	0x6d, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x59, 0x0a, 0x0f, 0x6d, 0x6f, 0x72, 0x65,
	0x5f, 0x74, 0x68, 0x61, 0x6e, 0x5f, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x72, 0x65,
	0x54, 0x68, 0x61, 0x6e, 0x55, 0x73, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x61, 0x6e, 0x55, 0x73,
	0x75, 0x61, 0x6c, 0x12, 0x49, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c,
	0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x52, 0x0a, 0x0c,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x14, 0x0a,
	0x12, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x11, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x61, 0x0a, 0x11, 0x4d, 0x6f, 0x72, 0x65, 0x54, 0x68,
	0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x66, 0x0a, 0x16, 0x4d, 0x6f, 0x72,
	0x65, 0x54, 0x68, 0x61, 0x6e, 0x55, 0x73, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x61, 0x0a, 0x11, 0x4e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x22, 0x64, 0x0a, 0x14, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x4b, 0x0a, 0x0d, 0x46, 0x6c,
	0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x22, 0x9d, 0x09, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x3a, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x6f, 0x0a, 0x17, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x15, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x1e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x1b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6d,
	0x71, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x12,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x59, 0x0a, 0x12, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x1b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73,
	0x12, 0x54, 0x0a, 0x19, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x15, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x11, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x71, 0x0a, 0x28, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x21, 0x6d, 0x61, 0x78, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x65, 0x0a, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd5, 0x07, 0x0a, 0x1e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x69, 0x0a, 0x0d, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x7b, 0x0a, 0x13, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x65, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x41, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x12, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x5e, 0x0a, 0x1c, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69,
	0x63, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65,
	0x74, 0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x1b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x4c, 0x0a, 0x13, 0x6e, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x6e, 0x6f,
	0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x44, 0x0a, 0x10, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x77, 0x61, 0x70, 0x4e, 0x75, 0x6c, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x5b, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x29, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x53, 0x32, 0x4d, 0x45, 0x54, 0x52,
	0x49, 0x43, 0x53, 0x5f, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x45, 0x54, 0x48, 0x45, 0x55, 0x53,
	0x10, 0x01, 0x22, 0xda, 0x01, 0x0a, 0x12, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69,
	0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x52, 0x49,
	0x54, 0x48, 0x4d, 0x45, 0x54, 0x49, 0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x41, 0x56, 0x47, 0x5f, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x45,
	0x54, 0x49, 0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4d, 0x49, 0x4e,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x45, 0x54, 0x49, 0x43,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x02, 0x12,
	0x1b, 0x0a, 0x17, 0x41, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x45, 0x54, 0x49, 0x43, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19,
	0x41, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x45, 0x54, 0x49, 0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x41,
	0x52, 0x49, 0x54, 0x48, 0x4d, 0x45, 0x54, 0x49, 0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x49, 0x4c, 0x45, 0x10, 0x05, 0x22,
	0xb7, 0x03, 0x0a, 0x24, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x50,
	0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6d,
	0x71, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x6d, 0x71, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x5e, 0x0a, 0x1c, 0x61, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x61, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x1b, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x6e, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6c,
	0x6c, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x11, 0x6e, 0x6f, 0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6e, 0x75, 0x6c, 0x6c,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x77, 0x61, 0x70, 0x4e,
	0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x94, 0x02, 0x0a, 0x13, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x6e, 0x0a, 0x18, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x61,
	0x64, 0x6d, 0x61, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x65, 0x61, 0x6e, 0x75, 0x70, 0x44, 0x65, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x44,
	0x65, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x55, 0x0a, 0x16, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52,
	0x14, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65,
	0x61, 0x64, 0x6d, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x63, 0x6c, 0x65,
	0x61, 0x6e, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6d, 0x61, 0x6e,
	0x2a, 0xc0, 0x03, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x1e, 0x54, 0x49, 0x4d, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x35, 0x5f, 0x4d, 0x49,
	0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x49, 0x4d, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f,
	0x31, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x12, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x49, 0x4d, 0x45, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x5f, 0x32, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x13, 0x12, 0x14, 0x0a, 0x10,
	0x54, 0x49, 0x4d, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x31, 0x30, 0x5f, 0x4d, 0x49, 0x4e,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x49, 0x4d, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f,
	0x31, 0x35, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x11, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x49, 0x4d, 0x45,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x32, 0x30, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x54, 0x49, 0x4d, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x33, 0x30, 0x5f, 0x4d,
	0x49, 0x4e, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x49, 0x4d, 0x45, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x5f, 0x31, 0x5f, 0x48, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x49, 0x4d, 0x45, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x5f, 0x32, 0x5f, 0x48, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x49,
	0x4d, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x33, 0x5f, 0x48, 0x10, 0x06, 0x12, 0x11, 0x0a,
	0x0d, 0x54, 0x49, 0x4d, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x34, 0x5f, 0x48, 0x10, 0x07,
	0x12, 0x11, 0x0a, 0x0d, 0x54, 0x49, 0x4d, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x36, 0x5f,
	0x48, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x49, 0x4d, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x5f, 0x31, 0x32, 0x5f, 0x48, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x49, 0x4d, 0x45, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x5f, 0x32, 0x34, 0x5f, 0x48, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x54,
	0x49, 0x4d, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x33, 0x36, 0x5f, 0x48, 0x10, 0x14, 0x12,
	0x12, 0x0a, 0x0e, 0x54, 0x49, 0x4d, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x34, 0x38, 0x5f,
	0x48, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x49, 0x4d, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x5f, 0x37, 0x32, 0x5f, 0x48, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x49, 0x4d, 0x45, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x5f, 0x31, 0x5f, 0x57, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x49,
	0x4d, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x31, 0x5f, 0x4d, 0x10, 0x0e, 0x12, 0x11, 0x0a,
	0x0d, 0x54, 0x49, 0x4d, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x32, 0x5f, 0x4d, 0x10, 0x0f,
	0x12, 0x11, 0x0a, 0x0d, 0x54, 0x49, 0x4d, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x33, 0x5f,
	0x4d, 0x10, 0x10, 0x2a, 0x96, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x4c,
	0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f,
	0x48, 0x4f, 0x55, 0x52, 0x5f, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x02, 0x12, 0x1c,
	0x0a, 0x18, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x03, 0x2a, 0xb9, 0x02, 0x0a,
	0x16, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x44, 0x65, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x2d, 0x43, 0x4c, 0x45, 0x41, 0x4e,
	0x55, 0x50, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x4d, 0x41, 0x4e, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x56, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4c,
	0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x4d, 0x41, 0x4e, 0x5f, 0x44, 0x55,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x35, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x22, 0x0a,
	0x1e, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x4d, 0x41, 0x4e,
	0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x31, 0x30, 0x4d, 0x49, 0x4e, 0x10,
	0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f, 0x44, 0x45, 0x41,
	0x44, 0x4d, 0x41, 0x4e, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x31, 0x48,
	0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f, 0x44, 0x45,
	0x41, 0x44, 0x4d, 0x41, 0x4e, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x32,
	0x48, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f, 0x44,
	0x45, 0x41, 0x44, 0x4d, 0x41, 0x4e, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x36, 0x48, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f,
	0x44, 0x45, 0x41, 0x44, 0x4d, 0x41, 0x4e, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x31, 0x32, 0x48, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55,
	0x50, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x4d, 0x41, 0x4e, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x32, 0x34, 0x48, 0x10, 0x07, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogix_alerts_v1_alert_condition_proto_rawDescOnce sync.Once
	file_com_coralogix_alerts_v1_alert_condition_proto_rawDescData = file_com_coralogix_alerts_v1_alert_condition_proto_rawDesc
)

func file_com_coralogix_alerts_v1_alert_condition_proto_rawDescGZIP() []byte {
	file_com_coralogix_alerts_v1_alert_condition_proto_rawDescOnce.Do(func() {
		file_com_coralogix_alerts_v1_alert_condition_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_alerts_v1_alert_condition_proto_rawDescData)
	})
	return file_com_coralogix_alerts_v1_alert_condition_proto_rawDescData
}

var file_com_coralogix_alerts_v1_alert_condition_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_com_coralogix_alerts_v1_alert_condition_proto_goTypes = []interface{}{
	(Timeframe)(0),                                         // 0: com.coralogix.alerts.v1.Timeframe
	(RelativeTimeframe)(0),                                 // 1: com.coralogix.alerts.v1.RelativeTimeframe
	(CleanupDeadmanDuration)(0),                            // 2: com.coralogix.alerts.v1.CleanupDeadmanDuration
	(MetricAlertConditionParameters_MetricSource)(0),       // 3: com.coralogix.alerts.v1.MetricAlertConditionParameters.MetricSource
	(MetricAlertConditionParameters_ArithmeticOperator)(0), // 4: com.coralogix.alerts.v1.MetricAlertConditionParameters.ArithmeticOperator
	(*AlertCondition)(nil),                                 // 5: com.coralogix.alerts.v1.AlertCondition
	(*ImmediateCondition)(nil),                             // 6: com.coralogix.alerts.v1.ImmediateCondition
	(*LessThanCondition)(nil),                              // 7: com.coralogix.alerts.v1.LessThanCondition
	(*MoreThanCondition)(nil),                              // 8: com.coralogix.alerts.v1.MoreThanCondition
	(*MoreThanUsualCondition)(nil),                         // 9: com.coralogix.alerts.v1.MoreThanUsualCondition
	(*NewValueCondition)(nil),                              // 10: com.coralogix.alerts.v1.NewValueCondition
	(*UniqueCountCondition)(nil),                           // 11: com.coralogix.alerts.v1.UniqueCountCondition
	(*FlowCondition)(nil),                                  // 12: com.coralogix.alerts.v1.FlowCondition
	(*ConditionParameters)(nil),                            // 13: com.coralogix.alerts.v1.ConditionParameters
	(*MetricAlertConditionParameters)(nil),                 // 14: com.coralogix.alerts.v1.MetricAlertConditionParameters
	(*MetricAlertPromqlConditionParameters)(nil),           // 15: com.coralogix.alerts.v1.MetricAlertPromqlConditionParameters
	(*RelatedExtendedData)(nil),                            // 16: com.coralogix.alerts.v1.RelatedExtendedData
	(*FlowStage)(nil),                                      // 17: com.coralogix.alerts.v1.FlowStage
	(*wrapperspb.DoubleValue)(nil),                         // 18: google.protobuf.DoubleValue
	(*wrapperspb.StringValue)(nil),                         // 19: google.protobuf.StringValue
	(*wrapperspb.BoolValue)(nil),                           // 20: google.protobuf.BoolValue
	(*wrapperspb.UInt32Value)(nil),                         // 21: google.protobuf.UInt32Value
}
var file_com_coralogix_alerts_v1_alert_condition_proto_depIdxs = []int32{
	6,  // 0: com.coralogix.alerts.v1.AlertCondition.immediate:type_name -> com.coralogix.alerts.v1.ImmediateCondition
	7,  // 1: com.coralogix.alerts.v1.AlertCondition.less_than:type_name -> com.coralogix.alerts.v1.LessThanCondition
	8,  // 2: com.coralogix.alerts.v1.AlertCondition.more_than:type_name -> com.coralogix.alerts.v1.MoreThanCondition
	9,  // 3: com.coralogix.alerts.v1.AlertCondition.more_than_usual:type_name -> com.coralogix.alerts.v1.MoreThanUsualCondition
	10, // 4: com.coralogix.alerts.v1.AlertCondition.new_value:type_name -> com.coralogix.alerts.v1.NewValueCondition
	12, // 5: com.coralogix.alerts.v1.AlertCondition.flow:type_name -> com.coralogix.alerts.v1.FlowCondition
	11, // 6: com.coralogix.alerts.v1.AlertCondition.unique_count:type_name -> com.coralogix.alerts.v1.UniqueCountCondition
	13, // 7: com.coralogix.alerts.v1.LessThanCondition.parameters:type_name -> com.coralogix.alerts.v1.ConditionParameters
	13, // 8: com.coralogix.alerts.v1.MoreThanCondition.parameters:type_name -> com.coralogix.alerts.v1.ConditionParameters
	13, // 9: com.coralogix.alerts.v1.MoreThanUsualCondition.parameters:type_name -> com.coralogix.alerts.v1.ConditionParameters
	13, // 10: com.coralogix.alerts.v1.NewValueCondition.parameters:type_name -> com.coralogix.alerts.v1.ConditionParameters
	13, // 11: com.coralogix.alerts.v1.UniqueCountCondition.parameters:type_name -> com.coralogix.alerts.v1.ConditionParameters
	17, // 12: com.coralogix.alerts.v1.FlowCondition.stages:type_name -> com.coralogix.alerts.v1.FlowStage
	18, // 13: com.coralogix.alerts.v1.ConditionParameters.threshold:type_name -> google.protobuf.DoubleValue
	0,  // 14: com.coralogix.alerts.v1.ConditionParameters.timeframe:type_name -> com.coralogix.alerts.v1.Timeframe
	19, // 15: com.coralogix.alerts.v1.ConditionParameters.group_by:type_name -> google.protobuf.StringValue
	14, // 16: com.coralogix.alerts.v1.ConditionParameters.metric_alert_parameters:type_name -> com.coralogix.alerts.v1.MetricAlertConditionParameters
	15, // 17: com.coralogix.alerts.v1.ConditionParameters.metric_alert_promql_parameters:type_name -> com.coralogix.alerts.v1.MetricAlertPromqlConditionParameters
	20, // 18: com.coralogix.alerts.v1.ConditionParameters.notify_on_resolved:type_name -> google.protobuf.BoolValue
	20, // 19: com.coralogix.alerts.v1.ConditionParameters.ignore_infinity:type_name -> google.protobuf.BoolValue
	1,  // 20: com.coralogix.alerts.v1.ConditionParameters.relative_timeframe:type_name -> com.coralogix.alerts.v1.RelativeTimeframe
	20, // 21: com.coralogix.alerts.v1.ConditionParameters.notify_group_by_only_alerts:type_name -> google.protobuf.BoolValue
	20, // 22: com.coralogix.alerts.v1.ConditionParameters.notify_per_group_by_value:type_name -> google.protobuf.BoolValue
	19, // 23: com.coralogix.alerts.v1.ConditionParameters.cardinality_fields:type_name -> google.protobuf.StringValue
	21, // 24: com.coralogix.alerts.v1.ConditionParameters.max_unique_count_values_for_group_by_key:type_name -> google.protobuf.UInt32Value
	16, // 25: com.coralogix.alerts.v1.ConditionParameters.related_extended_data:type_name -> com.coralogix.alerts.v1.RelatedExtendedData
	19, // 26: com.coralogix.alerts.v1.MetricAlertConditionParameters.metric_field:type_name -> google.protobuf.StringValue
	3,  // 27: com.coralogix.alerts.v1.MetricAlertConditionParameters.metric_source:type_name -> com.coralogix.alerts.v1.MetricAlertConditionParameters.MetricSource
	4,  // 28: com.coralogix.alerts.v1.MetricAlertConditionParameters.arithmetic_operator:type_name -> com.coralogix.alerts.v1.MetricAlertConditionParameters.ArithmeticOperator
	21, // 29: com.coralogix.alerts.v1.MetricAlertConditionParameters.arithmetic_operator_modifier:type_name -> google.protobuf.UInt32Value
	21, // 30: com.coralogix.alerts.v1.MetricAlertConditionParameters.sample_threshold_percentage:type_name -> google.protobuf.UInt32Value
	21, // 31: com.coralogix.alerts.v1.MetricAlertConditionParameters.non_null_percentage:type_name -> google.protobuf.UInt32Value
	20, // 32: com.coralogix.alerts.v1.MetricAlertConditionParameters.swap_null_values:type_name -> google.protobuf.BoolValue
	19, // 33: com.coralogix.alerts.v1.MetricAlertPromqlConditionParameters.promql_text:type_name -> google.protobuf.StringValue
	21, // 34: com.coralogix.alerts.v1.MetricAlertPromqlConditionParameters.arithmetic_operator_modifier:type_name -> google.protobuf.UInt32Value
	21, // 35: com.coralogix.alerts.v1.MetricAlertPromqlConditionParameters.sample_threshold_percentage:type_name -> google.protobuf.UInt32Value
	21, // 36: com.coralogix.alerts.v1.MetricAlertPromqlConditionParameters.non_null_percentage:type_name -> google.protobuf.UInt32Value
	20, // 37: com.coralogix.alerts.v1.MetricAlertPromqlConditionParameters.swap_null_values:type_name -> google.protobuf.BoolValue
	2,  // 38: com.coralogix.alerts.v1.RelatedExtendedData.cleanup_deadman_duration:type_name -> com.coralogix.alerts.v1.CleanupDeadmanDuration
	20, // 39: com.coralogix.alerts.v1.RelatedExtendedData.should_trigger_deadman:type_name -> google.protobuf.BoolValue
	40, // [40:40] is the sub-list for method output_type
	40, // [40:40] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_com_coralogix_alerts_v1_alert_condition_proto_init() }
func file_com_coralogix_alerts_v1_alert_condition_proto_init() {
	if File_com_coralogix_alerts_v1_alert_condition_proto != nil {
		return
	}
	file_com_coralogix_alerts_v1_flow_alert_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmediateCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LessThanCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoreThanCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoreThanUsualCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewValueCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniqueCountCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricAlertConditionParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricAlertPromqlConditionParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedExtendedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*AlertCondition_Immediate)(nil),
		(*AlertCondition_LessThan)(nil),
		(*AlertCondition_MoreThan)(nil),
		(*AlertCondition_MoreThanUsual)(nil),
		(*AlertCondition_NewValue)(nil),
		(*AlertCondition_Flow)(nil),
		(*AlertCondition_UniqueCount)(nil),
	}
	file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes[11].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_alerts_v1_alert_condition_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogix_alerts_v1_alert_condition_proto_goTypes,
		DependencyIndexes: file_com_coralogix_alerts_v1_alert_condition_proto_depIdxs,
		EnumInfos:         file_com_coralogix_alerts_v1_alert_condition_proto_enumTypes,
		MessageInfos:      file_com_coralogix_alerts_v1_alert_condition_proto_msgTypes,
	}.Build()
	File_com_coralogix_alerts_v1_alert_condition_proto = out.File
	file_com_coralogix_alerts_v1_alert_condition_proto_rawDesc = nil
	file_com_coralogix_alerts_v1_alert_condition_proto_goTypes = nil
	file_com_coralogix_alerts_v1_alert_condition_proto_depIdxs = nil
}
