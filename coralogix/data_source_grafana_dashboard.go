package coralogix

import (
	"context"
	"encoding/json"
	"fmt"
	"strconv"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"terraform-provider-coralogix/coralogix/clientset"
)

func dataSourceGrafanaDashboard() *schema.Resource {
	grafanaDashboardSchema := datasourceSchemaFromResourceSchema(GrafanaDashboardSchema())
	grafanaDashboardSchema["uid"] = &schema.Schema{
		Type:     schema.TypeString,
		Required: true,
		Description: "The unique identifier of a dashboard. This is used to construct its URL. " +
			"It's automatically generated if not provided when creating a dashboard. " +
			"The uid allows having consistent URLs for accessing dashboards and when syncing dashboards between multiple Grafana installs. ",
	}

	return &schema.Resource{
		ReadContext: dataSourceGrafanaDashboardRead,

		Schema: grafanaDashboardSchema,
	}
}

func dataSourceGrafanaDashboardRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	uid := d.Get("uid").(string)
	dashboard, err := meta.(*clientset.ClientSet).GrafanaDashboards().GetGrafanaDashboard(ctx, uid)

	var diags diag.Diagnostics
	if err != nil {
		if strings.HasPrefix(err.Error(), "status: 404") {
			diags = append(diags, diag.Diagnostic{
				Severity: diag.Warning,
				Summary:  fmt.Sprintf("Dashboard %q is in state, but no longer exists in grafana", uid),
				Detail:   fmt.Sprintf("%q will be recreated when you apply", uid),
			})
			d.SetId("")
			return diags
		} else {
			return diag.FromErr(err)
		}
	}

	d.SetId(dashboard.Model["uid"].(string))
	d.Set("uid", dashboard.Model["uid"].(string))
	d.Set("dashboard_id", int64(dashboard.Model["id"].(float64)))
	d.Set("version", int64(dashboard.Model["version"].(float64)))
	d.Set("url", strings.TrimRight(meta.(*clientset.ClientSet).GrafanaDashboards().GetTargetURL(), "/")+dashboard.Meta.URL)
	if dashboard.FolderID > 0 {
		d.Set("folder", strconv.FormatInt(dashboard.FolderID, 10))
	} else {
		d.Set("folder", "")
	}

	configJSONBytes, err := json.Marshal(dashboard.Model)
	if err != nil {
		return diag.FromErr(err)
	}
	remoteDashJSON, err := unmarshalDashboardConfigJSON(string(configJSONBytes))
	if err != nil {
		return diag.FromErr(err)
	}

	configJSON := d.Get("config_json").(string)

	// Skip if `uid` is not set in configuration, we need to delete it from the
	// dashboard JSON we just read from the Grafana API. This is so it does not
	// create a diff. We can assume the uid was randomly generated by Grafana or
	// it was removed after dashboard creation. In any case, the user doesn't
	// care to manage it.
	if configJSON != "" {
		configuredDashJSON, err := unmarshalDashboardConfigJSON(configJSON)
		if err != nil {
			return diag.FromErr(err)
		}
		if _, ok := configuredDashJSON["uid"].(string); !ok {
			delete(remoteDashJSON, "uid")
		}
	}
	configJSON = normalizeDashboardConfigJSON(remoteDashJSON)
	d.Set("config_json", configJSON)

	return diags
}
